/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.13.0.bmaster.r20180119190259-8b60eaa.b1753
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INodegroupsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Post a new link to a node group (since 1.7)
        /// </summary>
        /// <remarks>
        /// Creates a link between a node group and a node or other node group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkParentId">Id of parent node group</param>
        /// <param name="rkChildId">Id of child node or node group</param>
        /// <returns></returns>
        void AssociateNodeGroupableToNodeGroup (string rkParentId, string rkChildId);

        /// <summary>
        /// Post a new link to a node group (since 1.7)
        /// </summary>
        /// <remarks>
        /// Creates a link between a node group and a node or other node group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkParentId">Id of parent node group</param>
        /// <param name="rkChildId">Id of child node or node group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssociateNodeGroupableToNodeGroupWithHttpInfo (string rkParentId, string rkChildId);
        /// <summary>
        /// Create a new node group (since 1.4)
        /// </summary>
        /// <remarks>
        /// Returns the newly created node group. A new node group will be in the unlinked group until it is linked with another group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Node group object to be created in TE</param>
        /// <returns>NodeGroup</returns>
        NodeGroup CreateNodeGroup (NodeGroup body);

        /// <summary>
        /// Create a new node group (since 1.4)
        /// </summary>
        /// <remarks>
        /// Returns the newly created node group. A new node group will be in the unlinked group until it is linked with another group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Node group object to be created in TE</param>
        /// <returns>ApiResponse of NodeGroup</returns>
        ApiResponse<NodeGroup> CreateNodeGroupWithHttpInfo (NodeGroup body);
        /// <summary>
        /// Delete a node group (since 1.4)
        /// </summary>
        /// <remarks>
        /// Removes a node group, leaving any child nodes or node groups in the unlinked group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkNodeGroupId">ID of node group to delete</param>
        /// <returns></returns>
        void DeleteNodeGroup (string rkNodeGroupId);

        /// <summary>
        /// Delete a node group (since 1.4)
        /// </summary>
        /// <remarks>
        /// Removes a node group, leaving any child nodes or node groups in the unlinked group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkNodeGroupId">ID of node group to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteNodeGroupWithHttpInfo (string rkNodeGroupId);
        /// <summary>
        /// Delete a link to a node group (since 1.7)
        /// </summary>
        /// <remarks>
        /// Removes a link between a node group and a node or other node group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkParentId">Id of parent node group</param>
        /// <param name="rkChildId">Id of child node or node group</param>
        /// <returns></returns>
        void DisassociateNodeGroupableToNodeGroup (string rkParentId, string rkChildId);

        /// <summary>
        /// Delete a link to a node group (since 1.7)
        /// </summary>
        /// <remarks>
        /// Removes a link between a node group and a node or other node group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkParentId">Id of parent node group</param>
        /// <param name="rkChildId">Id of child node or node group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DisassociateNodeGroupableToNodeGroupWithHttpInfo (string rkParentId, string rkChildId);
        /// <summary>
        /// Get children of a node group (since 1.7)
        /// </summary>
        /// <remarks>
        /// Returns a list of all visible, immediate children of a node group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkNodeGroupId">Id of parent node group</param>
        /// <returns>NodeGroupChild</returns>
        NodeGroupChild GetNodeGroupChildren (string rkNodeGroupId);

        /// <summary>
        /// Get children of a node group (since 1.7)
        /// </summary>
        /// <remarks>
        /// Returns a list of all visible, immediate children of a node group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkNodeGroupId">Id of parent node group</param>
        /// <returns>ApiResponse of NodeGroupChild</returns>
        ApiResponse<NodeGroupChild> GetNodeGroupChildrenWithHttpInfo (string rkNodeGroupId);
        /// <summary>
        /// Get descendants of a node group (since 1.11)
        /// </summary>
        /// <remarks>
        /// Returns a list of all visible descendant nodes of a node group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkNodeGroupId">Id of parent node group</param>
        /// <returns>NodeGroupChild</returns>
        NodeGroupChild GetNodeGroupDescendantNodes (string rkNodeGroupId);

        /// <summary>
        /// Get descendants of a node group (since 1.11)
        /// </summary>
        /// <remarks>
        /// Returns a list of all visible descendant nodes of a node group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkNodeGroupId">Id of parent node group</param>
        /// <returns>ApiResponse of NodeGroupChild</returns>
        ApiResponse<NodeGroupChild> GetNodeGroupDescendantNodesWithHttpInfo (string rkNodeGroupId);
        /// <summary>
        /// Search all node groups (since 1.6)
        /// </summary>
        /// <remarks>
        /// Return a list of all node groups or only those node groups that match the provided filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Descriptions of Node Groups to fetch. (optional)</param>
        /// <param name="id">IDs of Node Groups to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of Node Groups to fetch. (optional)</param>
        /// <param name="modifiedTime">Modified times of Node Groups to fetch. (optional)</param>
        /// <param name="name">Names of Node Groups to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="subDescription">Support for like search for description parameter. (optional)</param>
        /// <param name="trackingId">Tracking ids of Node Groups to fetch. (optional)</param>
        /// <param name="type">Types of Node Groups to fetch. (optional)</param>
        /// <returns>NodeGroup</returns>
        NodeGroup GetNodeGroups (List<string> description = null, List<string> id = null, List<string> importedTime = null, List<string> modifiedTime = null, List<string> name = null, string pageLimit = null, string pageStart = null, List<string> subDescription = null, List<string> trackingId = null, List<string> type = null);

        /// <summary>
        /// Search all node groups (since 1.6)
        /// </summary>
        /// <remarks>
        /// Return a list of all node groups or only those node groups that match the provided filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Descriptions of Node Groups to fetch. (optional)</param>
        /// <param name="id">IDs of Node Groups to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of Node Groups to fetch. (optional)</param>
        /// <param name="modifiedTime">Modified times of Node Groups to fetch. (optional)</param>
        /// <param name="name">Names of Node Groups to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="subDescription">Support for like search for description parameter. (optional)</param>
        /// <param name="trackingId">Tracking ids of Node Groups to fetch. (optional)</param>
        /// <param name="type">Types of Node Groups to fetch. (optional)</param>
        /// <returns>ApiResponse of NodeGroup</returns>
        ApiResponse<NodeGroup> GetNodeGroupsWithHttpInfo (List<string> description = null, List<string> id = null, List<string> importedTime = null, List<string> modifiedTime = null, List<string> name = null, string pageLimit = null, string pageStart = null, List<string> subDescription = null, List<string> trackingId = null, List<string> type = null);
        /// <summary>
        /// Get root node group (since 1.6)
        /// </summary>
        /// <remarks>
        /// Returns the node group resource for the &#39;Root Node Group&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>NodeGroup</returns>
        NodeGroup GetRootNodeGroup ();

        /// <summary>
        /// Get root node group (since 1.6)
        /// </summary>
        /// <remarks>
        /// Returns the node group resource for the &#39;Root Node Group&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of NodeGroup</returns>
        ApiResponse<NodeGroup> GetRootNodeGroupWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Post a new link to a node group (since 1.7)
        /// </summary>
        /// <remarks>
        /// Creates a link between a node group and a node or other node group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkParentId">Id of parent node group</param>
        /// <param name="rkChildId">Id of child node or node group</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssociateNodeGroupableToNodeGroupAsync (string rkParentId, string rkChildId);

        /// <summary>
        /// Post a new link to a node group (since 1.7)
        /// </summary>
        /// <remarks>
        /// Creates a link between a node group and a node or other node group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkParentId">Id of parent node group</param>
        /// <param name="rkChildId">Id of child node or node group</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssociateNodeGroupableToNodeGroupAsyncWithHttpInfo (string rkParentId, string rkChildId);
        /// <summary>
        /// Create a new node group (since 1.4)
        /// </summary>
        /// <remarks>
        /// Returns the newly created node group. A new node group will be in the unlinked group until it is linked with another group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Node group object to be created in TE</param>
        /// <returns>Task of NodeGroup</returns>
        System.Threading.Tasks.Task<NodeGroup> CreateNodeGroupAsync (NodeGroup body);

        /// <summary>
        /// Create a new node group (since 1.4)
        /// </summary>
        /// <remarks>
        /// Returns the newly created node group. A new node group will be in the unlinked group until it is linked with another group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Node group object to be created in TE</param>
        /// <returns>Task of ApiResponse (NodeGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeGroup>> CreateNodeGroupAsyncWithHttpInfo (NodeGroup body);
        /// <summary>
        /// Delete a node group (since 1.4)
        /// </summary>
        /// <remarks>
        /// Removes a node group, leaving any child nodes or node groups in the unlinked group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkNodeGroupId">ID of node group to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteNodeGroupAsync (string rkNodeGroupId);

        /// <summary>
        /// Delete a node group (since 1.4)
        /// </summary>
        /// <remarks>
        /// Removes a node group, leaving any child nodes or node groups in the unlinked group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkNodeGroupId">ID of node group to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNodeGroupAsyncWithHttpInfo (string rkNodeGroupId);
        /// <summary>
        /// Delete a link to a node group (since 1.7)
        /// </summary>
        /// <remarks>
        /// Removes a link between a node group and a node or other node group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkParentId">Id of parent node group</param>
        /// <param name="rkChildId">Id of child node or node group</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DisassociateNodeGroupableToNodeGroupAsync (string rkParentId, string rkChildId);

        /// <summary>
        /// Delete a link to a node group (since 1.7)
        /// </summary>
        /// <remarks>
        /// Removes a link between a node group and a node or other node group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkParentId">Id of parent node group</param>
        /// <param name="rkChildId">Id of child node or node group</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DisassociateNodeGroupableToNodeGroupAsyncWithHttpInfo (string rkParentId, string rkChildId);
        /// <summary>
        /// Get children of a node group (since 1.7)
        /// </summary>
        /// <remarks>
        /// Returns a list of all visible, immediate children of a node group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkNodeGroupId">Id of parent node group</param>
        /// <returns>Task of NodeGroupChild</returns>
        System.Threading.Tasks.Task<NodeGroupChild> GetNodeGroupChildrenAsync (string rkNodeGroupId);

        /// <summary>
        /// Get children of a node group (since 1.7)
        /// </summary>
        /// <remarks>
        /// Returns a list of all visible, immediate children of a node group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkNodeGroupId">Id of parent node group</param>
        /// <returns>Task of ApiResponse (NodeGroupChild)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeGroupChild>> GetNodeGroupChildrenAsyncWithHttpInfo (string rkNodeGroupId);
        /// <summary>
        /// Get descendants of a node group (since 1.11)
        /// </summary>
        /// <remarks>
        /// Returns a list of all visible descendant nodes of a node group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkNodeGroupId">Id of parent node group</param>
        /// <returns>Task of NodeGroupChild</returns>
        System.Threading.Tasks.Task<NodeGroupChild> GetNodeGroupDescendantNodesAsync (string rkNodeGroupId);

        /// <summary>
        /// Get descendants of a node group (since 1.11)
        /// </summary>
        /// <remarks>
        /// Returns a list of all visible descendant nodes of a node group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkNodeGroupId">Id of parent node group</param>
        /// <returns>Task of ApiResponse (NodeGroupChild)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeGroupChild>> GetNodeGroupDescendantNodesAsyncWithHttpInfo (string rkNodeGroupId);
        /// <summary>
        /// Search all node groups (since 1.6)
        /// </summary>
        /// <remarks>
        /// Return a list of all node groups or only those node groups that match the provided filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Descriptions of Node Groups to fetch. (optional)</param>
        /// <param name="id">IDs of Node Groups to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of Node Groups to fetch. (optional)</param>
        /// <param name="modifiedTime">Modified times of Node Groups to fetch. (optional)</param>
        /// <param name="name">Names of Node Groups to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="subDescription">Support for like search for description parameter. (optional)</param>
        /// <param name="trackingId">Tracking ids of Node Groups to fetch. (optional)</param>
        /// <param name="type">Types of Node Groups to fetch. (optional)</param>
        /// <returns>Task of NodeGroup</returns>
        System.Threading.Tasks.Task<NodeGroup> GetNodeGroupsAsync (List<string> description = null, List<string> id = null, List<string> importedTime = null, List<string> modifiedTime = null, List<string> name = null, string pageLimit = null, string pageStart = null, List<string> subDescription = null, List<string> trackingId = null, List<string> type = null);

        /// <summary>
        /// Search all node groups (since 1.6)
        /// </summary>
        /// <remarks>
        /// Return a list of all node groups or only those node groups that match the provided filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Descriptions of Node Groups to fetch. (optional)</param>
        /// <param name="id">IDs of Node Groups to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of Node Groups to fetch. (optional)</param>
        /// <param name="modifiedTime">Modified times of Node Groups to fetch. (optional)</param>
        /// <param name="name">Names of Node Groups to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="subDescription">Support for like search for description parameter. (optional)</param>
        /// <param name="trackingId">Tracking ids of Node Groups to fetch. (optional)</param>
        /// <param name="type">Types of Node Groups to fetch. (optional)</param>
        /// <returns>Task of ApiResponse (NodeGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeGroup>> GetNodeGroupsAsyncWithHttpInfo (List<string> description = null, List<string> id = null, List<string> importedTime = null, List<string> modifiedTime = null, List<string> name = null, string pageLimit = null, string pageStart = null, List<string> subDescription = null, List<string> trackingId = null, List<string> type = null);
        /// <summary>
        /// Get root node group (since 1.6)
        /// </summary>
        /// <remarks>
        /// Returns the node group resource for the &#39;Root Node Group&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of NodeGroup</returns>
        System.Threading.Tasks.Task<NodeGroup> GetRootNodeGroupAsync ();

        /// <summary>
        /// Get root node group (since 1.6)
        /// </summary>
        /// <remarks>
        /// Returns the node group resource for the &#39;Root Node Group&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (NodeGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeGroup>> GetRootNodeGroupAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NodegroupsApi : INodegroupsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NodegroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NodegroupsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NodegroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NodegroupsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Post a new link to a node group (since 1.7) Creates a link between a node group and a node or other node group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkParentId">Id of parent node group</param>
        /// <param name="rkChildId">Id of child node or node group</param>
        /// <returns></returns>
        public void AssociateNodeGroupableToNodeGroup (string rkParentId, string rkChildId)
        {
             AssociateNodeGroupableToNodeGroupWithHttpInfo(rkParentId, rkChildId);
        }

        /// <summary>
        /// Post a new link to a node group (since 1.7) Creates a link between a node group and a node or other node group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkParentId">Id of parent node group</param>
        /// <param name="rkChildId">Id of child node or node group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssociateNodeGroupableToNodeGroupWithHttpInfo (string rkParentId, string rkChildId)
        {
            // verify the required parameter 'rkParentId' is set
            if (rkParentId == null)
                throw new ApiException(400, "Missing required parameter 'rkParentId' when calling NodegroupsApi->AssociateNodeGroupableToNodeGroup");
            // verify the required parameter 'rkChildId' is set
            if (rkChildId == null)
                throw new ApiException(400, "Missing required parameter 'rkChildId' when calling NodegroupsApi->AssociateNodeGroupableToNodeGroup");

            var localVarPath = "/nodegroups/{rkParentId}/links/{rkChildId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkParentId != null) localVarPathParams.Add("rkParentId", this.Configuration.ApiClient.ParameterToString(rkParentId)); // path parameter
            if (rkChildId != null) localVarPathParams.Add("rkChildId", this.Configuration.ApiClient.ParameterToString(rkChildId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociateNodeGroupableToNodeGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Post a new link to a node group (since 1.7) Creates a link between a node group and a node or other node group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkParentId">Id of parent node group</param>
        /// <param name="rkChildId">Id of child node or node group</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssociateNodeGroupableToNodeGroupAsync (string rkParentId, string rkChildId)
        {
             await AssociateNodeGroupableToNodeGroupAsyncWithHttpInfo(rkParentId, rkChildId);

        }

        /// <summary>
        /// Post a new link to a node group (since 1.7) Creates a link between a node group and a node or other node group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkParentId">Id of parent node group</param>
        /// <param name="rkChildId">Id of child node or node group</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssociateNodeGroupableToNodeGroupAsyncWithHttpInfo (string rkParentId, string rkChildId)
        {
            // verify the required parameter 'rkParentId' is set
            if (rkParentId == null)
                throw new ApiException(400, "Missing required parameter 'rkParentId' when calling NodegroupsApi->AssociateNodeGroupableToNodeGroup");
            // verify the required parameter 'rkChildId' is set
            if (rkChildId == null)
                throw new ApiException(400, "Missing required parameter 'rkChildId' when calling NodegroupsApi->AssociateNodeGroupableToNodeGroup");

            var localVarPath = "/nodegroups/{rkParentId}/links/{rkChildId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkParentId != null) localVarPathParams.Add("rkParentId", this.Configuration.ApiClient.ParameterToString(rkParentId)); // path parameter
            if (rkChildId != null) localVarPathParams.Add("rkChildId", this.Configuration.ApiClient.ParameterToString(rkChildId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociateNodeGroupableToNodeGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a new node group (since 1.4) Returns the newly created node group. A new node group will be in the unlinked group until it is linked with another group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Node group object to be created in TE</param>
        /// <returns>NodeGroup</returns>
        public NodeGroup CreateNodeGroup (NodeGroup body)
        {
             ApiResponse<NodeGroup> localVarResponse = CreateNodeGroupWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new node group (since 1.4) Returns the newly created node group. A new node group will be in the unlinked group until it is linked with another group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Node group object to be created in TE</param>
        /// <returns>ApiResponse of NodeGroup</returns>
        public ApiResponse< NodeGroup > CreateNodeGroupWithHttpInfo (NodeGroup body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling NodegroupsApi->CreateNodeGroup");

            var localVarPath = "/nodegroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNodeGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NodeGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeGroup)));
        }

        /// <summary>
        /// Create a new node group (since 1.4) Returns the newly created node group. A new node group will be in the unlinked group until it is linked with another group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Node group object to be created in TE</param>
        /// <returns>Task of NodeGroup</returns>
        public async System.Threading.Tasks.Task<NodeGroup> CreateNodeGroupAsync (NodeGroup body)
        {
             ApiResponse<NodeGroup> localVarResponse = await CreateNodeGroupAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new node group (since 1.4) Returns the newly created node group. A new node group will be in the unlinked group until it is linked with another group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Node group object to be created in TE</param>
        /// <returns>Task of ApiResponse (NodeGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NodeGroup>> CreateNodeGroupAsyncWithHttpInfo (NodeGroup body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling NodegroupsApi->CreateNodeGroup");

            var localVarPath = "/nodegroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNodeGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NodeGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeGroup)));
        }

        /// <summary>
        /// Delete a node group (since 1.4) Removes a node group, leaving any child nodes or node groups in the unlinked group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkNodeGroupId">ID of node group to delete</param>
        /// <returns></returns>
        public void DeleteNodeGroup (string rkNodeGroupId)
        {
             DeleteNodeGroupWithHttpInfo(rkNodeGroupId);
        }

        /// <summary>
        /// Delete a node group (since 1.4) Removes a node group, leaving any child nodes or node groups in the unlinked group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkNodeGroupId">ID of node group to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteNodeGroupWithHttpInfo (string rkNodeGroupId)
        {
            // verify the required parameter 'rkNodeGroupId' is set
            if (rkNodeGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkNodeGroupId' when calling NodegroupsApi->DeleteNodeGroup");

            var localVarPath = "/nodegroups/{rkNodeGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkNodeGroupId != null) localVarPathParams.Add("rkNodeGroupId", this.Configuration.ApiClient.ParameterToString(rkNodeGroupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNodeGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a node group (since 1.4) Removes a node group, leaving any child nodes or node groups in the unlinked group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkNodeGroupId">ID of node group to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteNodeGroupAsync (string rkNodeGroupId)
        {
             await DeleteNodeGroupAsyncWithHttpInfo(rkNodeGroupId);

        }

        /// <summary>
        /// Delete a node group (since 1.4) Removes a node group, leaving any child nodes or node groups in the unlinked group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkNodeGroupId">ID of node group to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNodeGroupAsyncWithHttpInfo (string rkNodeGroupId)
        {
            // verify the required parameter 'rkNodeGroupId' is set
            if (rkNodeGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkNodeGroupId' when calling NodegroupsApi->DeleteNodeGroup");

            var localVarPath = "/nodegroups/{rkNodeGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkNodeGroupId != null) localVarPathParams.Add("rkNodeGroupId", this.Configuration.ApiClient.ParameterToString(rkNodeGroupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNodeGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a link to a node group (since 1.7) Removes a link between a node group and a node or other node group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkParentId">Id of parent node group</param>
        /// <param name="rkChildId">Id of child node or node group</param>
        /// <returns></returns>
        public void DisassociateNodeGroupableToNodeGroup (string rkParentId, string rkChildId)
        {
             DisassociateNodeGroupableToNodeGroupWithHttpInfo(rkParentId, rkChildId);
        }

        /// <summary>
        /// Delete a link to a node group (since 1.7) Removes a link between a node group and a node or other node group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkParentId">Id of parent node group</param>
        /// <param name="rkChildId">Id of child node or node group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DisassociateNodeGroupableToNodeGroupWithHttpInfo (string rkParentId, string rkChildId)
        {
            // verify the required parameter 'rkParentId' is set
            if (rkParentId == null)
                throw new ApiException(400, "Missing required parameter 'rkParentId' when calling NodegroupsApi->DisassociateNodeGroupableToNodeGroup");
            // verify the required parameter 'rkChildId' is set
            if (rkChildId == null)
                throw new ApiException(400, "Missing required parameter 'rkChildId' when calling NodegroupsApi->DisassociateNodeGroupableToNodeGroup");

            var localVarPath = "/nodegroups/{rkParentId}/links/{rkChildId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkParentId != null) localVarPathParams.Add("rkParentId", this.Configuration.ApiClient.ParameterToString(rkParentId)); // path parameter
            if (rkChildId != null) localVarPathParams.Add("rkChildId", this.Configuration.ApiClient.ParameterToString(rkChildId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisassociateNodeGroupableToNodeGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a link to a node group (since 1.7) Removes a link between a node group and a node or other node group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkParentId">Id of parent node group</param>
        /// <param name="rkChildId">Id of child node or node group</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DisassociateNodeGroupableToNodeGroupAsync (string rkParentId, string rkChildId)
        {
             await DisassociateNodeGroupableToNodeGroupAsyncWithHttpInfo(rkParentId, rkChildId);

        }

        /// <summary>
        /// Delete a link to a node group (since 1.7) Removes a link between a node group and a node or other node group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkParentId">Id of parent node group</param>
        /// <param name="rkChildId">Id of child node or node group</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DisassociateNodeGroupableToNodeGroupAsyncWithHttpInfo (string rkParentId, string rkChildId)
        {
            // verify the required parameter 'rkParentId' is set
            if (rkParentId == null)
                throw new ApiException(400, "Missing required parameter 'rkParentId' when calling NodegroupsApi->DisassociateNodeGroupableToNodeGroup");
            // verify the required parameter 'rkChildId' is set
            if (rkChildId == null)
                throw new ApiException(400, "Missing required parameter 'rkChildId' when calling NodegroupsApi->DisassociateNodeGroupableToNodeGroup");

            var localVarPath = "/nodegroups/{rkParentId}/links/{rkChildId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkParentId != null) localVarPathParams.Add("rkParentId", this.Configuration.ApiClient.ParameterToString(rkParentId)); // path parameter
            if (rkChildId != null) localVarPathParams.Add("rkChildId", this.Configuration.ApiClient.ParameterToString(rkChildId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisassociateNodeGroupableToNodeGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get children of a node group (since 1.7) Returns a list of all visible, immediate children of a node group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkNodeGroupId">Id of parent node group</param>
        /// <returns>NodeGroupChild</returns>
        public NodeGroupChild GetNodeGroupChildren (string rkNodeGroupId)
        {
             ApiResponse<NodeGroupChild> localVarResponse = GetNodeGroupChildrenWithHttpInfo(rkNodeGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get children of a node group (since 1.7) Returns a list of all visible, immediate children of a node group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkNodeGroupId">Id of parent node group</param>
        /// <returns>ApiResponse of NodeGroupChild</returns>
        public ApiResponse< NodeGroupChild > GetNodeGroupChildrenWithHttpInfo (string rkNodeGroupId)
        {
            // verify the required parameter 'rkNodeGroupId' is set
            if (rkNodeGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkNodeGroupId' when calling NodegroupsApi->GetNodeGroupChildren");

            var localVarPath = "/nodegroups/{rkNodeGroupId}/links";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkNodeGroupId != null) localVarPathParams.Add("rkNodeGroupId", this.Configuration.ApiClient.ParameterToString(rkNodeGroupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNodeGroupChildren", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeGroupChild>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NodeGroupChild) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeGroupChild)));
        }

        /// <summary>
        /// Get children of a node group (since 1.7) Returns a list of all visible, immediate children of a node group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkNodeGroupId">Id of parent node group</param>
        /// <returns>Task of NodeGroupChild</returns>
        public async System.Threading.Tasks.Task<NodeGroupChild> GetNodeGroupChildrenAsync (string rkNodeGroupId)
        {
             ApiResponse<NodeGroupChild> localVarResponse = await GetNodeGroupChildrenAsyncWithHttpInfo(rkNodeGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get children of a node group (since 1.7) Returns a list of all visible, immediate children of a node group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkNodeGroupId">Id of parent node group</param>
        /// <returns>Task of ApiResponse (NodeGroupChild)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NodeGroupChild>> GetNodeGroupChildrenAsyncWithHttpInfo (string rkNodeGroupId)
        {
            // verify the required parameter 'rkNodeGroupId' is set
            if (rkNodeGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkNodeGroupId' when calling NodegroupsApi->GetNodeGroupChildren");

            var localVarPath = "/nodegroups/{rkNodeGroupId}/links";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkNodeGroupId != null) localVarPathParams.Add("rkNodeGroupId", this.Configuration.ApiClient.ParameterToString(rkNodeGroupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNodeGroupChildren", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeGroupChild>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NodeGroupChild) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeGroupChild)));
        }

        /// <summary>
        /// Get descendants of a node group (since 1.11) Returns a list of all visible descendant nodes of a node group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkNodeGroupId">Id of parent node group</param>
        /// <returns>NodeGroupChild</returns>
        public NodeGroupChild GetNodeGroupDescendantNodes (string rkNodeGroupId)
        {
             ApiResponse<NodeGroupChild> localVarResponse = GetNodeGroupDescendantNodesWithHttpInfo(rkNodeGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get descendants of a node group (since 1.11) Returns a list of all visible descendant nodes of a node group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkNodeGroupId">Id of parent node group</param>
        /// <returns>ApiResponse of NodeGroupChild</returns>
        public ApiResponse< NodeGroupChild > GetNodeGroupDescendantNodesWithHttpInfo (string rkNodeGroupId)
        {
            // verify the required parameter 'rkNodeGroupId' is set
            if (rkNodeGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkNodeGroupId' when calling NodegroupsApi->GetNodeGroupDescendantNodes");

            var localVarPath = "/nodegroups/{rkNodeGroupId}/descendantNodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkNodeGroupId != null) localVarPathParams.Add("rkNodeGroupId", this.Configuration.ApiClient.ParameterToString(rkNodeGroupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNodeGroupDescendantNodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeGroupChild>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NodeGroupChild) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeGroupChild)));
        }

        /// <summary>
        /// Get descendants of a node group (since 1.11) Returns a list of all visible descendant nodes of a node group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkNodeGroupId">Id of parent node group</param>
        /// <returns>Task of NodeGroupChild</returns>
        public async System.Threading.Tasks.Task<NodeGroupChild> GetNodeGroupDescendantNodesAsync (string rkNodeGroupId)
        {
             ApiResponse<NodeGroupChild> localVarResponse = await GetNodeGroupDescendantNodesAsyncWithHttpInfo(rkNodeGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get descendants of a node group (since 1.11) Returns a list of all visible descendant nodes of a node group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkNodeGroupId">Id of parent node group</param>
        /// <returns>Task of ApiResponse (NodeGroupChild)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NodeGroupChild>> GetNodeGroupDescendantNodesAsyncWithHttpInfo (string rkNodeGroupId)
        {
            // verify the required parameter 'rkNodeGroupId' is set
            if (rkNodeGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkNodeGroupId' when calling NodegroupsApi->GetNodeGroupDescendantNodes");

            var localVarPath = "/nodegroups/{rkNodeGroupId}/descendantNodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkNodeGroupId != null) localVarPathParams.Add("rkNodeGroupId", this.Configuration.ApiClient.ParameterToString(rkNodeGroupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNodeGroupDescendantNodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeGroupChild>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NodeGroupChild) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeGroupChild)));
        }

        /// <summary>
        /// Search all node groups (since 1.6) Return a list of all node groups or only those node groups that match the provided filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Descriptions of Node Groups to fetch. (optional)</param>
        /// <param name="id">IDs of Node Groups to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of Node Groups to fetch. (optional)</param>
        /// <param name="modifiedTime">Modified times of Node Groups to fetch. (optional)</param>
        /// <param name="name">Names of Node Groups to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="subDescription">Support for like search for description parameter. (optional)</param>
        /// <param name="trackingId">Tracking ids of Node Groups to fetch. (optional)</param>
        /// <param name="type">Types of Node Groups to fetch. (optional)</param>
        /// <returns>NodeGroup</returns>
        public NodeGroup GetNodeGroups (List<string> description = null, List<string> id = null, List<string> importedTime = null, List<string> modifiedTime = null, List<string> name = null, string pageLimit = null, string pageStart = null, List<string> subDescription = null, List<string> trackingId = null, List<string> type = null)
        {
             ApiResponse<NodeGroup> localVarResponse = GetNodeGroupsWithHttpInfo(description, id, importedTime, modifiedTime, name, pageLimit, pageStart, subDescription, trackingId, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search all node groups (since 1.6) Return a list of all node groups or only those node groups that match the provided filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Descriptions of Node Groups to fetch. (optional)</param>
        /// <param name="id">IDs of Node Groups to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of Node Groups to fetch. (optional)</param>
        /// <param name="modifiedTime">Modified times of Node Groups to fetch. (optional)</param>
        /// <param name="name">Names of Node Groups to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="subDescription">Support for like search for description parameter. (optional)</param>
        /// <param name="trackingId">Tracking ids of Node Groups to fetch. (optional)</param>
        /// <param name="type">Types of Node Groups to fetch. (optional)</param>
        /// <returns>ApiResponse of NodeGroup</returns>
        public ApiResponse< NodeGroup > GetNodeGroupsWithHttpInfo (List<string> description = null, List<string> id = null, List<string> importedTime = null, List<string> modifiedTime = null, List<string> name = null, string pageLimit = null, string pageStart = null, List<string> subDescription = null, List<string> trackingId = null, List<string> type = null)
        {

            var localVarPath = "/nodegroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "description", description)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (importedTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "importedTime", importedTime)); // query parameter
            if (modifiedTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "modifiedTime", modifiedTime)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageLimit", pageLimit)); // query parameter
            if (pageStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageStart", pageStart)); // query parameter
            if (subDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sub_description", subDescription)); // query parameter
            if (trackingId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "trackingId", trackingId)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNodeGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NodeGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeGroup)));
        }

        /// <summary>
        /// Search all node groups (since 1.6) Return a list of all node groups or only those node groups that match the provided filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Descriptions of Node Groups to fetch. (optional)</param>
        /// <param name="id">IDs of Node Groups to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of Node Groups to fetch. (optional)</param>
        /// <param name="modifiedTime">Modified times of Node Groups to fetch. (optional)</param>
        /// <param name="name">Names of Node Groups to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="subDescription">Support for like search for description parameter. (optional)</param>
        /// <param name="trackingId">Tracking ids of Node Groups to fetch. (optional)</param>
        /// <param name="type">Types of Node Groups to fetch. (optional)</param>
        /// <returns>Task of NodeGroup</returns>
        public async System.Threading.Tasks.Task<NodeGroup> GetNodeGroupsAsync (List<string> description = null, List<string> id = null, List<string> importedTime = null, List<string> modifiedTime = null, List<string> name = null, string pageLimit = null, string pageStart = null, List<string> subDescription = null, List<string> trackingId = null, List<string> type = null)
        {
             ApiResponse<NodeGroup> localVarResponse = await GetNodeGroupsAsyncWithHttpInfo(description, id, importedTime, modifiedTime, name, pageLimit, pageStart, subDescription, trackingId, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search all node groups (since 1.6) Return a list of all node groups or only those node groups that match the provided filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Descriptions of Node Groups to fetch. (optional)</param>
        /// <param name="id">IDs of Node Groups to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of Node Groups to fetch. (optional)</param>
        /// <param name="modifiedTime">Modified times of Node Groups to fetch. (optional)</param>
        /// <param name="name">Names of Node Groups to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="subDescription">Support for like search for description parameter. (optional)</param>
        /// <param name="trackingId">Tracking ids of Node Groups to fetch. (optional)</param>
        /// <param name="type">Types of Node Groups to fetch. (optional)</param>
        /// <returns>Task of ApiResponse (NodeGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NodeGroup>> GetNodeGroupsAsyncWithHttpInfo (List<string> description = null, List<string> id = null, List<string> importedTime = null, List<string> modifiedTime = null, List<string> name = null, string pageLimit = null, string pageStart = null, List<string> subDescription = null, List<string> trackingId = null, List<string> type = null)
        {

            var localVarPath = "/nodegroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "description", description)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (importedTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "importedTime", importedTime)); // query parameter
            if (modifiedTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "modifiedTime", modifiedTime)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageLimit", pageLimit)); // query parameter
            if (pageStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageStart", pageStart)); // query parameter
            if (subDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sub_description", subDescription)); // query parameter
            if (trackingId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "trackingId", trackingId)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNodeGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NodeGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeGroup)));
        }

        /// <summary>
        /// Get root node group (since 1.6) Returns the node group resource for the &#39;Root Node Group&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>NodeGroup</returns>
        public NodeGroup GetRootNodeGroup ()
        {
             ApiResponse<NodeGroup> localVarResponse = GetRootNodeGroupWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get root node group (since 1.6) Returns the node group resource for the &#39;Root Node Group&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of NodeGroup</returns>
        public ApiResponse< NodeGroup > GetRootNodeGroupWithHttpInfo ()
        {

            var localVarPath = "/nodegroups/root";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRootNodeGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NodeGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeGroup)));
        }

        /// <summary>
        /// Get root node group (since 1.6) Returns the node group resource for the &#39;Root Node Group&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of NodeGroup</returns>
        public async System.Threading.Tasks.Task<NodeGroup> GetRootNodeGroupAsync ()
        {
             ApiResponse<NodeGroup> localVarResponse = await GetRootNodeGroupAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get root node group (since 1.6) Returns the node group resource for the &#39;Root Node Group&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (NodeGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NodeGroup>> GetRootNodeGroupAsyncWithHttpInfo ()
        {

            var localVarPath = "/nodegroups/root";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRootNodeGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NodeGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeGroup)));
        }

    }
}

/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.13.0.bmaster.r20180119190259-8b60eaa.b1753
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPolicytestsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a policy test (since 1.11)
        /// </summary>
        /// <remarks>
        /// Removes a policy test and any related policy test results.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">ID of policy test to delete</param>
        /// <returns></returns>
        void DeletePolicyTest (string rkPolicyTestId);

        /// <summary>
        /// Delete a policy test (since 1.11)
        /// </summary>
        /// <remarks>
        /// Removes a policy test and any related policy test results.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">ID of policy test to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePolicyTestWithHttpInfo (string rkPolicyTestId);
        /// <summary>
        /// Get excluded nodes of a policy test (since 1.5)
        /// </summary>
        /// <remarks>
        /// Return a list of nodes that are excluded from this policy test by virtue of the node exclusions criteria on the policy test. This includes all descendants of all node groups in the criteria, as well as explicitly indicated nodes, fully expanded to a node list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">rkPolicyTestId to fetch</param>
        /// <returns>string</returns>
        string GetExcludedNodes (string rkPolicyTestId);

        /// <summary>
        /// Get excluded nodes of a policy test (since 1.5)
        /// </summary>
        /// <remarks>
        /// Return a list of nodes that are excluded from this policy test by virtue of the node exclusions criteria on the policy test. This includes all descendants of all node groups in the criteria, as well as explicitly indicated nodes, fully expanded to a node list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">rkPolicyTestId to fetch</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetExcludedNodesWithHttpInfo (string rkPolicyTestId);
        /// <summary>
        /// Get policy test details by ID (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns the details of a single policy test.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">rkPolicyTestId to fetch</param>
        /// <returns>PolicyTest</returns>
        PolicyTest GetPolicyTestById (string rkPolicyTestId);

        /// <summary>
        /// Get policy test details by ID (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns the details of a single policy test.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">rkPolicyTestId to fetch</param>
        /// <returns>ApiResponse of PolicyTest</returns>
        ApiResponse<PolicyTest> GetPolicyTestByIdWithHttpInfo (string rkPolicyTestId);
        /// <summary>
        /// List parent groups for a policy test (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns a list of the parent groups for a policy test with a specific ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">rkPolicyTestId to fetch</param>
        /// <returns>PolicyTestGroupPath</returns>
        PolicyTestGroupPath GetPolicyTestParentGroups (string rkPolicyTestId);

        /// <summary>
        /// List parent groups for a policy test (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns a list of the parent groups for a policy test with a specific ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">rkPolicyTestId to fetch</param>
        /// <returns>ApiResponse of PolicyTestGroupPath</returns>
        ApiResponse<PolicyTestGroupPath> GetPolicyTestParentGroupsWithHttpInfo (string rkPolicyTestId);
        /// <summary>
        /// Get remediation details of a policy test (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns the remediation details of a policy test.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">rkPolicyTestId</param>
        /// <returns>Remediation</returns>
        Remediation GetPolicyTestRemediation (string rkPolicyTestId);

        /// <summary>
        /// Get remediation details of a policy test (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns the remediation details of a policy test.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">rkPolicyTestId</param>
        /// <returns>ApiResponse of Remediation</returns>
        ApiResponse<Remediation> GetPolicyTestRemediationWithHttpInfo (string rkPolicyTestId);
        /// <summary>
        /// Search policy tests (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns a list of all policy tests or those that match the provided filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Descriptions of policy tests to fetch. (optional)</param>
        /// <param name="id">IDs of policy tests to fetch. (optional)</param>
        /// <param name="importedTime">Import times of policy tests to fetch. (optional)</param>
        /// <param name="importedTimeRange">Imported time range of policy tests to fetch (optional)</param>
        /// <param name="modifiedTime">Modification times of policy tests to fetch. (optional)</param>
        /// <param name="name">Names of Policy Tests to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="policyId">IDs of policies associated to policy tests to fetch. (optional)</param>
        /// <param name="rules">IDs of rules associated to version tests to fetch. (optional)</param>
        /// <param name="severity">Severity levels of policy test to fetch. (optional)</param>
        /// <param name="subDescription">Like descriptions of policy Tests to fetch. (optional)</param>
        /// <param name="trackingId">Tracking IDs of policy tests to fetch. (optional)</param>
        /// <param name="type">Types of version tests to fetch. (optional)</param>
        /// <returns>PolicyTest</returns>
        PolicyTest GetPolicyTests (List<string> description = null, List<string> id = null, List<string> importedTime = null, string importedTimeRange = null, List<string> modifiedTime = null, List<string> name = null, string pageLimit = null, string pageStart = null, List<string> policyId = null, List<string> rules = null, List<string> severity = null, List<string> subDescription = null, List<string> trackingId = null, List<string> type = null);

        /// <summary>
        /// Search policy tests (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns a list of all policy tests or those that match the provided filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Descriptions of policy tests to fetch. (optional)</param>
        /// <param name="id">IDs of policy tests to fetch. (optional)</param>
        /// <param name="importedTime">Import times of policy tests to fetch. (optional)</param>
        /// <param name="importedTimeRange">Imported time range of policy tests to fetch (optional)</param>
        /// <param name="modifiedTime">Modification times of policy tests to fetch. (optional)</param>
        /// <param name="name">Names of Policy Tests to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="policyId">IDs of policies associated to policy tests to fetch. (optional)</param>
        /// <param name="rules">IDs of rules associated to version tests to fetch. (optional)</param>
        /// <param name="severity">Severity levels of policy test to fetch. (optional)</param>
        /// <param name="subDescription">Like descriptions of policy Tests to fetch. (optional)</param>
        /// <param name="trackingId">Tracking IDs of policy tests to fetch. (optional)</param>
        /// <param name="type">Types of version tests to fetch. (optional)</param>
        /// <returns>ApiResponse of PolicyTest</returns>
        ApiResponse<PolicyTest> GetPolicyTestsWithHttpInfo (List<string> description = null, List<string> id = null, List<string> importedTime = null, string importedTimeRange = null, List<string> modifiedTime = null, List<string> name = null, string pageLimit = null, string pageStart = null, List<string> policyId = null, List<string> rules = null, List<string> severity = null, List<string> subDescription = null, List<string> trackingId = null, List<string> type = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a policy test (since 1.11)
        /// </summary>
        /// <remarks>
        /// Removes a policy test and any related policy test results.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">ID of policy test to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePolicyTestAsync (string rkPolicyTestId);

        /// <summary>
        /// Delete a policy test (since 1.11)
        /// </summary>
        /// <remarks>
        /// Removes a policy test and any related policy test results.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">ID of policy test to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePolicyTestAsyncWithHttpInfo (string rkPolicyTestId);
        /// <summary>
        /// Get excluded nodes of a policy test (since 1.5)
        /// </summary>
        /// <remarks>
        /// Return a list of nodes that are excluded from this policy test by virtue of the node exclusions criteria on the policy test. This includes all descendants of all node groups in the criteria, as well as explicitly indicated nodes, fully expanded to a node list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">rkPolicyTestId to fetch</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetExcludedNodesAsync (string rkPolicyTestId);

        /// <summary>
        /// Get excluded nodes of a policy test (since 1.5)
        /// </summary>
        /// <remarks>
        /// Return a list of nodes that are excluded from this policy test by virtue of the node exclusions criteria on the policy test. This includes all descendants of all node groups in the criteria, as well as explicitly indicated nodes, fully expanded to a node list.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">rkPolicyTestId to fetch</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetExcludedNodesAsyncWithHttpInfo (string rkPolicyTestId);
        /// <summary>
        /// Get policy test details by ID (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns the details of a single policy test.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">rkPolicyTestId to fetch</param>
        /// <returns>Task of PolicyTest</returns>
        System.Threading.Tasks.Task<PolicyTest> GetPolicyTestByIdAsync (string rkPolicyTestId);

        /// <summary>
        /// Get policy test details by ID (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns the details of a single policy test.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">rkPolicyTestId to fetch</param>
        /// <returns>Task of ApiResponse (PolicyTest)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyTest>> GetPolicyTestByIdAsyncWithHttpInfo (string rkPolicyTestId);
        /// <summary>
        /// List parent groups for a policy test (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns a list of the parent groups for a policy test with a specific ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">rkPolicyTestId to fetch</param>
        /// <returns>Task of PolicyTestGroupPath</returns>
        System.Threading.Tasks.Task<PolicyTestGroupPath> GetPolicyTestParentGroupsAsync (string rkPolicyTestId);

        /// <summary>
        /// List parent groups for a policy test (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns a list of the parent groups for a policy test with a specific ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">rkPolicyTestId to fetch</param>
        /// <returns>Task of ApiResponse (PolicyTestGroupPath)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyTestGroupPath>> GetPolicyTestParentGroupsAsyncWithHttpInfo (string rkPolicyTestId);
        /// <summary>
        /// Get remediation details of a policy test (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns the remediation details of a policy test.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">rkPolicyTestId</param>
        /// <returns>Task of Remediation</returns>
        System.Threading.Tasks.Task<Remediation> GetPolicyTestRemediationAsync (string rkPolicyTestId);

        /// <summary>
        /// Get remediation details of a policy test (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns the remediation details of a policy test.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">rkPolicyTestId</param>
        /// <returns>Task of ApiResponse (Remediation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Remediation>> GetPolicyTestRemediationAsyncWithHttpInfo (string rkPolicyTestId);
        /// <summary>
        /// Search policy tests (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns a list of all policy tests or those that match the provided filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Descriptions of policy tests to fetch. (optional)</param>
        /// <param name="id">IDs of policy tests to fetch. (optional)</param>
        /// <param name="importedTime">Import times of policy tests to fetch. (optional)</param>
        /// <param name="importedTimeRange">Imported time range of policy tests to fetch (optional)</param>
        /// <param name="modifiedTime">Modification times of policy tests to fetch. (optional)</param>
        /// <param name="name">Names of Policy Tests to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="policyId">IDs of policies associated to policy tests to fetch. (optional)</param>
        /// <param name="rules">IDs of rules associated to version tests to fetch. (optional)</param>
        /// <param name="severity">Severity levels of policy test to fetch. (optional)</param>
        /// <param name="subDescription">Like descriptions of policy Tests to fetch. (optional)</param>
        /// <param name="trackingId">Tracking IDs of policy tests to fetch. (optional)</param>
        /// <param name="type">Types of version tests to fetch. (optional)</param>
        /// <returns>Task of PolicyTest</returns>
        System.Threading.Tasks.Task<PolicyTest> GetPolicyTestsAsync (List<string> description = null, List<string> id = null, List<string> importedTime = null, string importedTimeRange = null, List<string> modifiedTime = null, List<string> name = null, string pageLimit = null, string pageStart = null, List<string> policyId = null, List<string> rules = null, List<string> severity = null, List<string> subDescription = null, List<string> trackingId = null, List<string> type = null);

        /// <summary>
        /// Search policy tests (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns a list of all policy tests or those that match the provided filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Descriptions of policy tests to fetch. (optional)</param>
        /// <param name="id">IDs of policy tests to fetch. (optional)</param>
        /// <param name="importedTime">Import times of policy tests to fetch. (optional)</param>
        /// <param name="importedTimeRange">Imported time range of policy tests to fetch (optional)</param>
        /// <param name="modifiedTime">Modification times of policy tests to fetch. (optional)</param>
        /// <param name="name">Names of Policy Tests to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="policyId">IDs of policies associated to policy tests to fetch. (optional)</param>
        /// <param name="rules">IDs of rules associated to version tests to fetch. (optional)</param>
        /// <param name="severity">Severity levels of policy test to fetch. (optional)</param>
        /// <param name="subDescription">Like descriptions of policy Tests to fetch. (optional)</param>
        /// <param name="trackingId">Tracking IDs of policy tests to fetch. (optional)</param>
        /// <param name="type">Types of version tests to fetch. (optional)</param>
        /// <returns>Task of ApiResponse (PolicyTest)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyTest>> GetPolicyTestsAsyncWithHttpInfo (List<string> description = null, List<string> id = null, List<string> importedTime = null, string importedTimeRange = null, List<string> modifiedTime = null, List<string> name = null, string pageLimit = null, string pageStart = null, List<string> policyId = null, List<string> rules = null, List<string> severity = null, List<string> subDescription = null, List<string> trackingId = null, List<string> type = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PolicytestsApi : IPolicytestsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PolicytestsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PolicytestsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PolicytestsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PolicytestsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a policy test (since 1.11) Removes a policy test and any related policy test results.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">ID of policy test to delete</param>
        /// <returns></returns>
        public void DeletePolicyTest (string rkPolicyTestId)
        {
             DeletePolicyTestWithHttpInfo(rkPolicyTestId);
        }

        /// <summary>
        /// Delete a policy test (since 1.11) Removes a policy test and any related policy test results.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">ID of policy test to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePolicyTestWithHttpInfo (string rkPolicyTestId)
        {
            // verify the required parameter 'rkPolicyTestId' is set
            if (rkPolicyTestId == null)
                throw new ApiException(400, "Missing required parameter 'rkPolicyTestId' when calling PolicytestsApi->DeletePolicyTest");

            var localVarPath = "/policytests/{rkPolicyTestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkPolicyTestId != null) localVarPathParams.Add("rkPolicyTestId", this.Configuration.ApiClient.ParameterToString(rkPolicyTestId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePolicyTest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a policy test (since 1.11) Removes a policy test and any related policy test results.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">ID of policy test to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePolicyTestAsync (string rkPolicyTestId)
        {
             await DeletePolicyTestAsyncWithHttpInfo(rkPolicyTestId);

        }

        /// <summary>
        /// Delete a policy test (since 1.11) Removes a policy test and any related policy test results.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">ID of policy test to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePolicyTestAsyncWithHttpInfo (string rkPolicyTestId)
        {
            // verify the required parameter 'rkPolicyTestId' is set
            if (rkPolicyTestId == null)
                throw new ApiException(400, "Missing required parameter 'rkPolicyTestId' when calling PolicytestsApi->DeletePolicyTest");

            var localVarPath = "/policytests/{rkPolicyTestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkPolicyTestId != null) localVarPathParams.Add("rkPolicyTestId", this.Configuration.ApiClient.ParameterToString(rkPolicyTestId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePolicyTest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get excluded nodes of a policy test (since 1.5) Return a list of nodes that are excluded from this policy test by virtue of the node exclusions criteria on the policy test. This includes all descendants of all node groups in the criteria, as well as explicitly indicated nodes, fully expanded to a node list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">rkPolicyTestId to fetch</param>
        /// <returns>string</returns>
        public string GetExcludedNodes (string rkPolicyTestId)
        {
             ApiResponse<string> localVarResponse = GetExcludedNodesWithHttpInfo(rkPolicyTestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get excluded nodes of a policy test (since 1.5) Return a list of nodes that are excluded from this policy test by virtue of the node exclusions criteria on the policy test. This includes all descendants of all node groups in the criteria, as well as explicitly indicated nodes, fully expanded to a node list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">rkPolicyTestId to fetch</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetExcludedNodesWithHttpInfo (string rkPolicyTestId)
        {
            // verify the required parameter 'rkPolicyTestId' is set
            if (rkPolicyTestId == null)
                throw new ApiException(400, "Missing required parameter 'rkPolicyTestId' when calling PolicytestsApi->GetExcludedNodes");

            var localVarPath = "/policytests/{rkPolicyTestId}/excludedNodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkPolicyTestId != null) localVarPathParams.Add("rkPolicyTestId", this.Configuration.ApiClient.ParameterToString(rkPolicyTestId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExcludedNodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get excluded nodes of a policy test (since 1.5) Return a list of nodes that are excluded from this policy test by virtue of the node exclusions criteria on the policy test. This includes all descendants of all node groups in the criteria, as well as explicitly indicated nodes, fully expanded to a node list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">rkPolicyTestId to fetch</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetExcludedNodesAsync (string rkPolicyTestId)
        {
             ApiResponse<string> localVarResponse = await GetExcludedNodesAsyncWithHttpInfo(rkPolicyTestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get excluded nodes of a policy test (since 1.5) Return a list of nodes that are excluded from this policy test by virtue of the node exclusions criteria on the policy test. This includes all descendants of all node groups in the criteria, as well as explicitly indicated nodes, fully expanded to a node list.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">rkPolicyTestId to fetch</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetExcludedNodesAsyncWithHttpInfo (string rkPolicyTestId)
        {
            // verify the required parameter 'rkPolicyTestId' is set
            if (rkPolicyTestId == null)
                throw new ApiException(400, "Missing required parameter 'rkPolicyTestId' when calling PolicytestsApi->GetExcludedNodes");

            var localVarPath = "/policytests/{rkPolicyTestId}/excludedNodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkPolicyTestId != null) localVarPathParams.Add("rkPolicyTestId", this.Configuration.ApiClient.ParameterToString(rkPolicyTestId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExcludedNodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get policy test details by ID (since 1.5) Returns the details of a single policy test.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">rkPolicyTestId to fetch</param>
        /// <returns>PolicyTest</returns>
        public PolicyTest GetPolicyTestById (string rkPolicyTestId)
        {
             ApiResponse<PolicyTest> localVarResponse = GetPolicyTestByIdWithHttpInfo(rkPolicyTestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get policy test details by ID (since 1.5) Returns the details of a single policy test.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">rkPolicyTestId to fetch</param>
        /// <returns>ApiResponse of PolicyTest</returns>
        public ApiResponse< PolicyTest > GetPolicyTestByIdWithHttpInfo (string rkPolicyTestId)
        {
            // verify the required parameter 'rkPolicyTestId' is set
            if (rkPolicyTestId == null)
                throw new ApiException(400, "Missing required parameter 'rkPolicyTestId' when calling PolicytestsApi->GetPolicyTestById");

            var localVarPath = "/policytests/{rkPolicyTestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkPolicyTestId != null) localVarPathParams.Add("rkPolicyTestId", this.Configuration.ApiClient.ParameterToString(rkPolicyTestId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPolicyTestById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyTest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolicyTest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyTest)));
        }

        /// <summary>
        /// Get policy test details by ID (since 1.5) Returns the details of a single policy test.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">rkPolicyTestId to fetch</param>
        /// <returns>Task of PolicyTest</returns>
        public async System.Threading.Tasks.Task<PolicyTest> GetPolicyTestByIdAsync (string rkPolicyTestId)
        {
             ApiResponse<PolicyTest> localVarResponse = await GetPolicyTestByIdAsyncWithHttpInfo(rkPolicyTestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get policy test details by ID (since 1.5) Returns the details of a single policy test.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">rkPolicyTestId to fetch</param>
        /// <returns>Task of ApiResponse (PolicyTest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PolicyTest>> GetPolicyTestByIdAsyncWithHttpInfo (string rkPolicyTestId)
        {
            // verify the required parameter 'rkPolicyTestId' is set
            if (rkPolicyTestId == null)
                throw new ApiException(400, "Missing required parameter 'rkPolicyTestId' when calling PolicytestsApi->GetPolicyTestById");

            var localVarPath = "/policytests/{rkPolicyTestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkPolicyTestId != null) localVarPathParams.Add("rkPolicyTestId", this.Configuration.ApiClient.ParameterToString(rkPolicyTestId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPolicyTestById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyTest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolicyTest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyTest)));
        }

        /// <summary>
        /// List parent groups for a policy test (since 1.5) Returns a list of the parent groups for a policy test with a specific ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">rkPolicyTestId to fetch</param>
        /// <returns>PolicyTestGroupPath</returns>
        public PolicyTestGroupPath GetPolicyTestParentGroups (string rkPolicyTestId)
        {
             ApiResponse<PolicyTestGroupPath> localVarResponse = GetPolicyTestParentGroupsWithHttpInfo(rkPolicyTestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List parent groups for a policy test (since 1.5) Returns a list of the parent groups for a policy test with a specific ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">rkPolicyTestId to fetch</param>
        /// <returns>ApiResponse of PolicyTestGroupPath</returns>
        public ApiResponse< PolicyTestGroupPath > GetPolicyTestParentGroupsWithHttpInfo (string rkPolicyTestId)
        {
            // verify the required parameter 'rkPolicyTestId' is set
            if (rkPolicyTestId == null)
                throw new ApiException(400, "Missing required parameter 'rkPolicyTestId' when calling PolicytestsApi->GetPolicyTestParentGroups");

            var localVarPath = "/policytests/{rkPolicyTestId}/parentGroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkPolicyTestId != null) localVarPathParams.Add("rkPolicyTestId", this.Configuration.ApiClient.ParameterToString(rkPolicyTestId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPolicyTestParentGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyTestGroupPath>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolicyTestGroupPath) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyTestGroupPath)));
        }

        /// <summary>
        /// List parent groups for a policy test (since 1.5) Returns a list of the parent groups for a policy test with a specific ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">rkPolicyTestId to fetch</param>
        /// <returns>Task of PolicyTestGroupPath</returns>
        public async System.Threading.Tasks.Task<PolicyTestGroupPath> GetPolicyTestParentGroupsAsync (string rkPolicyTestId)
        {
             ApiResponse<PolicyTestGroupPath> localVarResponse = await GetPolicyTestParentGroupsAsyncWithHttpInfo(rkPolicyTestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List parent groups for a policy test (since 1.5) Returns a list of the parent groups for a policy test with a specific ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">rkPolicyTestId to fetch</param>
        /// <returns>Task of ApiResponse (PolicyTestGroupPath)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PolicyTestGroupPath>> GetPolicyTestParentGroupsAsyncWithHttpInfo (string rkPolicyTestId)
        {
            // verify the required parameter 'rkPolicyTestId' is set
            if (rkPolicyTestId == null)
                throw new ApiException(400, "Missing required parameter 'rkPolicyTestId' when calling PolicytestsApi->GetPolicyTestParentGroups");

            var localVarPath = "/policytests/{rkPolicyTestId}/parentGroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkPolicyTestId != null) localVarPathParams.Add("rkPolicyTestId", this.Configuration.ApiClient.ParameterToString(rkPolicyTestId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPolicyTestParentGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyTestGroupPath>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolicyTestGroupPath) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyTestGroupPath)));
        }

        /// <summary>
        /// Get remediation details of a policy test (since 1.5) Returns the remediation details of a policy test.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">rkPolicyTestId</param>
        /// <returns>Remediation</returns>
        public Remediation GetPolicyTestRemediation (string rkPolicyTestId)
        {
             ApiResponse<Remediation> localVarResponse = GetPolicyTestRemediationWithHttpInfo(rkPolicyTestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get remediation details of a policy test (since 1.5) Returns the remediation details of a policy test.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">rkPolicyTestId</param>
        /// <returns>ApiResponse of Remediation</returns>
        public ApiResponse< Remediation > GetPolicyTestRemediationWithHttpInfo (string rkPolicyTestId)
        {
            // verify the required parameter 'rkPolicyTestId' is set
            if (rkPolicyTestId == null)
                throw new ApiException(400, "Missing required parameter 'rkPolicyTestId' when calling PolicytestsApi->GetPolicyTestRemediation");

            var localVarPath = "/policytests/{rkPolicyTestId}/remediation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkPolicyTestId != null) localVarPathParams.Add("rkPolicyTestId", this.Configuration.ApiClient.ParameterToString(rkPolicyTestId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPolicyTestRemediation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Remediation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Remediation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Remediation)));
        }

        /// <summary>
        /// Get remediation details of a policy test (since 1.5) Returns the remediation details of a policy test.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">rkPolicyTestId</param>
        /// <returns>Task of Remediation</returns>
        public async System.Threading.Tasks.Task<Remediation> GetPolicyTestRemediationAsync (string rkPolicyTestId)
        {
             ApiResponse<Remediation> localVarResponse = await GetPolicyTestRemediationAsyncWithHttpInfo(rkPolicyTestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get remediation details of a policy test (since 1.5) Returns the remediation details of a policy test.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestId">rkPolicyTestId</param>
        /// <returns>Task of ApiResponse (Remediation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Remediation>> GetPolicyTestRemediationAsyncWithHttpInfo (string rkPolicyTestId)
        {
            // verify the required parameter 'rkPolicyTestId' is set
            if (rkPolicyTestId == null)
                throw new ApiException(400, "Missing required parameter 'rkPolicyTestId' when calling PolicytestsApi->GetPolicyTestRemediation");

            var localVarPath = "/policytests/{rkPolicyTestId}/remediation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkPolicyTestId != null) localVarPathParams.Add("rkPolicyTestId", this.Configuration.ApiClient.ParameterToString(rkPolicyTestId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPolicyTestRemediation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Remediation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Remediation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Remediation)));
        }

        /// <summary>
        /// Search policy tests (since 1.5) Returns a list of all policy tests or those that match the provided filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Descriptions of policy tests to fetch. (optional)</param>
        /// <param name="id">IDs of policy tests to fetch. (optional)</param>
        /// <param name="importedTime">Import times of policy tests to fetch. (optional)</param>
        /// <param name="importedTimeRange">Imported time range of policy tests to fetch (optional)</param>
        /// <param name="modifiedTime">Modification times of policy tests to fetch. (optional)</param>
        /// <param name="name">Names of Policy Tests to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="policyId">IDs of policies associated to policy tests to fetch. (optional)</param>
        /// <param name="rules">IDs of rules associated to version tests to fetch. (optional)</param>
        /// <param name="severity">Severity levels of policy test to fetch. (optional)</param>
        /// <param name="subDescription">Like descriptions of policy Tests to fetch. (optional)</param>
        /// <param name="trackingId">Tracking IDs of policy tests to fetch. (optional)</param>
        /// <param name="type">Types of version tests to fetch. (optional)</param>
        /// <returns>PolicyTest</returns>
        public PolicyTest GetPolicyTests (List<string> description = null, List<string> id = null, List<string> importedTime = null, string importedTimeRange = null, List<string> modifiedTime = null, List<string> name = null, string pageLimit = null, string pageStart = null, List<string> policyId = null, List<string> rules = null, List<string> severity = null, List<string> subDescription = null, List<string> trackingId = null, List<string> type = null)
        {
             ApiResponse<PolicyTest> localVarResponse = GetPolicyTestsWithHttpInfo(description, id, importedTime, importedTimeRange, modifiedTime, name, pageLimit, pageStart, policyId, rules, severity, subDescription, trackingId, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search policy tests (since 1.5) Returns a list of all policy tests or those that match the provided filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Descriptions of policy tests to fetch. (optional)</param>
        /// <param name="id">IDs of policy tests to fetch. (optional)</param>
        /// <param name="importedTime">Import times of policy tests to fetch. (optional)</param>
        /// <param name="importedTimeRange">Imported time range of policy tests to fetch (optional)</param>
        /// <param name="modifiedTime">Modification times of policy tests to fetch. (optional)</param>
        /// <param name="name">Names of Policy Tests to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="policyId">IDs of policies associated to policy tests to fetch. (optional)</param>
        /// <param name="rules">IDs of rules associated to version tests to fetch. (optional)</param>
        /// <param name="severity">Severity levels of policy test to fetch. (optional)</param>
        /// <param name="subDescription">Like descriptions of policy Tests to fetch. (optional)</param>
        /// <param name="trackingId">Tracking IDs of policy tests to fetch. (optional)</param>
        /// <param name="type">Types of version tests to fetch. (optional)</param>
        /// <returns>ApiResponse of PolicyTest</returns>
        public ApiResponse< PolicyTest > GetPolicyTestsWithHttpInfo (List<string> description = null, List<string> id = null, List<string> importedTime = null, string importedTimeRange = null, List<string> modifiedTime = null, List<string> name = null, string pageLimit = null, string pageStart = null, List<string> policyId = null, List<string> rules = null, List<string> severity = null, List<string> subDescription = null, List<string> trackingId = null, List<string> type = null)
        {

            var localVarPath = "/policytests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "description", description)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (importedTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "importedTime", importedTime)); // query parameter
            if (importedTimeRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "importedTimeRange", importedTimeRange)); // query parameter
            if (modifiedTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "modifiedTime", modifiedTime)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageLimit", pageLimit)); // query parameter
            if (pageStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageStart", pageStart)); // query parameter
            if (policyId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "policyId", policyId)); // query parameter
            if (rules != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "rules", rules)); // query parameter
            if (severity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "severity", severity)); // query parameter
            if (subDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sub_description", subDescription)); // query parameter
            if (trackingId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "trackingId", trackingId)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPolicyTests", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyTest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolicyTest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyTest)));
        }

        /// <summary>
        /// Search policy tests (since 1.5) Returns a list of all policy tests or those that match the provided filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Descriptions of policy tests to fetch. (optional)</param>
        /// <param name="id">IDs of policy tests to fetch. (optional)</param>
        /// <param name="importedTime">Import times of policy tests to fetch. (optional)</param>
        /// <param name="importedTimeRange">Imported time range of policy tests to fetch (optional)</param>
        /// <param name="modifiedTime">Modification times of policy tests to fetch. (optional)</param>
        /// <param name="name">Names of Policy Tests to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="policyId">IDs of policies associated to policy tests to fetch. (optional)</param>
        /// <param name="rules">IDs of rules associated to version tests to fetch. (optional)</param>
        /// <param name="severity">Severity levels of policy test to fetch. (optional)</param>
        /// <param name="subDescription">Like descriptions of policy Tests to fetch. (optional)</param>
        /// <param name="trackingId">Tracking IDs of policy tests to fetch. (optional)</param>
        /// <param name="type">Types of version tests to fetch. (optional)</param>
        /// <returns>Task of PolicyTest</returns>
        public async System.Threading.Tasks.Task<PolicyTest> GetPolicyTestsAsync (List<string> description = null, List<string> id = null, List<string> importedTime = null, string importedTimeRange = null, List<string> modifiedTime = null, List<string> name = null, string pageLimit = null, string pageStart = null, List<string> policyId = null, List<string> rules = null, List<string> severity = null, List<string> subDescription = null, List<string> trackingId = null, List<string> type = null)
        {
             ApiResponse<PolicyTest> localVarResponse = await GetPolicyTestsAsyncWithHttpInfo(description, id, importedTime, importedTimeRange, modifiedTime, name, pageLimit, pageStart, policyId, rules, severity, subDescription, trackingId, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search policy tests (since 1.5) Returns a list of all policy tests or those that match the provided filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Descriptions of policy tests to fetch. (optional)</param>
        /// <param name="id">IDs of policy tests to fetch. (optional)</param>
        /// <param name="importedTime">Import times of policy tests to fetch. (optional)</param>
        /// <param name="importedTimeRange">Imported time range of policy tests to fetch (optional)</param>
        /// <param name="modifiedTime">Modification times of policy tests to fetch. (optional)</param>
        /// <param name="name">Names of Policy Tests to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="policyId">IDs of policies associated to policy tests to fetch. (optional)</param>
        /// <param name="rules">IDs of rules associated to version tests to fetch. (optional)</param>
        /// <param name="severity">Severity levels of policy test to fetch. (optional)</param>
        /// <param name="subDescription">Like descriptions of policy Tests to fetch. (optional)</param>
        /// <param name="trackingId">Tracking IDs of policy tests to fetch. (optional)</param>
        /// <param name="type">Types of version tests to fetch. (optional)</param>
        /// <returns>Task of ApiResponse (PolicyTest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PolicyTest>> GetPolicyTestsAsyncWithHttpInfo (List<string> description = null, List<string> id = null, List<string> importedTime = null, string importedTimeRange = null, List<string> modifiedTime = null, List<string> name = null, string pageLimit = null, string pageStart = null, List<string> policyId = null, List<string> rules = null, List<string> severity = null, List<string> subDescription = null, List<string> trackingId = null, List<string> type = null)
        {

            var localVarPath = "/policytests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "description", description)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (importedTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "importedTime", importedTime)); // query parameter
            if (importedTimeRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "importedTimeRange", importedTimeRange)); // query parameter
            if (modifiedTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "modifiedTime", modifiedTime)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageLimit", pageLimit)); // query parameter
            if (pageStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageStart", pageStart)); // query parameter
            if (policyId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "policyId", policyId)); // query parameter
            if (rules != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "rules", rules)); // query parameter
            if (severity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "severity", severity)); // query parameter
            if (subDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sub_description", subDescription)); // query parameter
            if (trackingId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "trackingId", trackingId)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPolicyTests", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyTest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolicyTest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyTest)));
        }

    }
}

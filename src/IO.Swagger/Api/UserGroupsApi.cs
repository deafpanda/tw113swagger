/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.13.0.bmaster.r20180119190259-8b60eaa.b1753
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserGroupsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a user to a user group (since 1.1)
        /// </summary>
        /// <remarks>
        /// Adds a user to the user group. Users may belong to multiple user groups.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId</param>
        /// <param name="rkUserId">rkUserId</param>
        /// <returns></returns>
        void AssociateUserToGroup (string rkUserGroupId, string rkUserId);

        /// <summary>
        /// Add a user to a user group (since 1.1)
        /// </summary>
        /// <remarks>
        /// Adds a user to the user group. Users may belong to multiple user groups.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId</param>
        /// <param name="rkUserId">rkUserId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssociateUserToGroupWithHttpInfo (string rkUserGroupId, string rkUserId);
        /// <summary>
        /// Post a new user group (since 1.1)
        /// </summary>
        /// <remarks>
        /// Creates a new user group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User group request</param>
        /// <returns>UserGroup</returns>
        UserGroup Create (UserGroup body);

        /// <summary>
        /// Post a new user group (since 1.1)
        /// </summary>
        /// <remarks>
        /// Creates a new user group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User group request</param>
        /// <returns>ApiResponse of UserGroup</returns>
        ApiResponse<UserGroup> CreateWithHttpInfo (UserGroup body);
        /// <summary>
        /// Delete a user group (since 1.1)
        /// </summary>
        /// <remarks>
        /// Removes an existing user group from the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId to fetch</param>
        /// <returns></returns>
        void Delete (string rkUserGroupId);

        /// <summary>
        /// Delete a user group (since 1.1)
        /// </summary>
        /// <remarks>
        /// Removes an existing user group from the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId to fetch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo (string rkUserGroupId);
        /// <summary>
        /// Remove a user from a user group (since 1.1)
        /// </summary>
        /// <remarks>
        /// Removes a user from a specified user group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId</param>
        /// <param name="rkUserId">rkUserId</param>
        /// <returns></returns>
        void DisassociateUserFromGroup (string rkUserGroupId, string rkUserId);

        /// <summary>
        /// Remove a user from a user group (since 1.1)
        /// </summary>
        /// <remarks>
        /// Removes a user from a specified user group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId</param>
        /// <param name="rkUserId">rkUserId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DisassociateUserFromGroupWithHttpInfo (string rkUserGroupId, string rkUserId);
        /// <summary>
        /// Search User Groups (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns a list of all user groups or those that match the provided filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="builtin">User group builtin filter. (optional)</param>
        /// <param name="description">Descriptions of groups to fetch. (optional)</param>
        /// <param name="id">IDs of groups to fetch. (optional)</param>
        /// <param name="name">Names of groups to fetch. (optional)</param>
        /// <param name="subDescription">Sub-descriptions of groups to fetch. (optional)</param>
        /// <returns>UserGroup</returns>
        UserGroup GetAll (bool? builtin = null, List<string> description = null, List<string> id = null, List<string> name = null, List<string> subDescription = null);

        /// <summary>
        /// Search User Groups (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns a list of all user groups or those that match the provided filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="builtin">User group builtin filter. (optional)</param>
        /// <param name="description">Descriptions of groups to fetch. (optional)</param>
        /// <param name="id">IDs of groups to fetch. (optional)</param>
        /// <param name="name">Names of groups to fetch. (optional)</param>
        /// <param name="subDescription">Sub-descriptions of groups to fetch. (optional)</param>
        /// <returns>ApiResponse of UserGroup</returns>
        ApiResponse<UserGroup> GetAllWithHttpInfo (bool? builtin = null, List<string> description = null, List<string> id = null, List<string> name = null, List<string> subDescription = null);
        /// <summary>
        /// Get User Group details by ID (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns the details of a single user group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId to fetch</param>
        /// <returns>UserGroup</returns>
        UserGroup GetUserGroupById (string rkUserGroupId);

        /// <summary>
        /// Get User Group details by ID (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns the details of a single user group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId to fetch</param>
        /// <returns>ApiResponse of UserGroup</returns>
        ApiResponse<UserGroup> GetUserGroupByIdWithHttpInfo (string rkUserGroupId);
        /// <summary>
        /// List users of a user group (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns a list of the users that belong to the specified user group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId to fetch</param>
        /// <returns>User</returns>
        User GetUserGroupUsers (string rkUserGroupId);

        /// <summary>
        /// List users of a user group (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns a list of the users that belong to the specified user group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId to fetch</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetUserGroupUsersWithHttpInfo (string rkUserGroupId);
        /// <summary>
        /// Update an existing user group (since 1.1)
        /// </summary>
        /// <remarks>
        /// Replaces the values of the submitted fields in an existing user group. Read-only fields should not be submitted.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId to fetch</param>
        /// <param name="body">User group request</param>
        /// <returns>UserGroup</returns>
        UserGroup Update (string rkUserGroupId, UserGroup body);

        /// <summary>
        /// Update an existing user group (since 1.1)
        /// </summary>
        /// <remarks>
        /// Replaces the values of the submitted fields in an existing user group. Read-only fields should not be submitted.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId to fetch</param>
        /// <param name="body">User group request</param>
        /// <returns>ApiResponse of UserGroup</returns>
        ApiResponse<UserGroup> UpdateWithHttpInfo (string rkUserGroupId, UserGroup body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add a user to a user group (since 1.1)
        /// </summary>
        /// <remarks>
        /// Adds a user to the user group. Users may belong to multiple user groups.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId</param>
        /// <param name="rkUserId">rkUserId</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssociateUserToGroupAsync (string rkUserGroupId, string rkUserId);

        /// <summary>
        /// Add a user to a user group (since 1.1)
        /// </summary>
        /// <remarks>
        /// Adds a user to the user group. Users may belong to multiple user groups.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId</param>
        /// <param name="rkUserId">rkUserId</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssociateUserToGroupAsyncWithHttpInfo (string rkUserGroupId, string rkUserId);
        /// <summary>
        /// Post a new user group (since 1.1)
        /// </summary>
        /// <remarks>
        /// Creates a new user group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User group request</param>
        /// <returns>Task of UserGroup</returns>
        System.Threading.Tasks.Task<UserGroup> CreateAsync (UserGroup body);

        /// <summary>
        /// Post a new user group (since 1.1)
        /// </summary>
        /// <remarks>
        /// Creates a new user group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User group request</param>
        /// <returns>Task of ApiResponse (UserGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserGroup>> CreateAsyncWithHttpInfo (UserGroup body);
        /// <summary>
        /// Delete a user group (since 1.1)
        /// </summary>
        /// <remarks>
        /// Removes an existing user group from the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId to fetch</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAsync (string rkUserGroupId);

        /// <summary>
        /// Delete a user group (since 1.1)
        /// </summary>
        /// <remarks>
        /// Removes an existing user group from the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId to fetch</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAsyncWithHttpInfo (string rkUserGroupId);
        /// <summary>
        /// Remove a user from a user group (since 1.1)
        /// </summary>
        /// <remarks>
        /// Removes a user from a specified user group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId</param>
        /// <param name="rkUserId">rkUserId</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DisassociateUserFromGroupAsync (string rkUserGroupId, string rkUserId);

        /// <summary>
        /// Remove a user from a user group (since 1.1)
        /// </summary>
        /// <remarks>
        /// Removes a user from a specified user group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId</param>
        /// <param name="rkUserId">rkUserId</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DisassociateUserFromGroupAsyncWithHttpInfo (string rkUserGroupId, string rkUserId);
        /// <summary>
        /// Search User Groups (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns a list of all user groups or those that match the provided filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="builtin">User group builtin filter. (optional)</param>
        /// <param name="description">Descriptions of groups to fetch. (optional)</param>
        /// <param name="id">IDs of groups to fetch. (optional)</param>
        /// <param name="name">Names of groups to fetch. (optional)</param>
        /// <param name="subDescription">Sub-descriptions of groups to fetch. (optional)</param>
        /// <returns>Task of UserGroup</returns>
        System.Threading.Tasks.Task<UserGroup> GetAllAsync (bool? builtin = null, List<string> description = null, List<string> id = null, List<string> name = null, List<string> subDescription = null);

        /// <summary>
        /// Search User Groups (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns a list of all user groups or those that match the provided filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="builtin">User group builtin filter. (optional)</param>
        /// <param name="description">Descriptions of groups to fetch. (optional)</param>
        /// <param name="id">IDs of groups to fetch. (optional)</param>
        /// <param name="name">Names of groups to fetch. (optional)</param>
        /// <param name="subDescription">Sub-descriptions of groups to fetch. (optional)</param>
        /// <returns>Task of ApiResponse (UserGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserGroup>> GetAllAsyncWithHttpInfo (bool? builtin = null, List<string> description = null, List<string> id = null, List<string> name = null, List<string> subDescription = null);
        /// <summary>
        /// Get User Group details by ID (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns the details of a single user group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId to fetch</param>
        /// <returns>Task of UserGroup</returns>
        System.Threading.Tasks.Task<UserGroup> GetUserGroupByIdAsync (string rkUserGroupId);

        /// <summary>
        /// Get User Group details by ID (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns the details of a single user group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId to fetch</param>
        /// <returns>Task of ApiResponse (UserGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserGroup>> GetUserGroupByIdAsyncWithHttpInfo (string rkUserGroupId);
        /// <summary>
        /// List users of a user group (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns a list of the users that belong to the specified user group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId to fetch</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetUserGroupUsersAsync (string rkUserGroupId);

        /// <summary>
        /// List users of a user group (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns a list of the users that belong to the specified user group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId to fetch</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetUserGroupUsersAsyncWithHttpInfo (string rkUserGroupId);
        /// <summary>
        /// Update an existing user group (since 1.1)
        /// </summary>
        /// <remarks>
        /// Replaces the values of the submitted fields in an existing user group. Read-only fields should not be submitted.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId to fetch</param>
        /// <param name="body">User group request</param>
        /// <returns>Task of UserGroup</returns>
        System.Threading.Tasks.Task<UserGroup> UpdateAsync (string rkUserGroupId, UserGroup body);

        /// <summary>
        /// Update an existing user group (since 1.1)
        /// </summary>
        /// <remarks>
        /// Replaces the values of the submitted fields in an existing user group. Read-only fields should not be submitted.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId to fetch</param>
        /// <param name="body">User group request</param>
        /// <returns>Task of ApiResponse (UserGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserGroup>> UpdateAsyncWithHttpInfo (string rkUserGroupId, UserGroup body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserGroupsApi : IUserGroupsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserGroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserGroupsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserGroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserGroupsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add a user to a user group (since 1.1) Adds a user to the user group. Users may belong to multiple user groups.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId</param>
        /// <param name="rkUserId">rkUserId</param>
        /// <returns></returns>
        public void AssociateUserToGroup (string rkUserGroupId, string rkUserId)
        {
             AssociateUserToGroupWithHttpInfo(rkUserGroupId, rkUserId);
        }

        /// <summary>
        /// Add a user to a user group (since 1.1) Adds a user to the user group. Users may belong to multiple user groups.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId</param>
        /// <param name="rkUserId">rkUserId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssociateUserToGroupWithHttpInfo (string rkUserGroupId, string rkUserId)
        {
            // verify the required parameter 'rkUserGroupId' is set
            if (rkUserGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserGroupId' when calling UserGroupsApi->AssociateUserToGroup");
            // verify the required parameter 'rkUserId' is set
            if (rkUserId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserId' when calling UserGroupsApi->AssociateUserToGroup");

            var localVarPath = "/user-groups/{rkUserGroupId}/users/{rkUserId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserGroupId != null) localVarPathParams.Add("rkUserGroupId", this.Configuration.ApiClient.ParameterToString(rkUserGroupId)); // path parameter
            if (rkUserId != null) localVarPathParams.Add("rkUserId", this.Configuration.ApiClient.ParameterToString(rkUserId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociateUserToGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add a user to a user group (since 1.1) Adds a user to the user group. Users may belong to multiple user groups.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId</param>
        /// <param name="rkUserId">rkUserId</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssociateUserToGroupAsync (string rkUserGroupId, string rkUserId)
        {
             await AssociateUserToGroupAsyncWithHttpInfo(rkUserGroupId, rkUserId);

        }

        /// <summary>
        /// Add a user to a user group (since 1.1) Adds a user to the user group. Users may belong to multiple user groups.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId</param>
        /// <param name="rkUserId">rkUserId</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssociateUserToGroupAsyncWithHttpInfo (string rkUserGroupId, string rkUserId)
        {
            // verify the required parameter 'rkUserGroupId' is set
            if (rkUserGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserGroupId' when calling UserGroupsApi->AssociateUserToGroup");
            // verify the required parameter 'rkUserId' is set
            if (rkUserId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserId' when calling UserGroupsApi->AssociateUserToGroup");

            var localVarPath = "/user-groups/{rkUserGroupId}/users/{rkUserId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserGroupId != null) localVarPathParams.Add("rkUserGroupId", this.Configuration.ApiClient.ParameterToString(rkUserGroupId)); // path parameter
            if (rkUserId != null) localVarPathParams.Add("rkUserId", this.Configuration.ApiClient.ParameterToString(rkUserId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociateUserToGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Post a new user group (since 1.1) Creates a new user group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User group request</param>
        /// <returns>UserGroup</returns>
        public UserGroup Create (UserGroup body)
        {
             ApiResponse<UserGroup> localVarResponse = CreateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post a new user group (since 1.1) Creates a new user group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User group request</param>
        /// <returns>ApiResponse of UserGroup</returns>
        public ApiResponse< UserGroup > CreateWithHttpInfo (UserGroup body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UserGroupsApi->Create");

            var localVarPath = "/user-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserGroup)));
        }

        /// <summary>
        /// Post a new user group (since 1.1) Creates a new user group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User group request</param>
        /// <returns>Task of UserGroup</returns>
        public async System.Threading.Tasks.Task<UserGroup> CreateAsync (UserGroup body)
        {
             ApiResponse<UserGroup> localVarResponse = await CreateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post a new user group (since 1.1) Creates a new user group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User group request</param>
        /// <returns>Task of ApiResponse (UserGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserGroup>> CreateAsyncWithHttpInfo (UserGroup body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UserGroupsApi->Create");

            var localVarPath = "/user-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserGroup)));
        }

        /// <summary>
        /// Delete a user group (since 1.1) Removes an existing user group from the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId to fetch</param>
        /// <returns></returns>
        public void Delete (string rkUserGroupId)
        {
             DeleteWithHttpInfo(rkUserGroupId);
        }

        /// <summary>
        /// Delete a user group (since 1.1) Removes an existing user group from the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId to fetch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWithHttpInfo (string rkUserGroupId)
        {
            // verify the required parameter 'rkUserGroupId' is set
            if (rkUserGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserGroupId' when calling UserGroupsApi->Delete");

            var localVarPath = "/user-groups/{rkUserGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserGroupId != null) localVarPathParams.Add("rkUserGroupId", this.Configuration.ApiClient.ParameterToString(rkUserGroupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a user group (since 1.1) Removes an existing user group from the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId to fetch</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAsync (string rkUserGroupId)
        {
             await DeleteAsyncWithHttpInfo(rkUserGroupId);

        }

        /// <summary>
        /// Delete a user group (since 1.1) Removes an existing user group from the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId to fetch</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAsyncWithHttpInfo (string rkUserGroupId)
        {
            // verify the required parameter 'rkUserGroupId' is set
            if (rkUserGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserGroupId' when calling UserGroupsApi->Delete");

            var localVarPath = "/user-groups/{rkUserGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserGroupId != null) localVarPathParams.Add("rkUserGroupId", this.Configuration.ApiClient.ParameterToString(rkUserGroupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove a user from a user group (since 1.1) Removes a user from a specified user group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId</param>
        /// <param name="rkUserId">rkUserId</param>
        /// <returns></returns>
        public void DisassociateUserFromGroup (string rkUserGroupId, string rkUserId)
        {
             DisassociateUserFromGroupWithHttpInfo(rkUserGroupId, rkUserId);
        }

        /// <summary>
        /// Remove a user from a user group (since 1.1) Removes a user from a specified user group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId</param>
        /// <param name="rkUserId">rkUserId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DisassociateUserFromGroupWithHttpInfo (string rkUserGroupId, string rkUserId)
        {
            // verify the required parameter 'rkUserGroupId' is set
            if (rkUserGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserGroupId' when calling UserGroupsApi->DisassociateUserFromGroup");
            // verify the required parameter 'rkUserId' is set
            if (rkUserId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserId' when calling UserGroupsApi->DisassociateUserFromGroup");

            var localVarPath = "/user-groups/{rkUserGroupId}/users/{rkUserId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserGroupId != null) localVarPathParams.Add("rkUserGroupId", this.Configuration.ApiClient.ParameterToString(rkUserGroupId)); // path parameter
            if (rkUserId != null) localVarPathParams.Add("rkUserId", this.Configuration.ApiClient.ParameterToString(rkUserId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisassociateUserFromGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove a user from a user group (since 1.1) Removes a user from a specified user group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId</param>
        /// <param name="rkUserId">rkUserId</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DisassociateUserFromGroupAsync (string rkUserGroupId, string rkUserId)
        {
             await DisassociateUserFromGroupAsyncWithHttpInfo(rkUserGroupId, rkUserId);

        }

        /// <summary>
        /// Remove a user from a user group (since 1.1) Removes a user from a specified user group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId</param>
        /// <param name="rkUserId">rkUserId</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DisassociateUserFromGroupAsyncWithHttpInfo (string rkUserGroupId, string rkUserId)
        {
            // verify the required parameter 'rkUserGroupId' is set
            if (rkUserGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserGroupId' when calling UserGroupsApi->DisassociateUserFromGroup");
            // verify the required parameter 'rkUserId' is set
            if (rkUserId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserId' when calling UserGroupsApi->DisassociateUserFromGroup");

            var localVarPath = "/user-groups/{rkUserGroupId}/users/{rkUserId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserGroupId != null) localVarPathParams.Add("rkUserGroupId", this.Configuration.ApiClient.ParameterToString(rkUserGroupId)); // path parameter
            if (rkUserId != null) localVarPathParams.Add("rkUserId", this.Configuration.ApiClient.ParameterToString(rkUserId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisassociateUserFromGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Search User Groups (since 1.1) Returns a list of all user groups or those that match the provided filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="builtin">User group builtin filter. (optional)</param>
        /// <param name="description">Descriptions of groups to fetch. (optional)</param>
        /// <param name="id">IDs of groups to fetch. (optional)</param>
        /// <param name="name">Names of groups to fetch. (optional)</param>
        /// <param name="subDescription">Sub-descriptions of groups to fetch. (optional)</param>
        /// <returns>UserGroup</returns>
        public UserGroup GetAll (bool? builtin = null, List<string> description = null, List<string> id = null, List<string> name = null, List<string> subDescription = null)
        {
             ApiResponse<UserGroup> localVarResponse = GetAllWithHttpInfo(builtin, description, id, name, subDescription);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search User Groups (since 1.1) Returns a list of all user groups or those that match the provided filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="builtin">User group builtin filter. (optional)</param>
        /// <param name="description">Descriptions of groups to fetch. (optional)</param>
        /// <param name="id">IDs of groups to fetch. (optional)</param>
        /// <param name="name">Names of groups to fetch. (optional)</param>
        /// <param name="subDescription">Sub-descriptions of groups to fetch. (optional)</param>
        /// <returns>ApiResponse of UserGroup</returns>
        public ApiResponse< UserGroup > GetAllWithHttpInfo (bool? builtin = null, List<string> description = null, List<string> id = null, List<string> name = null, List<string> subDescription = null)
        {

            var localVarPath = "/user-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (builtin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "builtin", builtin)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "description", description)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (subDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sub_description", subDescription)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserGroup)));
        }

        /// <summary>
        /// Search User Groups (since 1.1) Returns a list of all user groups or those that match the provided filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="builtin">User group builtin filter. (optional)</param>
        /// <param name="description">Descriptions of groups to fetch. (optional)</param>
        /// <param name="id">IDs of groups to fetch. (optional)</param>
        /// <param name="name">Names of groups to fetch. (optional)</param>
        /// <param name="subDescription">Sub-descriptions of groups to fetch. (optional)</param>
        /// <returns>Task of UserGroup</returns>
        public async System.Threading.Tasks.Task<UserGroup> GetAllAsync (bool? builtin = null, List<string> description = null, List<string> id = null, List<string> name = null, List<string> subDescription = null)
        {
             ApiResponse<UserGroup> localVarResponse = await GetAllAsyncWithHttpInfo(builtin, description, id, name, subDescription);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search User Groups (since 1.1) Returns a list of all user groups or those that match the provided filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="builtin">User group builtin filter. (optional)</param>
        /// <param name="description">Descriptions of groups to fetch. (optional)</param>
        /// <param name="id">IDs of groups to fetch. (optional)</param>
        /// <param name="name">Names of groups to fetch. (optional)</param>
        /// <param name="subDescription">Sub-descriptions of groups to fetch. (optional)</param>
        /// <returns>Task of ApiResponse (UserGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserGroup>> GetAllAsyncWithHttpInfo (bool? builtin = null, List<string> description = null, List<string> id = null, List<string> name = null, List<string> subDescription = null)
        {

            var localVarPath = "/user-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (builtin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "builtin", builtin)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "description", description)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (subDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sub_description", subDescription)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserGroup)));
        }

        /// <summary>
        /// Get User Group details by ID (since 1.1) Returns the details of a single user group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId to fetch</param>
        /// <returns>UserGroup</returns>
        public UserGroup GetUserGroupById (string rkUserGroupId)
        {
             ApiResponse<UserGroup> localVarResponse = GetUserGroupByIdWithHttpInfo(rkUserGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Group details by ID (since 1.1) Returns the details of a single user group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId to fetch</param>
        /// <returns>ApiResponse of UserGroup</returns>
        public ApiResponse< UserGroup > GetUserGroupByIdWithHttpInfo (string rkUserGroupId)
        {
            // verify the required parameter 'rkUserGroupId' is set
            if (rkUserGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserGroupId' when calling UserGroupsApi->GetUserGroupById");

            var localVarPath = "/user-groups/{rkUserGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserGroupId != null) localVarPathParams.Add("rkUserGroupId", this.Configuration.ApiClient.ParameterToString(rkUserGroupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserGroupById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserGroup)));
        }

        /// <summary>
        /// Get User Group details by ID (since 1.1) Returns the details of a single user group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId to fetch</param>
        /// <returns>Task of UserGroup</returns>
        public async System.Threading.Tasks.Task<UserGroup> GetUserGroupByIdAsync (string rkUserGroupId)
        {
             ApiResponse<UserGroup> localVarResponse = await GetUserGroupByIdAsyncWithHttpInfo(rkUserGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get User Group details by ID (since 1.1) Returns the details of a single user group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId to fetch</param>
        /// <returns>Task of ApiResponse (UserGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserGroup>> GetUserGroupByIdAsyncWithHttpInfo (string rkUserGroupId)
        {
            // verify the required parameter 'rkUserGroupId' is set
            if (rkUserGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserGroupId' when calling UserGroupsApi->GetUserGroupById");

            var localVarPath = "/user-groups/{rkUserGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserGroupId != null) localVarPathParams.Add("rkUserGroupId", this.Configuration.ApiClient.ParameterToString(rkUserGroupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserGroupById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserGroup)));
        }

        /// <summary>
        /// List users of a user group (since 1.1) Returns a list of the users that belong to the specified user group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId to fetch</param>
        /// <returns>User</returns>
        public User GetUserGroupUsers (string rkUserGroupId)
        {
             ApiResponse<User> localVarResponse = GetUserGroupUsersWithHttpInfo(rkUserGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List users of a user group (since 1.1) Returns a list of the users that belong to the specified user group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId to fetch</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > GetUserGroupUsersWithHttpInfo (string rkUserGroupId)
        {
            // verify the required parameter 'rkUserGroupId' is set
            if (rkUserGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserGroupId' when calling UserGroupsApi->GetUserGroupUsers");

            var localVarPath = "/user-groups/{rkUserGroupId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserGroupId != null) localVarPathParams.Add("rkUserGroupId", this.Configuration.ApiClient.ParameterToString(rkUserGroupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserGroupUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// List users of a user group (since 1.1) Returns a list of the users that belong to the specified user group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId to fetch</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetUserGroupUsersAsync (string rkUserGroupId)
        {
             ApiResponse<User> localVarResponse = await GetUserGroupUsersAsyncWithHttpInfo(rkUserGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List users of a user group (since 1.1) Returns a list of the users that belong to the specified user group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId to fetch</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> GetUserGroupUsersAsyncWithHttpInfo (string rkUserGroupId)
        {
            // verify the required parameter 'rkUserGroupId' is set
            if (rkUserGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserGroupId' when calling UserGroupsApi->GetUserGroupUsers");

            var localVarPath = "/user-groups/{rkUserGroupId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserGroupId != null) localVarPathParams.Add("rkUserGroupId", this.Configuration.ApiClient.ParameterToString(rkUserGroupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserGroupUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Update an existing user group (since 1.1) Replaces the values of the submitted fields in an existing user group. Read-only fields should not be submitted.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId to fetch</param>
        /// <param name="body">User group request</param>
        /// <returns>UserGroup</returns>
        public UserGroup Update (string rkUserGroupId, UserGroup body)
        {
             ApiResponse<UserGroup> localVarResponse = UpdateWithHttpInfo(rkUserGroupId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing user group (since 1.1) Replaces the values of the submitted fields in an existing user group. Read-only fields should not be submitted.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId to fetch</param>
        /// <param name="body">User group request</param>
        /// <returns>ApiResponse of UserGroup</returns>
        public ApiResponse< UserGroup > UpdateWithHttpInfo (string rkUserGroupId, UserGroup body)
        {
            // verify the required parameter 'rkUserGroupId' is set
            if (rkUserGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserGroupId' when calling UserGroupsApi->Update");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UserGroupsApi->Update");

            var localVarPath = "/user-groups/{rkUserGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserGroupId != null) localVarPathParams.Add("rkUserGroupId", this.Configuration.ApiClient.ParameterToString(rkUserGroupId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserGroup)));
        }

        /// <summary>
        /// Update an existing user group (since 1.1) Replaces the values of the submitted fields in an existing user group. Read-only fields should not be submitted.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId to fetch</param>
        /// <param name="body">User group request</param>
        /// <returns>Task of UserGroup</returns>
        public async System.Threading.Tasks.Task<UserGroup> UpdateAsync (string rkUserGroupId, UserGroup body)
        {
             ApiResponse<UserGroup> localVarResponse = await UpdateAsyncWithHttpInfo(rkUserGroupId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an existing user group (since 1.1) Replaces the values of the submitted fields in an existing user group. Read-only fields should not be submitted.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserGroupId">rkUserGroupId to fetch</param>
        /// <param name="body">User group request</param>
        /// <returns>Task of ApiResponse (UserGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserGroup>> UpdateAsyncWithHttpInfo (string rkUserGroupId, UserGroup body)
        {
            // verify the required parameter 'rkUserGroupId' is set
            if (rkUserGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserGroupId' when calling UserGroupsApi->Update");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UserGroupsApi->Update");

            var localVarPath = "/user-groups/{rkUserGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserGroupId != null) localVarPathParams.Add("rkUserGroupId", this.Configuration.ApiClient.ParameterToString(rkUserGroupId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserGroup)));
        }

    }
}

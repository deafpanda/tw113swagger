/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.13.0.bmaster.r20180119190259-8b60eaa.b1753
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskgroupsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a Task Group link (since 1.11)
        /// </summary>
        /// <remarks>
        /// Links a task or Task Group as a child in another Task Group. Tasks and Task Groups may be linked into many Task Groups.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">ID of Task Group to create the link</param>
        /// <param name="rkTaskGroupableId">ID of Task Groupable to create the link</param>
        /// <returns></returns>
        void AssociateTaskGroupableToTaskGroup (string rkTaskGroupId, string rkTaskGroupableId);

        /// <summary>
        /// Add a Task Group link (since 1.11)
        /// </summary>
        /// <remarks>
        /// Links a task or Task Group as a child in another Task Group. Tasks and Task Groups may be linked into many Task Groups.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">ID of Task Group to create the link</param>
        /// <param name="rkTaskGroupableId">ID of Task Groupable to create the link</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssociateTaskGroupableToTaskGroupWithHttpInfo (string rkTaskGroupId, string rkTaskGroupableId);
        /// <summary>
        /// Create a new Task Group (since 1.11)
        /// </summary>
        /// <remarks>
        /// Returns the newly created Task Group. New Task Groups are in the Unlinked Group until linked with another Task Group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task Group object to be created in TE</param>
        /// <returns>TaskGroup</returns>
        TaskGroup CreateTaskGroup (TaskGroup body);

        /// <summary>
        /// Create a new Task Group (since 1.11)
        /// </summary>
        /// <remarks>
        /// Returns the newly created Task Group. New Task Groups are in the Unlinked Group until linked with another Task Group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task Group object to be created in TE</param>
        /// <returns>ApiResponse of TaskGroup</returns>
        ApiResponse<TaskGroup> CreateTaskGroupWithHttpInfo (TaskGroup body);
        /// <summary>
        /// Delete a Task Group (since 1.11)
        /// </summary>
        /// <remarks>
        /// Removes a Task Group from TE. Child tasks and Task Groups with no other links will be move to the Unlinked Group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">ID of Task Group to delete</param>
        /// <returns></returns>
        void DeleteTaskGroup (string rkTaskGroupId);

        /// <summary>
        /// Delete a Task Group (since 1.11)
        /// </summary>
        /// <remarks>
        /// Removes a Task Group from TE. Child tasks and Task Groups with no other links will be move to the Unlinked Group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">ID of Task Group to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTaskGroupWithHttpInfo (string rkTaskGroupId);
        /// <summary>
        /// Delete a Task Group link (since 1.11)
        /// </summary>
        /// <remarks>
        /// Removes a child task or Task Group from a parent Task Group. If the child is no longer linked to any other Task Groups, then it is moved to the Unlinked Group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">ID of Task Group to delete the link</param>
        /// <param name="rkTaskGroupableId">ID of Task Groupable to delete the link</param>
        /// <returns></returns>
        void DisassociateTaskGroupableFromTaskGroup (string rkTaskGroupId, string rkTaskGroupableId);

        /// <summary>
        /// Delete a Task Group link (since 1.11)
        /// </summary>
        /// <remarks>
        /// Removes a child task or Task Group from a parent Task Group. If the child is no longer linked to any other Task Groups, then it is moved to the Unlinked Group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">ID of Task Group to delete the link</param>
        /// <param name="rkTaskGroupableId">ID of Task Groupable to delete the link</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DisassociateTaskGroupableFromTaskGroupWithHttpInfo (string rkTaskGroupId, string rkTaskGroupableId);
        /// <summary>
        /// Get root Task Group (since 1.11)
        /// </summary>
        /// <remarks>
        /// Returns the Task Group resource for the &#39;Root Task Group&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TaskGroup</returns>
        TaskGroup GetRootTaskGroup ();

        /// <summary>
        /// Get root Task Group (since 1.11)
        /// </summary>
        /// <remarks>
        /// Returns the Task Group resource for the &#39;Root Task Group&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TaskGroup</returns>
        ApiResponse<TaskGroup> GetRootTaskGroupWithHttpInfo ();
        /// <summary>
        /// Get the details of a single Task Group (since 1.11)
        /// </summary>
        /// <remarks>
        /// Return a specific task group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">ID of Task Group to fetch</param>
        /// <returns>TaskGroup</returns>
        TaskGroup GetTaskGroupById (string rkTaskGroupId);

        /// <summary>
        /// Get the details of a single Task Group (since 1.11)
        /// </summary>
        /// <remarks>
        /// Return a specific task group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">ID of Task Group to fetch</param>
        /// <returns>ApiResponse of TaskGroup</returns>
        ApiResponse<TaskGroup> GetTaskGroupByIdWithHttpInfo (string rkTaskGroupId);
        /// <summary>
        /// Get children of a Task Group (since 1.11)
        /// </summary>
        /// <remarks>
        /// Returns a list of all visible, immediate children of a Task Group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">Id of parent Task Group</param>
        /// <returns>TaskGroupChild</returns>
        TaskGroupChild GetTaskGroupChildren (string rkTaskGroupId);

        /// <summary>
        /// Get children of a Task Group (since 1.11)
        /// </summary>
        /// <remarks>
        /// Returns a list of all visible, immediate children of a Task Group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">Id of parent Task Group</param>
        /// <returns>ApiResponse of TaskGroupChild</returns>
        ApiResponse<TaskGroupChild> GetTaskGroupChildrenWithHttpInfo (string rkTaskGroupId);
        /// <summary>
        /// Search all Task Groups (since 1.11)
        /// </summary>
        /// <remarks>
        /// Return a list of all Task Groups or only those Task Groups that match the provided filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Descriptions of Task Groups to fetch. (optional)</param>
        /// <param name="id">IDs of Task Groups to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of Task Groups to fetch. (optional)</param>
        /// <param name="modifiedTime">Modified times of Task Groups to fetch. (optional)</param>
        /// <param name="name">Names of Task Groups to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="subDescription">Support for like search for description parameter. (optional)</param>
        /// <param name="trackingId">Tracking ids of Task Groups to fetch. (optional)</param>
        /// <returns>TaskGroup</returns>
        TaskGroup GetTaskGroups (List<string> description = null, List<string> id = null, List<string> importedTime = null, List<string> modifiedTime = null, List<string> name = null, string pageLimit = null, string pageStart = null, List<string> subDescription = null, List<string> trackingId = null);

        /// <summary>
        /// Search all Task Groups (since 1.11)
        /// </summary>
        /// <remarks>
        /// Return a list of all Task Groups or only those Task Groups that match the provided filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Descriptions of Task Groups to fetch. (optional)</param>
        /// <param name="id">IDs of Task Groups to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of Task Groups to fetch. (optional)</param>
        /// <param name="modifiedTime">Modified times of Task Groups to fetch. (optional)</param>
        /// <param name="name">Names of Task Groups to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="subDescription">Support for like search for description parameter. (optional)</param>
        /// <param name="trackingId">Tracking ids of Task Groups to fetch. (optional)</param>
        /// <returns>ApiResponse of TaskGroup</returns>
        ApiResponse<TaskGroup> GetTaskGroupsWithHttpInfo (List<string> description = null, List<string> id = null, List<string> importedTime = null, List<string> modifiedTime = null, List<string> name = null, string pageLimit = null, string pageStart = null, List<string> subDescription = null, List<string> trackingId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add a Task Group link (since 1.11)
        /// </summary>
        /// <remarks>
        /// Links a task or Task Group as a child in another Task Group. Tasks and Task Groups may be linked into many Task Groups.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">ID of Task Group to create the link</param>
        /// <param name="rkTaskGroupableId">ID of Task Groupable to create the link</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssociateTaskGroupableToTaskGroupAsync (string rkTaskGroupId, string rkTaskGroupableId);

        /// <summary>
        /// Add a Task Group link (since 1.11)
        /// </summary>
        /// <remarks>
        /// Links a task or Task Group as a child in another Task Group. Tasks and Task Groups may be linked into many Task Groups.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">ID of Task Group to create the link</param>
        /// <param name="rkTaskGroupableId">ID of Task Groupable to create the link</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssociateTaskGroupableToTaskGroupAsyncWithHttpInfo (string rkTaskGroupId, string rkTaskGroupableId);
        /// <summary>
        /// Create a new Task Group (since 1.11)
        /// </summary>
        /// <remarks>
        /// Returns the newly created Task Group. New Task Groups are in the Unlinked Group until linked with another Task Group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task Group object to be created in TE</param>
        /// <returns>Task of TaskGroup</returns>
        System.Threading.Tasks.Task<TaskGroup> CreateTaskGroupAsync (TaskGroup body);

        /// <summary>
        /// Create a new Task Group (since 1.11)
        /// </summary>
        /// <remarks>
        /// Returns the newly created Task Group. New Task Groups are in the Unlinked Group until linked with another Task Group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task Group object to be created in TE</param>
        /// <returns>Task of ApiResponse (TaskGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskGroup>> CreateTaskGroupAsyncWithHttpInfo (TaskGroup body);
        /// <summary>
        /// Delete a Task Group (since 1.11)
        /// </summary>
        /// <remarks>
        /// Removes a Task Group from TE. Child tasks and Task Groups with no other links will be move to the Unlinked Group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">ID of Task Group to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTaskGroupAsync (string rkTaskGroupId);

        /// <summary>
        /// Delete a Task Group (since 1.11)
        /// </summary>
        /// <remarks>
        /// Removes a Task Group from TE. Child tasks and Task Groups with no other links will be move to the Unlinked Group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">ID of Task Group to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaskGroupAsyncWithHttpInfo (string rkTaskGroupId);
        /// <summary>
        /// Delete a Task Group link (since 1.11)
        /// </summary>
        /// <remarks>
        /// Removes a child task or Task Group from a parent Task Group. If the child is no longer linked to any other Task Groups, then it is moved to the Unlinked Group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">ID of Task Group to delete the link</param>
        /// <param name="rkTaskGroupableId">ID of Task Groupable to delete the link</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DisassociateTaskGroupableFromTaskGroupAsync (string rkTaskGroupId, string rkTaskGroupableId);

        /// <summary>
        /// Delete a Task Group link (since 1.11)
        /// </summary>
        /// <remarks>
        /// Removes a child task or Task Group from a parent Task Group. If the child is no longer linked to any other Task Groups, then it is moved to the Unlinked Group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">ID of Task Group to delete the link</param>
        /// <param name="rkTaskGroupableId">ID of Task Groupable to delete the link</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DisassociateTaskGroupableFromTaskGroupAsyncWithHttpInfo (string rkTaskGroupId, string rkTaskGroupableId);
        /// <summary>
        /// Get root Task Group (since 1.11)
        /// </summary>
        /// <remarks>
        /// Returns the Task Group resource for the &#39;Root Task Group&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TaskGroup</returns>
        System.Threading.Tasks.Task<TaskGroup> GetRootTaskGroupAsync ();

        /// <summary>
        /// Get root Task Group (since 1.11)
        /// </summary>
        /// <remarks>
        /// Returns the Task Group resource for the &#39;Root Task Group&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TaskGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskGroup>> GetRootTaskGroupAsyncWithHttpInfo ();
        /// <summary>
        /// Get the details of a single Task Group (since 1.11)
        /// </summary>
        /// <remarks>
        /// Return a specific task group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">ID of Task Group to fetch</param>
        /// <returns>Task of TaskGroup</returns>
        System.Threading.Tasks.Task<TaskGroup> GetTaskGroupByIdAsync (string rkTaskGroupId);

        /// <summary>
        /// Get the details of a single Task Group (since 1.11)
        /// </summary>
        /// <remarks>
        /// Return a specific task group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">ID of Task Group to fetch</param>
        /// <returns>Task of ApiResponse (TaskGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskGroup>> GetTaskGroupByIdAsyncWithHttpInfo (string rkTaskGroupId);
        /// <summary>
        /// Get children of a Task Group (since 1.11)
        /// </summary>
        /// <remarks>
        /// Returns a list of all visible, immediate children of a Task Group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">Id of parent Task Group</param>
        /// <returns>Task of TaskGroupChild</returns>
        System.Threading.Tasks.Task<TaskGroupChild> GetTaskGroupChildrenAsync (string rkTaskGroupId);

        /// <summary>
        /// Get children of a Task Group (since 1.11)
        /// </summary>
        /// <remarks>
        /// Returns a list of all visible, immediate children of a Task Group
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">Id of parent Task Group</param>
        /// <returns>Task of ApiResponse (TaskGroupChild)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskGroupChild>> GetTaskGroupChildrenAsyncWithHttpInfo (string rkTaskGroupId);
        /// <summary>
        /// Search all Task Groups (since 1.11)
        /// </summary>
        /// <remarks>
        /// Return a list of all Task Groups or only those Task Groups that match the provided filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Descriptions of Task Groups to fetch. (optional)</param>
        /// <param name="id">IDs of Task Groups to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of Task Groups to fetch. (optional)</param>
        /// <param name="modifiedTime">Modified times of Task Groups to fetch. (optional)</param>
        /// <param name="name">Names of Task Groups to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="subDescription">Support for like search for description parameter. (optional)</param>
        /// <param name="trackingId">Tracking ids of Task Groups to fetch. (optional)</param>
        /// <returns>Task of TaskGroup</returns>
        System.Threading.Tasks.Task<TaskGroup> GetTaskGroupsAsync (List<string> description = null, List<string> id = null, List<string> importedTime = null, List<string> modifiedTime = null, List<string> name = null, string pageLimit = null, string pageStart = null, List<string> subDescription = null, List<string> trackingId = null);

        /// <summary>
        /// Search all Task Groups (since 1.11)
        /// </summary>
        /// <remarks>
        /// Return a list of all Task Groups or only those Task Groups that match the provided filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Descriptions of Task Groups to fetch. (optional)</param>
        /// <param name="id">IDs of Task Groups to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of Task Groups to fetch. (optional)</param>
        /// <param name="modifiedTime">Modified times of Task Groups to fetch. (optional)</param>
        /// <param name="name">Names of Task Groups to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="subDescription">Support for like search for description parameter. (optional)</param>
        /// <param name="trackingId">Tracking ids of Task Groups to fetch. (optional)</param>
        /// <returns>Task of ApiResponse (TaskGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskGroup>> GetTaskGroupsAsyncWithHttpInfo (List<string> description = null, List<string> id = null, List<string> importedTime = null, List<string> modifiedTime = null, List<string> name = null, string pageLimit = null, string pageStart = null, List<string> subDescription = null, List<string> trackingId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TaskgroupsApi : ITaskgroupsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskgroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaskgroupsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskgroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TaskgroupsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add a Task Group link (since 1.11) Links a task or Task Group as a child in another Task Group. Tasks and Task Groups may be linked into many Task Groups.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">ID of Task Group to create the link</param>
        /// <param name="rkTaskGroupableId">ID of Task Groupable to create the link</param>
        /// <returns></returns>
        public void AssociateTaskGroupableToTaskGroup (string rkTaskGroupId, string rkTaskGroupableId)
        {
             AssociateTaskGroupableToTaskGroupWithHttpInfo(rkTaskGroupId, rkTaskGroupableId);
        }

        /// <summary>
        /// Add a Task Group link (since 1.11) Links a task or Task Group as a child in another Task Group. Tasks and Task Groups may be linked into many Task Groups.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">ID of Task Group to create the link</param>
        /// <param name="rkTaskGroupableId">ID of Task Groupable to create the link</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssociateTaskGroupableToTaskGroupWithHttpInfo (string rkTaskGroupId, string rkTaskGroupableId)
        {
            // verify the required parameter 'rkTaskGroupId' is set
            if (rkTaskGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkTaskGroupId' when calling TaskgroupsApi->AssociateTaskGroupableToTaskGroup");
            // verify the required parameter 'rkTaskGroupableId' is set
            if (rkTaskGroupableId == null)
                throw new ApiException(400, "Missing required parameter 'rkTaskGroupableId' when calling TaskgroupsApi->AssociateTaskGroupableToTaskGroup");

            var localVarPath = "/taskgroups/{rkTaskGroupId}/links/{rkTaskGroupableId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkTaskGroupId != null) localVarPathParams.Add("rkTaskGroupId", this.Configuration.ApiClient.ParameterToString(rkTaskGroupId)); // path parameter
            if (rkTaskGroupableId != null) localVarPathParams.Add("rkTaskGroupableId", this.Configuration.ApiClient.ParameterToString(rkTaskGroupableId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociateTaskGroupableToTaskGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add a Task Group link (since 1.11) Links a task or Task Group as a child in another Task Group. Tasks and Task Groups may be linked into many Task Groups.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">ID of Task Group to create the link</param>
        /// <param name="rkTaskGroupableId">ID of Task Groupable to create the link</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssociateTaskGroupableToTaskGroupAsync (string rkTaskGroupId, string rkTaskGroupableId)
        {
             await AssociateTaskGroupableToTaskGroupAsyncWithHttpInfo(rkTaskGroupId, rkTaskGroupableId);

        }

        /// <summary>
        /// Add a Task Group link (since 1.11) Links a task or Task Group as a child in another Task Group. Tasks and Task Groups may be linked into many Task Groups.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">ID of Task Group to create the link</param>
        /// <param name="rkTaskGroupableId">ID of Task Groupable to create the link</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssociateTaskGroupableToTaskGroupAsyncWithHttpInfo (string rkTaskGroupId, string rkTaskGroupableId)
        {
            // verify the required parameter 'rkTaskGroupId' is set
            if (rkTaskGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkTaskGroupId' when calling TaskgroupsApi->AssociateTaskGroupableToTaskGroup");
            // verify the required parameter 'rkTaskGroupableId' is set
            if (rkTaskGroupableId == null)
                throw new ApiException(400, "Missing required parameter 'rkTaskGroupableId' when calling TaskgroupsApi->AssociateTaskGroupableToTaskGroup");

            var localVarPath = "/taskgroups/{rkTaskGroupId}/links/{rkTaskGroupableId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkTaskGroupId != null) localVarPathParams.Add("rkTaskGroupId", this.Configuration.ApiClient.ParameterToString(rkTaskGroupId)); // path parameter
            if (rkTaskGroupableId != null) localVarPathParams.Add("rkTaskGroupableId", this.Configuration.ApiClient.ParameterToString(rkTaskGroupableId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociateTaskGroupableToTaskGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a new Task Group (since 1.11) Returns the newly created Task Group. New Task Groups are in the Unlinked Group until linked with another Task Group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task Group object to be created in TE</param>
        /// <returns>TaskGroup</returns>
        public TaskGroup CreateTaskGroup (TaskGroup body)
        {
             ApiResponse<TaskGroup> localVarResponse = CreateTaskGroupWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Task Group (since 1.11) Returns the newly created Task Group. New Task Groups are in the Unlinked Group until linked with another Task Group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task Group object to be created in TE</param>
        /// <returns>ApiResponse of TaskGroup</returns>
        public ApiResponse< TaskGroup > CreateTaskGroupWithHttpInfo (TaskGroup body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TaskgroupsApi->CreateTaskGroup");

            var localVarPath = "/taskgroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTaskGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskGroup)));
        }

        /// <summary>
        /// Create a new Task Group (since 1.11) Returns the newly created Task Group. New Task Groups are in the Unlinked Group until linked with another Task Group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task Group object to be created in TE</param>
        /// <returns>Task of TaskGroup</returns>
        public async System.Threading.Tasks.Task<TaskGroup> CreateTaskGroupAsync (TaskGroup body)
        {
             ApiResponse<TaskGroup> localVarResponse = await CreateTaskGroupAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Task Group (since 1.11) Returns the newly created Task Group. New Task Groups are in the Unlinked Group until linked with another Task Group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task Group object to be created in TE</param>
        /// <returns>Task of ApiResponse (TaskGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskGroup>> CreateTaskGroupAsyncWithHttpInfo (TaskGroup body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TaskgroupsApi->CreateTaskGroup");

            var localVarPath = "/taskgroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTaskGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskGroup)));
        }

        /// <summary>
        /// Delete a Task Group (since 1.11) Removes a Task Group from TE. Child tasks and Task Groups with no other links will be move to the Unlinked Group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">ID of Task Group to delete</param>
        /// <returns></returns>
        public void DeleteTaskGroup (string rkTaskGroupId)
        {
             DeleteTaskGroupWithHttpInfo(rkTaskGroupId);
        }

        /// <summary>
        /// Delete a Task Group (since 1.11) Removes a Task Group from TE. Child tasks and Task Groups with no other links will be move to the Unlinked Group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">ID of Task Group to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTaskGroupWithHttpInfo (string rkTaskGroupId)
        {
            // verify the required parameter 'rkTaskGroupId' is set
            if (rkTaskGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkTaskGroupId' when calling TaskgroupsApi->DeleteTaskGroup");

            var localVarPath = "/taskgroups/{rkTaskGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkTaskGroupId != null) localVarPathParams.Add("rkTaskGroupId", this.Configuration.ApiClient.ParameterToString(rkTaskGroupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTaskGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Task Group (since 1.11) Removes a Task Group from TE. Child tasks and Task Groups with no other links will be move to the Unlinked Group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">ID of Task Group to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTaskGroupAsync (string rkTaskGroupId)
        {
             await DeleteTaskGroupAsyncWithHttpInfo(rkTaskGroupId);

        }

        /// <summary>
        /// Delete a Task Group (since 1.11) Removes a Task Group from TE. Child tasks and Task Groups with no other links will be move to the Unlinked Group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">ID of Task Group to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaskGroupAsyncWithHttpInfo (string rkTaskGroupId)
        {
            // verify the required parameter 'rkTaskGroupId' is set
            if (rkTaskGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkTaskGroupId' when calling TaskgroupsApi->DeleteTaskGroup");

            var localVarPath = "/taskgroups/{rkTaskGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkTaskGroupId != null) localVarPathParams.Add("rkTaskGroupId", this.Configuration.ApiClient.ParameterToString(rkTaskGroupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTaskGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Task Group link (since 1.11) Removes a child task or Task Group from a parent Task Group. If the child is no longer linked to any other Task Groups, then it is moved to the Unlinked Group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">ID of Task Group to delete the link</param>
        /// <param name="rkTaskGroupableId">ID of Task Groupable to delete the link</param>
        /// <returns></returns>
        public void DisassociateTaskGroupableFromTaskGroup (string rkTaskGroupId, string rkTaskGroupableId)
        {
             DisassociateTaskGroupableFromTaskGroupWithHttpInfo(rkTaskGroupId, rkTaskGroupableId);
        }

        /// <summary>
        /// Delete a Task Group link (since 1.11) Removes a child task or Task Group from a parent Task Group. If the child is no longer linked to any other Task Groups, then it is moved to the Unlinked Group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">ID of Task Group to delete the link</param>
        /// <param name="rkTaskGroupableId">ID of Task Groupable to delete the link</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DisassociateTaskGroupableFromTaskGroupWithHttpInfo (string rkTaskGroupId, string rkTaskGroupableId)
        {
            // verify the required parameter 'rkTaskGroupId' is set
            if (rkTaskGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkTaskGroupId' when calling TaskgroupsApi->DisassociateTaskGroupableFromTaskGroup");
            // verify the required parameter 'rkTaskGroupableId' is set
            if (rkTaskGroupableId == null)
                throw new ApiException(400, "Missing required parameter 'rkTaskGroupableId' when calling TaskgroupsApi->DisassociateTaskGroupableFromTaskGroup");

            var localVarPath = "/taskgroups/{rkTaskGroupId}/links/{rkTaskGroupableId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkTaskGroupId != null) localVarPathParams.Add("rkTaskGroupId", this.Configuration.ApiClient.ParameterToString(rkTaskGroupId)); // path parameter
            if (rkTaskGroupableId != null) localVarPathParams.Add("rkTaskGroupableId", this.Configuration.ApiClient.ParameterToString(rkTaskGroupableId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisassociateTaskGroupableFromTaskGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Task Group link (since 1.11) Removes a child task or Task Group from a parent Task Group. If the child is no longer linked to any other Task Groups, then it is moved to the Unlinked Group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">ID of Task Group to delete the link</param>
        /// <param name="rkTaskGroupableId">ID of Task Groupable to delete the link</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DisassociateTaskGroupableFromTaskGroupAsync (string rkTaskGroupId, string rkTaskGroupableId)
        {
             await DisassociateTaskGroupableFromTaskGroupAsyncWithHttpInfo(rkTaskGroupId, rkTaskGroupableId);

        }

        /// <summary>
        /// Delete a Task Group link (since 1.11) Removes a child task or Task Group from a parent Task Group. If the child is no longer linked to any other Task Groups, then it is moved to the Unlinked Group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">ID of Task Group to delete the link</param>
        /// <param name="rkTaskGroupableId">ID of Task Groupable to delete the link</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DisassociateTaskGroupableFromTaskGroupAsyncWithHttpInfo (string rkTaskGroupId, string rkTaskGroupableId)
        {
            // verify the required parameter 'rkTaskGroupId' is set
            if (rkTaskGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkTaskGroupId' when calling TaskgroupsApi->DisassociateTaskGroupableFromTaskGroup");
            // verify the required parameter 'rkTaskGroupableId' is set
            if (rkTaskGroupableId == null)
                throw new ApiException(400, "Missing required parameter 'rkTaskGroupableId' when calling TaskgroupsApi->DisassociateTaskGroupableFromTaskGroup");

            var localVarPath = "/taskgroups/{rkTaskGroupId}/links/{rkTaskGroupableId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkTaskGroupId != null) localVarPathParams.Add("rkTaskGroupId", this.Configuration.ApiClient.ParameterToString(rkTaskGroupId)); // path parameter
            if (rkTaskGroupableId != null) localVarPathParams.Add("rkTaskGroupableId", this.Configuration.ApiClient.ParameterToString(rkTaskGroupableId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisassociateTaskGroupableFromTaskGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get root Task Group (since 1.11) Returns the Task Group resource for the &#39;Root Task Group&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TaskGroup</returns>
        public TaskGroup GetRootTaskGroup ()
        {
             ApiResponse<TaskGroup> localVarResponse = GetRootTaskGroupWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get root Task Group (since 1.11) Returns the Task Group resource for the &#39;Root Task Group&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TaskGroup</returns>
        public ApiResponse< TaskGroup > GetRootTaskGroupWithHttpInfo ()
        {

            var localVarPath = "/taskgroups/root";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRootTaskGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskGroup)));
        }

        /// <summary>
        /// Get root Task Group (since 1.11) Returns the Task Group resource for the &#39;Root Task Group&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TaskGroup</returns>
        public async System.Threading.Tasks.Task<TaskGroup> GetRootTaskGroupAsync ()
        {
             ApiResponse<TaskGroup> localVarResponse = await GetRootTaskGroupAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get root Task Group (since 1.11) Returns the Task Group resource for the &#39;Root Task Group&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TaskGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskGroup>> GetRootTaskGroupAsyncWithHttpInfo ()
        {

            var localVarPath = "/taskgroups/root";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRootTaskGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskGroup)));
        }

        /// <summary>
        /// Get the details of a single Task Group (since 1.11) Return a specific task group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">ID of Task Group to fetch</param>
        /// <returns>TaskGroup</returns>
        public TaskGroup GetTaskGroupById (string rkTaskGroupId)
        {
             ApiResponse<TaskGroup> localVarResponse = GetTaskGroupByIdWithHttpInfo(rkTaskGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details of a single Task Group (since 1.11) Return a specific task group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">ID of Task Group to fetch</param>
        /// <returns>ApiResponse of TaskGroup</returns>
        public ApiResponse< TaskGroup > GetTaskGroupByIdWithHttpInfo (string rkTaskGroupId)
        {
            // verify the required parameter 'rkTaskGroupId' is set
            if (rkTaskGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkTaskGroupId' when calling TaskgroupsApi->GetTaskGroupById");

            var localVarPath = "/taskgroups/{rkTaskGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkTaskGroupId != null) localVarPathParams.Add("rkTaskGroupId", this.Configuration.ApiClient.ParameterToString(rkTaskGroupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskGroupById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskGroup)));
        }

        /// <summary>
        /// Get the details of a single Task Group (since 1.11) Return a specific task group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">ID of Task Group to fetch</param>
        /// <returns>Task of TaskGroup</returns>
        public async System.Threading.Tasks.Task<TaskGroup> GetTaskGroupByIdAsync (string rkTaskGroupId)
        {
             ApiResponse<TaskGroup> localVarResponse = await GetTaskGroupByIdAsyncWithHttpInfo(rkTaskGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the details of a single Task Group (since 1.11) Return a specific task group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">ID of Task Group to fetch</param>
        /// <returns>Task of ApiResponse (TaskGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskGroup>> GetTaskGroupByIdAsyncWithHttpInfo (string rkTaskGroupId)
        {
            // verify the required parameter 'rkTaskGroupId' is set
            if (rkTaskGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkTaskGroupId' when calling TaskgroupsApi->GetTaskGroupById");

            var localVarPath = "/taskgroups/{rkTaskGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkTaskGroupId != null) localVarPathParams.Add("rkTaskGroupId", this.Configuration.ApiClient.ParameterToString(rkTaskGroupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskGroupById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskGroup)));
        }

        /// <summary>
        /// Get children of a Task Group (since 1.11) Returns a list of all visible, immediate children of a Task Group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">Id of parent Task Group</param>
        /// <returns>TaskGroupChild</returns>
        public TaskGroupChild GetTaskGroupChildren (string rkTaskGroupId)
        {
             ApiResponse<TaskGroupChild> localVarResponse = GetTaskGroupChildrenWithHttpInfo(rkTaskGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get children of a Task Group (since 1.11) Returns a list of all visible, immediate children of a Task Group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">Id of parent Task Group</param>
        /// <returns>ApiResponse of TaskGroupChild</returns>
        public ApiResponse< TaskGroupChild > GetTaskGroupChildrenWithHttpInfo (string rkTaskGroupId)
        {
            // verify the required parameter 'rkTaskGroupId' is set
            if (rkTaskGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkTaskGroupId' when calling TaskgroupsApi->GetTaskGroupChildren");

            var localVarPath = "/taskgroups/{rkTaskGroupId}/links";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkTaskGroupId != null) localVarPathParams.Add("rkTaskGroupId", this.Configuration.ApiClient.ParameterToString(rkTaskGroupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskGroupChildren", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskGroupChild>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskGroupChild) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskGroupChild)));
        }

        /// <summary>
        /// Get children of a Task Group (since 1.11) Returns a list of all visible, immediate children of a Task Group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">Id of parent Task Group</param>
        /// <returns>Task of TaskGroupChild</returns>
        public async System.Threading.Tasks.Task<TaskGroupChild> GetTaskGroupChildrenAsync (string rkTaskGroupId)
        {
             ApiResponse<TaskGroupChild> localVarResponse = await GetTaskGroupChildrenAsyncWithHttpInfo(rkTaskGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get children of a Task Group (since 1.11) Returns a list of all visible, immediate children of a Task Group
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskGroupId">Id of parent Task Group</param>
        /// <returns>Task of ApiResponse (TaskGroupChild)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskGroupChild>> GetTaskGroupChildrenAsyncWithHttpInfo (string rkTaskGroupId)
        {
            // verify the required parameter 'rkTaskGroupId' is set
            if (rkTaskGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkTaskGroupId' when calling TaskgroupsApi->GetTaskGroupChildren");

            var localVarPath = "/taskgroups/{rkTaskGroupId}/links";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkTaskGroupId != null) localVarPathParams.Add("rkTaskGroupId", this.Configuration.ApiClient.ParameterToString(rkTaskGroupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskGroupChildren", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskGroupChild>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskGroupChild) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskGroupChild)));
        }

        /// <summary>
        /// Search all Task Groups (since 1.11) Return a list of all Task Groups or only those Task Groups that match the provided filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Descriptions of Task Groups to fetch. (optional)</param>
        /// <param name="id">IDs of Task Groups to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of Task Groups to fetch. (optional)</param>
        /// <param name="modifiedTime">Modified times of Task Groups to fetch. (optional)</param>
        /// <param name="name">Names of Task Groups to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="subDescription">Support for like search for description parameter. (optional)</param>
        /// <param name="trackingId">Tracking ids of Task Groups to fetch. (optional)</param>
        /// <returns>TaskGroup</returns>
        public TaskGroup GetTaskGroups (List<string> description = null, List<string> id = null, List<string> importedTime = null, List<string> modifiedTime = null, List<string> name = null, string pageLimit = null, string pageStart = null, List<string> subDescription = null, List<string> trackingId = null)
        {
             ApiResponse<TaskGroup> localVarResponse = GetTaskGroupsWithHttpInfo(description, id, importedTime, modifiedTime, name, pageLimit, pageStart, subDescription, trackingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search all Task Groups (since 1.11) Return a list of all Task Groups or only those Task Groups that match the provided filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Descriptions of Task Groups to fetch. (optional)</param>
        /// <param name="id">IDs of Task Groups to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of Task Groups to fetch. (optional)</param>
        /// <param name="modifiedTime">Modified times of Task Groups to fetch. (optional)</param>
        /// <param name="name">Names of Task Groups to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="subDescription">Support for like search for description parameter. (optional)</param>
        /// <param name="trackingId">Tracking ids of Task Groups to fetch. (optional)</param>
        /// <returns>ApiResponse of TaskGroup</returns>
        public ApiResponse< TaskGroup > GetTaskGroupsWithHttpInfo (List<string> description = null, List<string> id = null, List<string> importedTime = null, List<string> modifiedTime = null, List<string> name = null, string pageLimit = null, string pageStart = null, List<string> subDescription = null, List<string> trackingId = null)
        {

            var localVarPath = "/taskgroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "description", description)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (importedTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "importedTime", importedTime)); // query parameter
            if (modifiedTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "modifiedTime", modifiedTime)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageLimit", pageLimit)); // query parameter
            if (pageStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageStart", pageStart)); // query parameter
            if (subDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sub_description", subDescription)); // query parameter
            if (trackingId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "trackingId", trackingId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskGroup)));
        }

        /// <summary>
        /// Search all Task Groups (since 1.11) Return a list of all Task Groups or only those Task Groups that match the provided filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Descriptions of Task Groups to fetch. (optional)</param>
        /// <param name="id">IDs of Task Groups to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of Task Groups to fetch. (optional)</param>
        /// <param name="modifiedTime">Modified times of Task Groups to fetch. (optional)</param>
        /// <param name="name">Names of Task Groups to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="subDescription">Support for like search for description parameter. (optional)</param>
        /// <param name="trackingId">Tracking ids of Task Groups to fetch. (optional)</param>
        /// <returns>Task of TaskGroup</returns>
        public async System.Threading.Tasks.Task<TaskGroup> GetTaskGroupsAsync (List<string> description = null, List<string> id = null, List<string> importedTime = null, List<string> modifiedTime = null, List<string> name = null, string pageLimit = null, string pageStart = null, List<string> subDescription = null, List<string> trackingId = null)
        {
             ApiResponse<TaskGroup> localVarResponse = await GetTaskGroupsAsyncWithHttpInfo(description, id, importedTime, modifiedTime, name, pageLimit, pageStart, subDescription, trackingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search all Task Groups (since 1.11) Return a list of all Task Groups or only those Task Groups that match the provided filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Descriptions of Task Groups to fetch. (optional)</param>
        /// <param name="id">IDs of Task Groups to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of Task Groups to fetch. (optional)</param>
        /// <param name="modifiedTime">Modified times of Task Groups to fetch. (optional)</param>
        /// <param name="name">Names of Task Groups to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="subDescription">Support for like search for description parameter. (optional)</param>
        /// <param name="trackingId">Tracking ids of Task Groups to fetch. (optional)</param>
        /// <returns>Task of ApiResponse (TaskGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskGroup>> GetTaskGroupsAsyncWithHttpInfo (List<string> description = null, List<string> id = null, List<string> importedTime = null, List<string> modifiedTime = null, List<string> name = null, string pageLimit = null, string pageStart = null, List<string> subDescription = null, List<string> trackingId = null)
        {

            var localVarPath = "/taskgroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "description", description)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (importedTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "importedTime", importedTime)); // query parameter
            if (modifiedTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "modifiedTime", modifiedTime)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageLimit", pageLimit)); // query parameter
            if (pageStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageStart", pageStart)); // query parameter
            if (subDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sub_description", subDescription)); // query parameter
            if (trackingId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "trackingId", trackingId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskGroup)));
        }

    }
}

/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.13.0.bmaster.r20180119190259-8b60eaa.b1753
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITasksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Post a request to execute a task (since 1.6)
        /// </summary>
        /// <remarks>
        /// Request to run a task. The task must be idle or the request will be rejected. Status of the request may be checked with a call to GET /api/v1/tasks/executeTaskRequests/{requestId} using the ID returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A request for to perform the execution of a Task</param>
        /// <returns>ExecuteTaskRequestCommand</returns>
        ExecuteTaskRequestCommand CreateExecuteTaskRequest (ExecuteTaskRequestCommand body);

        /// <summary>
        /// Post a request to execute a task (since 1.6)
        /// </summary>
        /// <remarks>
        /// Request to run a task. The task must be idle or the request will be rejected. Status of the request may be checked with a call to GET /api/v1/tasks/executeTaskRequests/{requestId} using the ID returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A request for to perform the execution of a Task</param>
        /// <returns>ApiResponse of ExecuteTaskRequestCommand</returns>
        ApiResponse<ExecuteTaskRequestCommand> CreateExecuteTaskRequestWithHttpInfo (ExecuteTaskRequestCommand body);
        /// <summary>
        /// Post a new task (since 1.6)
        /// </summary>
        /// <remarks>
        /// Creates a new task in the root task group. 3 task types can be created: Check Rule Task, Baseline Rule Task, and Report Task.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task to be created in TE</param>
        /// <returns>Task</returns>
        Task CreateTask (Task body);

        /// <summary>
        /// Post a new task (since 1.6)
        /// </summary>
        /// <remarks>
        /// Creates a new task in the root task group. 3 task types can be created: Check Rule Task, Baseline Rule Task, and Report Task.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task to be created in TE</param>
        /// <returns>ApiResponse of Task</returns>
        ApiResponse<Task> CreateTaskWithHttpInfo (Task body);
        /// <summary>
        /// Delete a task (since 1.6)
        /// </summary>
        /// <remarks>
        /// Remove a task from the TE system. The task must be idle at the time of deletion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task to delete</param>
        /// <returns></returns>
        void DeleteTask (string rkTaskId);

        /// <summary>
        /// Delete a task (since 1.6)
        /// </summary>
        /// <remarks>
        /// Remove a task from the TE system. The task must be idle at the time of deletion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTaskWithHttpInfo (string rkTaskId);
        /// <summary>
        /// Get Task Execution Request details by ID (since 1.6)
        /// </summary>
        /// <remarks>
        /// Returns the details of a single Task Execution Request
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of Task Execution Request to get</param>
        /// <returns>ExecuteTaskRequestCommand</returns>
        ExecuteTaskRequestCommand GetExecutionTaskRequestById (string requestId);

        /// <summary>
        /// Get Task Execution Request details by ID (since 1.6)
        /// </summary>
        /// <remarks>
        /// Returns the details of a single Task Execution Request
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of Task Execution Request to get</param>
        /// <returns>ApiResponse of ExecuteTaskRequestCommand</returns>
        ApiResponse<ExecuteTaskRequestCommand> GetExecutionTaskRequestByIdWithHttpInfo (string requestId);
        /// <summary>
        /// Get the set of node execution status details for a task (since 1.13)
        /// </summary>
        /// <remarks>
        /// Returns the latest info for each node covered by the task.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task</param>
        /// <returns>NodeStatus</returns>
        NodeStatus GetNodeStatus (string rkTaskId);

        /// <summary>
        /// Get the set of node execution status details for a task (since 1.13)
        /// </summary>
        /// <remarks>
        /// Returns the latest info for each node covered by the task.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task</param>
        /// <returns>ApiResponse of NodeStatus</returns>
        ApiResponse<NodeStatus> GetNodeStatusWithHttpInfo (string rkTaskId);
        /// <summary>
        /// Get status for node rule pair execution (since 1.13)
        /// </summary>
        /// <remarks>
        /// Returns a list of all rule run node rule pair status records
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contextId">Ids of run context node rules to fetch (optional)</param>
        /// <param name="endTime">End time of run contexts node rules to fetch (optional)</param>
        /// <param name="endTimeRange">End time range of run contexts node rules to fetch (optional)</param>
        /// <param name="hasErrors">Has errors condition of run contexts node rules to fetch (optional)</param>
        /// <param name="hasTimeout">Has timeout condition of run contexts node rules to fetch (optional)</param>
        /// <param name="lastUpdated">Last update time of run contexts node rules to fetch (optional)</param>
        /// <param name="lastUpdatedRange">Last update time range of run contexts node rules to fetch (optional)</param>
        /// <param name="nodeId">Ids of nodes of run context node rules to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="receivedEnd">Task ids of run contexts node rules to fetch (optional)</param>
        /// <param name="ruleId">Ids of rules of run context node rules to fetch (optional)</param>
        /// <param name="runType">Run types of run contexts node rules to fetch (optional)</param>
        /// <param name="startTime">Start time of run contexts node rules to fetch (optional)</param>
        /// <param name="startTimeRange">Start time range of run contexts node rules to fetch (optional)</param>
        /// <param name="wasCancelled">Task ids of run contexts node rules to fetch (optional)</param>
        /// <returns>RunContextNodeRule</returns>
        RunContextNodeRule GetRunContextNodeRules (List<string> contextId = null, List<string> endTime = null, string endTimeRange = null, string hasErrors = null, string hasTimeout = null, List<string> lastUpdated = null, string lastUpdatedRange = null, List<string> nodeId = null, string pageLimit = null, string pageStart = null, string receivedEnd = null, List<string> ruleId = null, List<string> runType = null, List<string> startTime = null, string startTimeRange = null, string wasCancelled = null);

        /// <summary>
        /// Get status for node rule pair execution (since 1.13)
        /// </summary>
        /// <remarks>
        /// Returns a list of all rule run node rule pair status records
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contextId">Ids of run context node rules to fetch (optional)</param>
        /// <param name="endTime">End time of run contexts node rules to fetch (optional)</param>
        /// <param name="endTimeRange">End time range of run contexts node rules to fetch (optional)</param>
        /// <param name="hasErrors">Has errors condition of run contexts node rules to fetch (optional)</param>
        /// <param name="hasTimeout">Has timeout condition of run contexts node rules to fetch (optional)</param>
        /// <param name="lastUpdated">Last update time of run contexts node rules to fetch (optional)</param>
        /// <param name="lastUpdatedRange">Last update time range of run contexts node rules to fetch (optional)</param>
        /// <param name="nodeId">Ids of nodes of run context node rules to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="receivedEnd">Task ids of run contexts node rules to fetch (optional)</param>
        /// <param name="ruleId">Ids of rules of run context node rules to fetch (optional)</param>
        /// <param name="runType">Run types of run contexts node rules to fetch (optional)</param>
        /// <param name="startTime">Start time of run contexts node rules to fetch (optional)</param>
        /// <param name="startTimeRange">Start time range of run contexts node rules to fetch (optional)</param>
        /// <param name="wasCancelled">Task ids of run contexts node rules to fetch (optional)</param>
        /// <returns>ApiResponse of RunContextNodeRule</returns>
        ApiResponse<RunContextNodeRule> GetRunContextNodeRulesWithHttpInfo (List<string> contextId = null, List<string> endTime = null, string endTimeRange = null, string hasErrors = null, string hasTimeout = null, List<string> lastUpdated = null, string lastUpdatedRange = null, List<string> nodeId = null, string pageLimit = null, string pageStart = null, string receivedEnd = null, List<string> ruleId = null, List<string> runType = null, List<string> startTime = null, string startTimeRange = null, string wasCancelled = null);
        /// <summary>
        /// Get most recent status by task for node rule pair execution (since 1.13)
        /// </summary>
        /// <remarks>
        /// Returns a list the rule run node rule pair status for the latest run context of each task
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contextId">Ids of run context node rules to fetch (optional)</param>
        /// <param name="endTime">End time of run contexts node rules to fetch (optional)</param>
        /// <param name="endTimeRange">End time range of run contexts node rules to fetch (optional)</param>
        /// <param name="hasErrors">Has errors condition of run contexts node rules to fetch (optional)</param>
        /// <param name="hasTimeout">Has timeout condition of run contexts node rules to fetch (optional)</param>
        /// <param name="lastUpdated">Last update time of run contexts node rules to fetch (optional)</param>
        /// <param name="lastUpdatedRange">Last update time range of run contexts node rules to fetch (optional)</param>
        /// <param name="nodeId">Ids of nodes of run context node rules to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="receivedEnd">Task ids of run contexts node rules to fetch (optional)</param>
        /// <param name="ruleId">Ids of rules of run context node rules to fetch (optional)</param>
        /// <param name="runType">Run types of run contexts node rules to fetch (optional)</param>
        /// <param name="startTime">Start time of run contexts node rules to fetch (optional)</param>
        /// <param name="startTimeRange">Start time range of run contexts node rules to fetch (optional)</param>
        /// <param name="wasCancelled">Task ids of run contexts node rules to fetch (optional)</param>
        /// <returns>RunContextNodeRule</returns>
        RunContextNodeRule GetRunContextNodeRulesLatest (List<string> contextId = null, List<string> endTime = null, string endTimeRange = null, string hasErrors = null, string hasTimeout = null, List<string> lastUpdated = null, string lastUpdatedRange = null, List<string> nodeId = null, string pageLimit = null, string pageStart = null, string receivedEnd = null, List<string> ruleId = null, List<string> runType = null, List<string> startTime = null, string startTimeRange = null, string wasCancelled = null);

        /// <summary>
        /// Get most recent status by task for node rule pair execution (since 1.13)
        /// </summary>
        /// <remarks>
        /// Returns a list the rule run node rule pair status for the latest run context of each task
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contextId">Ids of run context node rules to fetch (optional)</param>
        /// <param name="endTime">End time of run contexts node rules to fetch (optional)</param>
        /// <param name="endTimeRange">End time range of run contexts node rules to fetch (optional)</param>
        /// <param name="hasErrors">Has errors condition of run contexts node rules to fetch (optional)</param>
        /// <param name="hasTimeout">Has timeout condition of run contexts node rules to fetch (optional)</param>
        /// <param name="lastUpdated">Last update time of run contexts node rules to fetch (optional)</param>
        /// <param name="lastUpdatedRange">Last update time range of run contexts node rules to fetch (optional)</param>
        /// <param name="nodeId">Ids of nodes of run context node rules to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="receivedEnd">Task ids of run contexts node rules to fetch (optional)</param>
        /// <param name="ruleId">Ids of rules of run context node rules to fetch (optional)</param>
        /// <param name="runType">Run types of run contexts node rules to fetch (optional)</param>
        /// <param name="startTime">Start time of run contexts node rules to fetch (optional)</param>
        /// <param name="startTimeRange">Start time range of run contexts node rules to fetch (optional)</param>
        /// <param name="wasCancelled">Task ids of run contexts node rules to fetch (optional)</param>
        /// <returns>ApiResponse of RunContextNodeRule</returns>
        ApiResponse<RunContextNodeRule> GetRunContextNodeRulesLatestWithHttpInfo (List<string> contextId = null, List<string> endTime = null, string endTimeRange = null, string hasErrors = null, string hasTimeout = null, List<string> lastUpdated = null, string lastUpdatedRange = null, List<string> nodeId = null, string pageLimit = null, string pageStart = null, string receivedEnd = null, List<string> ruleId = null, List<string> runType = null, List<string> startTime = null, string startTimeRange = null, string wasCancelled = null);
        /// <summary>
        /// Get status for rule based task runs (since 1.13)
        /// </summary>
        /// <remarks>
        /// Returns a list of task run status records
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endTime">End time of run contexts to fetch (optional)</param>
        /// <param name="endTimeRange">End time range of run contexts to fetch (optional)</param>
        /// <param name="hasErrors">Has errors condition of run contexts to fetch (optional)</param>
        /// <param name="id">Ids of run contexts to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="previousId">When paging, this should be the last element version id returned by the previous page (optional)</param>
        /// <param name="runType">Run types of run contexts to fetch (optional)</param>
        /// <param name="startTime">Start time of run contexts to fetch (optional)</param>
        /// <param name="startTimeRange">Start time range of run contexts to fetch (optional)</param>
        /// <param name="stopType">Stop types of run contexts to fetch (optional)</param>
        /// <param name="taskId">Task ids of run contexts to fetch (optional)</param>
        /// <returns>RunContext</returns>
        RunContext GetRunContexts (List<string> endTime = null, string endTimeRange = null, string hasErrors = null, List<string> id = null, string pageLimit = null, string previousId = null, List<string> runType = null, List<string> startTime = null, string startTimeRange = null, List<string> stopType = null, List<string> taskId = null);

        /// <summary>
        /// Get status for rule based task runs (since 1.13)
        /// </summary>
        /// <remarks>
        /// Returns a list of task run status records
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endTime">End time of run contexts to fetch (optional)</param>
        /// <param name="endTimeRange">End time range of run contexts to fetch (optional)</param>
        /// <param name="hasErrors">Has errors condition of run contexts to fetch (optional)</param>
        /// <param name="id">Ids of run contexts to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="previousId">When paging, this should be the last element version id returned by the previous page (optional)</param>
        /// <param name="runType">Run types of run contexts to fetch (optional)</param>
        /// <param name="startTime">Start time of run contexts to fetch (optional)</param>
        /// <param name="startTimeRange">Start time range of run contexts to fetch (optional)</param>
        /// <param name="stopType">Stop types of run contexts to fetch (optional)</param>
        /// <param name="taskId">Task ids of run contexts to fetch (optional)</param>
        /// <returns>ApiResponse of RunContext</returns>
        ApiResponse<RunContext> GetRunContextsWithHttpInfo (List<string> endTime = null, string endTimeRange = null, string hasErrors = null, List<string> id = null, string pageLimit = null, string previousId = null, List<string> runType = null, List<string> startTime = null, string startTimeRange = null, List<string> stopType = null, List<string> taskId = null);
        /// <summary>
        /// Get latest status for rule based task runs (since 1.13)
        /// </summary>
        /// <remarks>
        /// Returns a list of the latest task run status record for each rule based task
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endTime">End time of run contexts to fetch (optional)</param>
        /// <param name="endTimeRange">End time range of run contexts to fetch (optional)</param>
        /// <param name="hasErrors">Has errors condition of run contexts to fetch (optional)</param>
        /// <param name="id">Ids of run contexts to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="previousId">When paging, this should be the last element version id returned by the previous page (optional)</param>
        /// <param name="runType">Run types of run contexts to fetch (optional)</param>
        /// <param name="startTime">Start time of run contexts to fetch (optional)</param>
        /// <param name="startTimeRange">Start time range of run contexts to fetch (optional)</param>
        /// <param name="stopType">Stop types of run contexts to fetch (optional)</param>
        /// <param name="taskId">Task ids of run contexts to fetch (optional)</param>
        /// <returns>RunContext</returns>
        RunContext GetRunContextsLatest (List<string> endTime = null, string endTimeRange = null, string hasErrors = null, List<string> id = null, string pageLimit = null, string previousId = null, List<string> runType = null, List<string> startTime = null, string startTimeRange = null, List<string> stopType = null, List<string> taskId = null);

        /// <summary>
        /// Get latest status for rule based task runs (since 1.13)
        /// </summary>
        /// <remarks>
        /// Returns a list of the latest task run status record for each rule based task
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endTime">End time of run contexts to fetch (optional)</param>
        /// <param name="endTimeRange">End time range of run contexts to fetch (optional)</param>
        /// <param name="hasErrors">Has errors condition of run contexts to fetch (optional)</param>
        /// <param name="id">Ids of run contexts to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="previousId">When paging, this should be the last element version id returned by the previous page (optional)</param>
        /// <param name="runType">Run types of run contexts to fetch (optional)</param>
        /// <param name="startTime">Start time of run contexts to fetch (optional)</param>
        /// <param name="startTimeRange">Start time range of run contexts to fetch (optional)</param>
        /// <param name="stopType">Stop types of run contexts to fetch (optional)</param>
        /// <param name="taskId">Task ids of run contexts to fetch (optional)</param>
        /// <returns>ApiResponse of RunContext</returns>
        ApiResponse<RunContext> GetRunContextsLatestWithHttpInfo (List<string> endTime = null, string endTimeRange = null, string hasErrors = null, List<string> id = null, string pageLimit = null, string previousId = null, List<string> runType = null, List<string> startTime = null, string startTimeRange = null, List<string> stopType = null, List<string> taskId = null);
        /// <summary>
        /// Get nodes targeted by this task (since 1.11)
        /// </summary>
        /// <remarks>
        /// Returns nodes scoped to this task that at least one rule in the task is able to target
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task to get</param>
        /// <returns>Node</returns>
        Node GetTargetableNodes (string rkTaskId);

        /// <summary>
        /// Get nodes targeted by this task (since 1.11)
        /// </summary>
        /// <remarks>
        /// Returns nodes scoped to this task that at least one rule in the task is able to target
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task to get</param>
        /// <returns>ApiResponse of Node</returns>
        ApiResponse<Node> GetTargetableNodesWithHttpInfo (string rkTaskId);
        /// <summary>
        /// Get task details by ID (since 1.6)
        /// </summary>
        /// <remarks>
        /// Returns the details of a single task
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task to get</param>
        /// <returns>Task</returns>
        Task GetTaskById (string rkTaskId);

        /// <summary>
        /// Get task details by ID (since 1.6)
        /// </summary>
        /// <remarks>
        /// Returns the details of a single task
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task to get</param>
        /// <returns>ApiResponse of Task</returns>
        ApiResponse<Task> GetTaskByIdWithHttpInfo (string rkTaskId);
        /// <summary>
        /// Get a list of tasks (since 1.6)
        /// </summary>
        /// <remarks>
        /// Returns a list of all tasks, or only those tasks that match the provided filter criteria. Search filters are supported for all fields except schedule. The task list is returned ordered by name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actionIds">Ids of actions to execute for tasks to fetch (optional)</param>
        /// <param name="additionalEmailAddresses">Email addresses that will receive reports from tasks to fetch (optional)</param>
        /// <param name="archiveAuditEvents">Audit events exceeding retention age option of tasks to fetch (optional)</param>
        /// <param name="archiveLogsExceeding">Number of maximum log messages to retain of tasks to fetch (optional)</param>
        /// <param name="archiveLogsOlderThan">Number of days to retain latests logs of tasks to fetch (optional)</param>
        /// <param name="archiveReports">Archive report option of tasks to fetch (optional)</param>
        /// <param name="compactVersionsExceeding">Maximum latests element versions to reatain of tasks to fetch (optional)</param>
        /// <param name="compactVersionsOlderThan">Days to ratain element versions of tasks to fetch (optional)</param>
        /// <param name="description">Description of tasks to fetch (optional)</param>
        /// <param name="emailServer">Name of email server for sending reports from tasks to fetch (optional)</param>
        /// <param name="enabled">Fetch only tasks that are enabled or disabled (optional)</param>
        /// <param name="id">Ids of tasks to fetch (optional)</param>
        /// <param name="ignoreEmptyReports">Ignore empty reports option of tasks to fetch (optional)</param>
        /// <param name="lastDuration">Last duration of execution of tasks to fetch (optional)</param>
        /// <param name="lastStart">Last start of execution of tasks to fetch (optional)</param>
        /// <param name="name">Name of tasks to fetch (optional)</param>
        /// <param name="newBaselinesOnly">New baseline element versions creation restriction option of tasks to fetch (optional)</param>
        /// <param name="nextStart">Next start for execution of tasks to fetch (optional)</param>
        /// <param name="nodeId">Node or node group ids in scope of tasks to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="reportFormat">Report format used for tasks to fetch (optional)</param>
        /// <param name="reportId">Ids of reports to execute for tasks to fetch (optional)</param>
        /// <param name="reportUserIds">Ids of users who will receive reports from tasks to fetch (optional)</param>
        /// <param name="ruleId">Rule or rule group ids in scope of tasks to fetch (optional)</param>
        /// <param name="status">Statuses of tasks to fetch (optional)</param>
        /// <param name="subDescription">Substring matching for description of tasks to fetch (optional)</param>
        /// <param name="timeout">Hour timeout of tasks to fetch (optional)</param>
        /// <param name="type">Type of tasks to fetch (optional)</param>
        /// <param name="userId">Ids of users of tasks to fetch (optional)</param>
        /// <returns>Task</returns>
        Task GetTasks (List<string> actionIds = null, List<string> additionalEmailAddresses = null, bool? archiveAuditEvents = null, List<string> archiveLogsExceeding = null, List<string> archiveLogsOlderThan = null, bool? archiveReports = null, List<string> compactVersionsExceeding = null, List<string> compactVersionsOlderThan = null, List<string> description = null, List<string> emailServer = null, bool? enabled = null, List<string> id = null, bool? ignoreEmptyReports = null, List<string> lastDuration = null, List<string> lastStart = null, List<string> name = null, bool? newBaselinesOnly = null, List<string> nextStart = null, List<string> nodeId = null, string pageLimit = null, string pageStart = null, List<string> reportFormat = null, List<string> reportId = null, List<string> reportUserIds = null, List<string> ruleId = null, List<string> status = null, List<string> subDescription = null, List<string> timeout = null, List<string> type = null, List<string> userId = null);

        /// <summary>
        /// Get a list of tasks (since 1.6)
        /// </summary>
        /// <remarks>
        /// Returns a list of all tasks, or only those tasks that match the provided filter criteria. Search filters are supported for all fields except schedule. The task list is returned ordered by name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actionIds">Ids of actions to execute for tasks to fetch (optional)</param>
        /// <param name="additionalEmailAddresses">Email addresses that will receive reports from tasks to fetch (optional)</param>
        /// <param name="archiveAuditEvents">Audit events exceeding retention age option of tasks to fetch (optional)</param>
        /// <param name="archiveLogsExceeding">Number of maximum log messages to retain of tasks to fetch (optional)</param>
        /// <param name="archiveLogsOlderThan">Number of days to retain latests logs of tasks to fetch (optional)</param>
        /// <param name="archiveReports">Archive report option of tasks to fetch (optional)</param>
        /// <param name="compactVersionsExceeding">Maximum latests element versions to reatain of tasks to fetch (optional)</param>
        /// <param name="compactVersionsOlderThan">Days to ratain element versions of tasks to fetch (optional)</param>
        /// <param name="description">Description of tasks to fetch (optional)</param>
        /// <param name="emailServer">Name of email server for sending reports from tasks to fetch (optional)</param>
        /// <param name="enabled">Fetch only tasks that are enabled or disabled (optional)</param>
        /// <param name="id">Ids of tasks to fetch (optional)</param>
        /// <param name="ignoreEmptyReports">Ignore empty reports option of tasks to fetch (optional)</param>
        /// <param name="lastDuration">Last duration of execution of tasks to fetch (optional)</param>
        /// <param name="lastStart">Last start of execution of tasks to fetch (optional)</param>
        /// <param name="name">Name of tasks to fetch (optional)</param>
        /// <param name="newBaselinesOnly">New baseline element versions creation restriction option of tasks to fetch (optional)</param>
        /// <param name="nextStart">Next start for execution of tasks to fetch (optional)</param>
        /// <param name="nodeId">Node or node group ids in scope of tasks to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="reportFormat">Report format used for tasks to fetch (optional)</param>
        /// <param name="reportId">Ids of reports to execute for tasks to fetch (optional)</param>
        /// <param name="reportUserIds">Ids of users who will receive reports from tasks to fetch (optional)</param>
        /// <param name="ruleId">Rule or rule group ids in scope of tasks to fetch (optional)</param>
        /// <param name="status">Statuses of tasks to fetch (optional)</param>
        /// <param name="subDescription">Substring matching for description of tasks to fetch (optional)</param>
        /// <param name="timeout">Hour timeout of tasks to fetch (optional)</param>
        /// <param name="type">Type of tasks to fetch (optional)</param>
        /// <param name="userId">Ids of users of tasks to fetch (optional)</param>
        /// <returns>ApiResponse of Task</returns>
        ApiResponse<Task> GetTasksWithHttpInfo (List<string> actionIds = null, List<string> additionalEmailAddresses = null, bool? archiveAuditEvents = null, List<string> archiveLogsExceeding = null, List<string> archiveLogsOlderThan = null, bool? archiveReports = null, List<string> compactVersionsExceeding = null, List<string> compactVersionsOlderThan = null, List<string> description = null, List<string> emailServer = null, bool? enabled = null, List<string> id = null, bool? ignoreEmptyReports = null, List<string> lastDuration = null, List<string> lastStart = null, List<string> name = null, bool? newBaselinesOnly = null, List<string> nextStart = null, List<string> nodeId = null, string pageLimit = null, string pageStart = null, List<string> reportFormat = null, List<string> reportId = null, List<string> reportUserIds = null, List<string> ruleId = null, List<string> status = null, List<string> subDescription = null, List<string> timeout = null, List<string> type = null, List<string> userId = null);
        /// <summary>
        /// Put an update to an existing task (since 1.6)
        /// </summary>
        /// <remarks>
        /// Updates an existing task, ignoring the following read-only fields: type, status, lastStart, lastDuration, and nextStart. You may not rename to the same name as another task.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task to be updated</param>
        /// <param name="task">Task description to update the existing task</param>
        /// <returns>Task</returns>
        Task UpdateTask (string rkTaskId, Task task);

        /// <summary>
        /// Put an update to an existing task (since 1.6)
        /// </summary>
        /// <remarks>
        /// Updates an existing task, ignoring the following read-only fields: type, status, lastStart, lastDuration, and nextStart. You may not rename to the same name as another task.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task to be updated</param>
        /// <param name="task">Task description to update the existing task</param>
        /// <returns>ApiResponse of Task</returns>
        ApiResponse<Task> UpdateTaskWithHttpInfo (string rkTaskId, Task task);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Post a request to execute a task (since 1.6)
        /// </summary>
        /// <remarks>
        /// Request to run a task. The task must be idle or the request will be rejected. Status of the request may be checked with a call to GET /api/v1/tasks/executeTaskRequests/{requestId} using the ID returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A request for to perform the execution of a Task</param>
        /// <returns>Task of ExecuteTaskRequestCommand</returns>
        System.Threading.Tasks.Task<ExecuteTaskRequestCommand> CreateExecuteTaskRequestAsync (ExecuteTaskRequestCommand body);

        /// <summary>
        /// Post a request to execute a task (since 1.6)
        /// </summary>
        /// <remarks>
        /// Request to run a task. The task must be idle or the request will be rejected. Status of the request may be checked with a call to GET /api/v1/tasks/executeTaskRequests/{requestId} using the ID returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A request for to perform the execution of a Task</param>
        /// <returns>Task of ApiResponse (ExecuteTaskRequestCommand)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExecuteTaskRequestCommand>> CreateExecuteTaskRequestAsyncWithHttpInfo (ExecuteTaskRequestCommand body);
        /// <summary>
        /// Post a new task (since 1.6)
        /// </summary>
        /// <remarks>
        /// Creates a new task in the root task group. 3 task types can be created: Check Rule Task, Baseline Rule Task, and Report Task.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task to be created in TE</param>
        /// <returns>Task of Task</returns>
        System.Threading.Tasks.Task<Task> CreateTaskAsync (Task body);

        /// <summary>
        /// Post a new task (since 1.6)
        /// </summary>
        /// <remarks>
        /// Creates a new task in the root task group. 3 task types can be created: Check Rule Task, Baseline Rule Task, and Report Task.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task to be created in TE</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        System.Threading.Tasks.Task<ApiResponse<Task>> CreateTaskAsyncWithHttpInfo (Task body);
        /// <summary>
        /// Delete a task (since 1.6)
        /// </summary>
        /// <remarks>
        /// Remove a task from the TE system. The task must be idle at the time of deletion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTaskAsync (string rkTaskId);

        /// <summary>
        /// Delete a task (since 1.6)
        /// </summary>
        /// <remarks>
        /// Remove a task from the TE system. The task must be idle at the time of deletion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaskAsyncWithHttpInfo (string rkTaskId);
        /// <summary>
        /// Get Task Execution Request details by ID (since 1.6)
        /// </summary>
        /// <remarks>
        /// Returns the details of a single Task Execution Request
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of Task Execution Request to get</param>
        /// <returns>Task of ExecuteTaskRequestCommand</returns>
        System.Threading.Tasks.Task<ExecuteTaskRequestCommand> GetExecutionTaskRequestByIdAsync (string requestId);

        /// <summary>
        /// Get Task Execution Request details by ID (since 1.6)
        /// </summary>
        /// <remarks>
        /// Returns the details of a single Task Execution Request
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of Task Execution Request to get</param>
        /// <returns>Task of ApiResponse (ExecuteTaskRequestCommand)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExecuteTaskRequestCommand>> GetExecutionTaskRequestByIdAsyncWithHttpInfo (string requestId);
        /// <summary>
        /// Get the set of node execution status details for a task (since 1.13)
        /// </summary>
        /// <remarks>
        /// Returns the latest info for each node covered by the task.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task</param>
        /// <returns>Task of NodeStatus</returns>
        System.Threading.Tasks.Task<NodeStatus> GetNodeStatusAsync (string rkTaskId);

        /// <summary>
        /// Get the set of node execution status details for a task (since 1.13)
        /// </summary>
        /// <remarks>
        /// Returns the latest info for each node covered by the task.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task</param>
        /// <returns>Task of ApiResponse (NodeStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeStatus>> GetNodeStatusAsyncWithHttpInfo (string rkTaskId);
        /// <summary>
        /// Get status for node rule pair execution (since 1.13)
        /// </summary>
        /// <remarks>
        /// Returns a list of all rule run node rule pair status records
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contextId">Ids of run context node rules to fetch (optional)</param>
        /// <param name="endTime">End time of run contexts node rules to fetch (optional)</param>
        /// <param name="endTimeRange">End time range of run contexts node rules to fetch (optional)</param>
        /// <param name="hasErrors">Has errors condition of run contexts node rules to fetch (optional)</param>
        /// <param name="hasTimeout">Has timeout condition of run contexts node rules to fetch (optional)</param>
        /// <param name="lastUpdated">Last update time of run contexts node rules to fetch (optional)</param>
        /// <param name="lastUpdatedRange">Last update time range of run contexts node rules to fetch (optional)</param>
        /// <param name="nodeId">Ids of nodes of run context node rules to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="receivedEnd">Task ids of run contexts node rules to fetch (optional)</param>
        /// <param name="ruleId">Ids of rules of run context node rules to fetch (optional)</param>
        /// <param name="runType">Run types of run contexts node rules to fetch (optional)</param>
        /// <param name="startTime">Start time of run contexts node rules to fetch (optional)</param>
        /// <param name="startTimeRange">Start time range of run contexts node rules to fetch (optional)</param>
        /// <param name="wasCancelled">Task ids of run contexts node rules to fetch (optional)</param>
        /// <returns>Task of RunContextNodeRule</returns>
        System.Threading.Tasks.Task<RunContextNodeRule> GetRunContextNodeRulesAsync (List<string> contextId = null, List<string> endTime = null, string endTimeRange = null, string hasErrors = null, string hasTimeout = null, List<string> lastUpdated = null, string lastUpdatedRange = null, List<string> nodeId = null, string pageLimit = null, string pageStart = null, string receivedEnd = null, List<string> ruleId = null, List<string> runType = null, List<string> startTime = null, string startTimeRange = null, string wasCancelled = null);

        /// <summary>
        /// Get status for node rule pair execution (since 1.13)
        /// </summary>
        /// <remarks>
        /// Returns a list of all rule run node rule pair status records
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contextId">Ids of run context node rules to fetch (optional)</param>
        /// <param name="endTime">End time of run contexts node rules to fetch (optional)</param>
        /// <param name="endTimeRange">End time range of run contexts node rules to fetch (optional)</param>
        /// <param name="hasErrors">Has errors condition of run contexts node rules to fetch (optional)</param>
        /// <param name="hasTimeout">Has timeout condition of run contexts node rules to fetch (optional)</param>
        /// <param name="lastUpdated">Last update time of run contexts node rules to fetch (optional)</param>
        /// <param name="lastUpdatedRange">Last update time range of run contexts node rules to fetch (optional)</param>
        /// <param name="nodeId">Ids of nodes of run context node rules to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="receivedEnd">Task ids of run contexts node rules to fetch (optional)</param>
        /// <param name="ruleId">Ids of rules of run context node rules to fetch (optional)</param>
        /// <param name="runType">Run types of run contexts node rules to fetch (optional)</param>
        /// <param name="startTime">Start time of run contexts node rules to fetch (optional)</param>
        /// <param name="startTimeRange">Start time range of run contexts node rules to fetch (optional)</param>
        /// <param name="wasCancelled">Task ids of run contexts node rules to fetch (optional)</param>
        /// <returns>Task of ApiResponse (RunContextNodeRule)</returns>
        System.Threading.Tasks.Task<ApiResponse<RunContextNodeRule>> GetRunContextNodeRulesAsyncWithHttpInfo (List<string> contextId = null, List<string> endTime = null, string endTimeRange = null, string hasErrors = null, string hasTimeout = null, List<string> lastUpdated = null, string lastUpdatedRange = null, List<string> nodeId = null, string pageLimit = null, string pageStart = null, string receivedEnd = null, List<string> ruleId = null, List<string> runType = null, List<string> startTime = null, string startTimeRange = null, string wasCancelled = null);
        /// <summary>
        /// Get most recent status by task for node rule pair execution (since 1.13)
        /// </summary>
        /// <remarks>
        /// Returns a list the rule run node rule pair status for the latest run context of each task
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contextId">Ids of run context node rules to fetch (optional)</param>
        /// <param name="endTime">End time of run contexts node rules to fetch (optional)</param>
        /// <param name="endTimeRange">End time range of run contexts node rules to fetch (optional)</param>
        /// <param name="hasErrors">Has errors condition of run contexts node rules to fetch (optional)</param>
        /// <param name="hasTimeout">Has timeout condition of run contexts node rules to fetch (optional)</param>
        /// <param name="lastUpdated">Last update time of run contexts node rules to fetch (optional)</param>
        /// <param name="lastUpdatedRange">Last update time range of run contexts node rules to fetch (optional)</param>
        /// <param name="nodeId">Ids of nodes of run context node rules to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="receivedEnd">Task ids of run contexts node rules to fetch (optional)</param>
        /// <param name="ruleId">Ids of rules of run context node rules to fetch (optional)</param>
        /// <param name="runType">Run types of run contexts node rules to fetch (optional)</param>
        /// <param name="startTime">Start time of run contexts node rules to fetch (optional)</param>
        /// <param name="startTimeRange">Start time range of run contexts node rules to fetch (optional)</param>
        /// <param name="wasCancelled">Task ids of run contexts node rules to fetch (optional)</param>
        /// <returns>Task of RunContextNodeRule</returns>
        System.Threading.Tasks.Task<RunContextNodeRule> GetRunContextNodeRulesLatestAsync (List<string> contextId = null, List<string> endTime = null, string endTimeRange = null, string hasErrors = null, string hasTimeout = null, List<string> lastUpdated = null, string lastUpdatedRange = null, List<string> nodeId = null, string pageLimit = null, string pageStart = null, string receivedEnd = null, List<string> ruleId = null, List<string> runType = null, List<string> startTime = null, string startTimeRange = null, string wasCancelled = null);

        /// <summary>
        /// Get most recent status by task for node rule pair execution (since 1.13)
        /// </summary>
        /// <remarks>
        /// Returns a list the rule run node rule pair status for the latest run context of each task
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contextId">Ids of run context node rules to fetch (optional)</param>
        /// <param name="endTime">End time of run contexts node rules to fetch (optional)</param>
        /// <param name="endTimeRange">End time range of run contexts node rules to fetch (optional)</param>
        /// <param name="hasErrors">Has errors condition of run contexts node rules to fetch (optional)</param>
        /// <param name="hasTimeout">Has timeout condition of run contexts node rules to fetch (optional)</param>
        /// <param name="lastUpdated">Last update time of run contexts node rules to fetch (optional)</param>
        /// <param name="lastUpdatedRange">Last update time range of run contexts node rules to fetch (optional)</param>
        /// <param name="nodeId">Ids of nodes of run context node rules to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="receivedEnd">Task ids of run contexts node rules to fetch (optional)</param>
        /// <param name="ruleId">Ids of rules of run context node rules to fetch (optional)</param>
        /// <param name="runType">Run types of run contexts node rules to fetch (optional)</param>
        /// <param name="startTime">Start time of run contexts node rules to fetch (optional)</param>
        /// <param name="startTimeRange">Start time range of run contexts node rules to fetch (optional)</param>
        /// <param name="wasCancelled">Task ids of run contexts node rules to fetch (optional)</param>
        /// <returns>Task of ApiResponse (RunContextNodeRule)</returns>
        System.Threading.Tasks.Task<ApiResponse<RunContextNodeRule>> GetRunContextNodeRulesLatestAsyncWithHttpInfo (List<string> contextId = null, List<string> endTime = null, string endTimeRange = null, string hasErrors = null, string hasTimeout = null, List<string> lastUpdated = null, string lastUpdatedRange = null, List<string> nodeId = null, string pageLimit = null, string pageStart = null, string receivedEnd = null, List<string> ruleId = null, List<string> runType = null, List<string> startTime = null, string startTimeRange = null, string wasCancelled = null);
        /// <summary>
        /// Get status for rule based task runs (since 1.13)
        /// </summary>
        /// <remarks>
        /// Returns a list of task run status records
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endTime">End time of run contexts to fetch (optional)</param>
        /// <param name="endTimeRange">End time range of run contexts to fetch (optional)</param>
        /// <param name="hasErrors">Has errors condition of run contexts to fetch (optional)</param>
        /// <param name="id">Ids of run contexts to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="previousId">When paging, this should be the last element version id returned by the previous page (optional)</param>
        /// <param name="runType">Run types of run contexts to fetch (optional)</param>
        /// <param name="startTime">Start time of run contexts to fetch (optional)</param>
        /// <param name="startTimeRange">Start time range of run contexts to fetch (optional)</param>
        /// <param name="stopType">Stop types of run contexts to fetch (optional)</param>
        /// <param name="taskId">Task ids of run contexts to fetch (optional)</param>
        /// <returns>Task of RunContext</returns>
        System.Threading.Tasks.Task<RunContext> GetRunContextsAsync (List<string> endTime = null, string endTimeRange = null, string hasErrors = null, List<string> id = null, string pageLimit = null, string previousId = null, List<string> runType = null, List<string> startTime = null, string startTimeRange = null, List<string> stopType = null, List<string> taskId = null);

        /// <summary>
        /// Get status for rule based task runs (since 1.13)
        /// </summary>
        /// <remarks>
        /// Returns a list of task run status records
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endTime">End time of run contexts to fetch (optional)</param>
        /// <param name="endTimeRange">End time range of run contexts to fetch (optional)</param>
        /// <param name="hasErrors">Has errors condition of run contexts to fetch (optional)</param>
        /// <param name="id">Ids of run contexts to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="previousId">When paging, this should be the last element version id returned by the previous page (optional)</param>
        /// <param name="runType">Run types of run contexts to fetch (optional)</param>
        /// <param name="startTime">Start time of run contexts to fetch (optional)</param>
        /// <param name="startTimeRange">Start time range of run contexts to fetch (optional)</param>
        /// <param name="stopType">Stop types of run contexts to fetch (optional)</param>
        /// <param name="taskId">Task ids of run contexts to fetch (optional)</param>
        /// <returns>Task of ApiResponse (RunContext)</returns>
        System.Threading.Tasks.Task<ApiResponse<RunContext>> GetRunContextsAsyncWithHttpInfo (List<string> endTime = null, string endTimeRange = null, string hasErrors = null, List<string> id = null, string pageLimit = null, string previousId = null, List<string> runType = null, List<string> startTime = null, string startTimeRange = null, List<string> stopType = null, List<string> taskId = null);
        /// <summary>
        /// Get latest status for rule based task runs (since 1.13)
        /// </summary>
        /// <remarks>
        /// Returns a list of the latest task run status record for each rule based task
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endTime">End time of run contexts to fetch (optional)</param>
        /// <param name="endTimeRange">End time range of run contexts to fetch (optional)</param>
        /// <param name="hasErrors">Has errors condition of run contexts to fetch (optional)</param>
        /// <param name="id">Ids of run contexts to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="previousId">When paging, this should be the last element version id returned by the previous page (optional)</param>
        /// <param name="runType">Run types of run contexts to fetch (optional)</param>
        /// <param name="startTime">Start time of run contexts to fetch (optional)</param>
        /// <param name="startTimeRange">Start time range of run contexts to fetch (optional)</param>
        /// <param name="stopType">Stop types of run contexts to fetch (optional)</param>
        /// <param name="taskId">Task ids of run contexts to fetch (optional)</param>
        /// <returns>Task of RunContext</returns>
        System.Threading.Tasks.Task<RunContext> GetRunContextsLatestAsync (List<string> endTime = null, string endTimeRange = null, string hasErrors = null, List<string> id = null, string pageLimit = null, string previousId = null, List<string> runType = null, List<string> startTime = null, string startTimeRange = null, List<string> stopType = null, List<string> taskId = null);

        /// <summary>
        /// Get latest status for rule based task runs (since 1.13)
        /// </summary>
        /// <remarks>
        /// Returns a list of the latest task run status record for each rule based task
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endTime">End time of run contexts to fetch (optional)</param>
        /// <param name="endTimeRange">End time range of run contexts to fetch (optional)</param>
        /// <param name="hasErrors">Has errors condition of run contexts to fetch (optional)</param>
        /// <param name="id">Ids of run contexts to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="previousId">When paging, this should be the last element version id returned by the previous page (optional)</param>
        /// <param name="runType">Run types of run contexts to fetch (optional)</param>
        /// <param name="startTime">Start time of run contexts to fetch (optional)</param>
        /// <param name="startTimeRange">Start time range of run contexts to fetch (optional)</param>
        /// <param name="stopType">Stop types of run contexts to fetch (optional)</param>
        /// <param name="taskId">Task ids of run contexts to fetch (optional)</param>
        /// <returns>Task of ApiResponse (RunContext)</returns>
        System.Threading.Tasks.Task<ApiResponse<RunContext>> GetRunContextsLatestAsyncWithHttpInfo (List<string> endTime = null, string endTimeRange = null, string hasErrors = null, List<string> id = null, string pageLimit = null, string previousId = null, List<string> runType = null, List<string> startTime = null, string startTimeRange = null, List<string> stopType = null, List<string> taskId = null);
        /// <summary>
        /// Get nodes targeted by this task (since 1.11)
        /// </summary>
        /// <remarks>
        /// Returns nodes scoped to this task that at least one rule in the task is able to target
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task to get</param>
        /// <returns>Task of Node</returns>
        System.Threading.Tasks.Task<Node> GetTargetableNodesAsync (string rkTaskId);

        /// <summary>
        /// Get nodes targeted by this task (since 1.11)
        /// </summary>
        /// <remarks>
        /// Returns nodes scoped to this task that at least one rule in the task is able to target
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task to get</param>
        /// <returns>Task of ApiResponse (Node)</returns>
        System.Threading.Tasks.Task<ApiResponse<Node>> GetTargetableNodesAsyncWithHttpInfo (string rkTaskId);
        /// <summary>
        /// Get task details by ID (since 1.6)
        /// </summary>
        /// <remarks>
        /// Returns the details of a single task
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task to get</param>
        /// <returns>Task of Task</returns>
        System.Threading.Tasks.Task<Task> GetTaskByIdAsync (string rkTaskId);

        /// <summary>
        /// Get task details by ID (since 1.6)
        /// </summary>
        /// <remarks>
        /// Returns the details of a single task
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task to get</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        System.Threading.Tasks.Task<ApiResponse<Task>> GetTaskByIdAsyncWithHttpInfo (string rkTaskId);
        /// <summary>
        /// Get a list of tasks (since 1.6)
        /// </summary>
        /// <remarks>
        /// Returns a list of all tasks, or only those tasks that match the provided filter criteria. Search filters are supported for all fields except schedule. The task list is returned ordered by name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actionIds">Ids of actions to execute for tasks to fetch (optional)</param>
        /// <param name="additionalEmailAddresses">Email addresses that will receive reports from tasks to fetch (optional)</param>
        /// <param name="archiveAuditEvents">Audit events exceeding retention age option of tasks to fetch (optional)</param>
        /// <param name="archiveLogsExceeding">Number of maximum log messages to retain of tasks to fetch (optional)</param>
        /// <param name="archiveLogsOlderThan">Number of days to retain latests logs of tasks to fetch (optional)</param>
        /// <param name="archiveReports">Archive report option of tasks to fetch (optional)</param>
        /// <param name="compactVersionsExceeding">Maximum latests element versions to reatain of tasks to fetch (optional)</param>
        /// <param name="compactVersionsOlderThan">Days to ratain element versions of tasks to fetch (optional)</param>
        /// <param name="description">Description of tasks to fetch (optional)</param>
        /// <param name="emailServer">Name of email server for sending reports from tasks to fetch (optional)</param>
        /// <param name="enabled">Fetch only tasks that are enabled or disabled (optional)</param>
        /// <param name="id">Ids of tasks to fetch (optional)</param>
        /// <param name="ignoreEmptyReports">Ignore empty reports option of tasks to fetch (optional)</param>
        /// <param name="lastDuration">Last duration of execution of tasks to fetch (optional)</param>
        /// <param name="lastStart">Last start of execution of tasks to fetch (optional)</param>
        /// <param name="name">Name of tasks to fetch (optional)</param>
        /// <param name="newBaselinesOnly">New baseline element versions creation restriction option of tasks to fetch (optional)</param>
        /// <param name="nextStart">Next start for execution of tasks to fetch (optional)</param>
        /// <param name="nodeId">Node or node group ids in scope of tasks to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="reportFormat">Report format used for tasks to fetch (optional)</param>
        /// <param name="reportId">Ids of reports to execute for tasks to fetch (optional)</param>
        /// <param name="reportUserIds">Ids of users who will receive reports from tasks to fetch (optional)</param>
        /// <param name="ruleId">Rule or rule group ids in scope of tasks to fetch (optional)</param>
        /// <param name="status">Statuses of tasks to fetch (optional)</param>
        /// <param name="subDescription">Substring matching for description of tasks to fetch (optional)</param>
        /// <param name="timeout">Hour timeout of tasks to fetch (optional)</param>
        /// <param name="type">Type of tasks to fetch (optional)</param>
        /// <param name="userId">Ids of users of tasks to fetch (optional)</param>
        /// <returns>Task of Task</returns>
        System.Threading.Tasks.Task<Task> GetTasksAsync (List<string> actionIds = null, List<string> additionalEmailAddresses = null, bool? archiveAuditEvents = null, List<string> archiveLogsExceeding = null, List<string> archiveLogsOlderThan = null, bool? archiveReports = null, List<string> compactVersionsExceeding = null, List<string> compactVersionsOlderThan = null, List<string> description = null, List<string> emailServer = null, bool? enabled = null, List<string> id = null, bool? ignoreEmptyReports = null, List<string> lastDuration = null, List<string> lastStart = null, List<string> name = null, bool? newBaselinesOnly = null, List<string> nextStart = null, List<string> nodeId = null, string pageLimit = null, string pageStart = null, List<string> reportFormat = null, List<string> reportId = null, List<string> reportUserIds = null, List<string> ruleId = null, List<string> status = null, List<string> subDescription = null, List<string> timeout = null, List<string> type = null, List<string> userId = null);

        /// <summary>
        /// Get a list of tasks (since 1.6)
        /// </summary>
        /// <remarks>
        /// Returns a list of all tasks, or only those tasks that match the provided filter criteria. Search filters are supported for all fields except schedule. The task list is returned ordered by name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actionIds">Ids of actions to execute for tasks to fetch (optional)</param>
        /// <param name="additionalEmailAddresses">Email addresses that will receive reports from tasks to fetch (optional)</param>
        /// <param name="archiveAuditEvents">Audit events exceeding retention age option of tasks to fetch (optional)</param>
        /// <param name="archiveLogsExceeding">Number of maximum log messages to retain of tasks to fetch (optional)</param>
        /// <param name="archiveLogsOlderThan">Number of days to retain latests logs of tasks to fetch (optional)</param>
        /// <param name="archiveReports">Archive report option of tasks to fetch (optional)</param>
        /// <param name="compactVersionsExceeding">Maximum latests element versions to reatain of tasks to fetch (optional)</param>
        /// <param name="compactVersionsOlderThan">Days to ratain element versions of tasks to fetch (optional)</param>
        /// <param name="description">Description of tasks to fetch (optional)</param>
        /// <param name="emailServer">Name of email server for sending reports from tasks to fetch (optional)</param>
        /// <param name="enabled">Fetch only tasks that are enabled or disabled (optional)</param>
        /// <param name="id">Ids of tasks to fetch (optional)</param>
        /// <param name="ignoreEmptyReports">Ignore empty reports option of tasks to fetch (optional)</param>
        /// <param name="lastDuration">Last duration of execution of tasks to fetch (optional)</param>
        /// <param name="lastStart">Last start of execution of tasks to fetch (optional)</param>
        /// <param name="name">Name of tasks to fetch (optional)</param>
        /// <param name="newBaselinesOnly">New baseline element versions creation restriction option of tasks to fetch (optional)</param>
        /// <param name="nextStart">Next start for execution of tasks to fetch (optional)</param>
        /// <param name="nodeId">Node or node group ids in scope of tasks to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="reportFormat">Report format used for tasks to fetch (optional)</param>
        /// <param name="reportId">Ids of reports to execute for tasks to fetch (optional)</param>
        /// <param name="reportUserIds">Ids of users who will receive reports from tasks to fetch (optional)</param>
        /// <param name="ruleId">Rule or rule group ids in scope of tasks to fetch (optional)</param>
        /// <param name="status">Statuses of tasks to fetch (optional)</param>
        /// <param name="subDescription">Substring matching for description of tasks to fetch (optional)</param>
        /// <param name="timeout">Hour timeout of tasks to fetch (optional)</param>
        /// <param name="type">Type of tasks to fetch (optional)</param>
        /// <param name="userId">Ids of users of tasks to fetch (optional)</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        System.Threading.Tasks.Task<ApiResponse<Task>> GetTasksAsyncWithHttpInfo (List<string> actionIds = null, List<string> additionalEmailAddresses = null, bool? archiveAuditEvents = null, List<string> archiveLogsExceeding = null, List<string> archiveLogsOlderThan = null, bool? archiveReports = null, List<string> compactVersionsExceeding = null, List<string> compactVersionsOlderThan = null, List<string> description = null, List<string> emailServer = null, bool? enabled = null, List<string> id = null, bool? ignoreEmptyReports = null, List<string> lastDuration = null, List<string> lastStart = null, List<string> name = null, bool? newBaselinesOnly = null, List<string> nextStart = null, List<string> nodeId = null, string pageLimit = null, string pageStart = null, List<string> reportFormat = null, List<string> reportId = null, List<string> reportUserIds = null, List<string> ruleId = null, List<string> status = null, List<string> subDescription = null, List<string> timeout = null, List<string> type = null, List<string> userId = null);
        /// <summary>
        /// Put an update to an existing task (since 1.6)
        /// </summary>
        /// <remarks>
        /// Updates an existing task, ignoring the following read-only fields: type, status, lastStart, lastDuration, and nextStart. You may not rename to the same name as another task.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task to be updated</param>
        /// <param name="task">Task description to update the existing task</param>
        /// <returns>Task of Task</returns>
        System.Threading.Tasks.Task<Task> UpdateTaskAsync (string rkTaskId, Task task);

        /// <summary>
        /// Put an update to an existing task (since 1.6)
        /// </summary>
        /// <remarks>
        /// Updates an existing task, ignoring the following read-only fields: type, status, lastStart, lastDuration, and nextStart. You may not rename to the same name as another task.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task to be updated</param>
        /// <param name="task">Task description to update the existing task</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        System.Threading.Tasks.Task<ApiResponse<Task>> UpdateTaskAsyncWithHttpInfo (string rkTaskId, Task task);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TasksApi : ITasksApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TasksApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TasksApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Post a request to execute a task (since 1.6) Request to run a task. The task must be idle or the request will be rejected. Status of the request may be checked with a call to GET /api/v1/tasks/executeTaskRequests/{requestId} using the ID returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A request for to perform the execution of a Task</param>
        /// <returns>ExecuteTaskRequestCommand</returns>
        public ExecuteTaskRequestCommand CreateExecuteTaskRequest (ExecuteTaskRequestCommand body)
        {
             ApiResponse<ExecuteTaskRequestCommand> localVarResponse = CreateExecuteTaskRequestWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post a request to execute a task (since 1.6) Request to run a task. The task must be idle or the request will be rejected. Status of the request may be checked with a call to GET /api/v1/tasks/executeTaskRequests/{requestId} using the ID returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A request for to perform the execution of a Task</param>
        /// <returns>ApiResponse of ExecuteTaskRequestCommand</returns>
        public ApiResponse< ExecuteTaskRequestCommand > CreateExecuteTaskRequestWithHttpInfo (ExecuteTaskRequestCommand body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TasksApi->CreateExecuteTaskRequest");

            var localVarPath = "/tasks/executeTaskRequests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateExecuteTaskRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExecuteTaskRequestCommand>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExecuteTaskRequestCommand) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExecuteTaskRequestCommand)));
        }

        /// <summary>
        /// Post a request to execute a task (since 1.6) Request to run a task. The task must be idle or the request will be rejected. Status of the request may be checked with a call to GET /api/v1/tasks/executeTaskRequests/{requestId} using the ID returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A request for to perform the execution of a Task</param>
        /// <returns>Task of ExecuteTaskRequestCommand</returns>
        public async System.Threading.Tasks.Task<ExecuteTaskRequestCommand> CreateExecuteTaskRequestAsync (ExecuteTaskRequestCommand body)
        {
             ApiResponse<ExecuteTaskRequestCommand> localVarResponse = await CreateExecuteTaskRequestAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post a request to execute a task (since 1.6) Request to run a task. The task must be idle or the request will be rejected. Status of the request may be checked with a call to GET /api/v1/tasks/executeTaskRequests/{requestId} using the ID returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A request for to perform the execution of a Task</param>
        /// <returns>Task of ApiResponse (ExecuteTaskRequestCommand)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExecuteTaskRequestCommand>> CreateExecuteTaskRequestAsyncWithHttpInfo (ExecuteTaskRequestCommand body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TasksApi->CreateExecuteTaskRequest");

            var localVarPath = "/tasks/executeTaskRequests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateExecuteTaskRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExecuteTaskRequestCommand>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExecuteTaskRequestCommand) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExecuteTaskRequestCommand)));
        }

        /// <summary>
        /// Post a new task (since 1.6) Creates a new task in the root task group. 3 task types can be created: Check Rule Task, Baseline Rule Task, and Report Task.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task to be created in TE</param>
        /// <returns>Task</returns>
        public Task CreateTask (Task body)
        {
             ApiResponse<Task> localVarResponse = CreateTaskWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post a new task (since 1.6) Creates a new task in the root task group. 3 task types can be created: Check Rule Task, Baseline Rule Task, and Report Task.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task to be created in TE</param>
        /// <returns>ApiResponse of Task</returns>
        public ApiResponse< Task > CreateTaskWithHttpInfo (Task body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TasksApi->CreateTask");

            var localVarPath = "/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Task>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Task) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Task)));
        }

        /// <summary>
        /// Post a new task (since 1.6) Creates a new task in the root task group. 3 task types can be created: Check Rule Task, Baseline Rule Task, and Report Task.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task to be created in TE</param>
        /// <returns>Task of Task</returns>
        public async System.Threading.Tasks.Task<Task> CreateTaskAsync (Task body)
        {
             ApiResponse<Task> localVarResponse = await CreateTaskAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post a new task (since 1.6) Creates a new task in the root task group. 3 task types can be created: Check Rule Task, Baseline Rule Task, and Report Task.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Task to be created in TE</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Task>> CreateTaskAsyncWithHttpInfo (Task body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TasksApi->CreateTask");

            var localVarPath = "/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Task>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Task) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Task)));
        }

        /// <summary>
        /// Delete a task (since 1.6) Remove a task from the TE system. The task must be idle at the time of deletion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task to delete</param>
        /// <returns></returns>
        public void DeleteTask (string rkTaskId)
        {
             DeleteTaskWithHttpInfo(rkTaskId);
        }

        /// <summary>
        /// Delete a task (since 1.6) Remove a task from the TE system. The task must be idle at the time of deletion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTaskWithHttpInfo (string rkTaskId)
        {
            // verify the required parameter 'rkTaskId' is set
            if (rkTaskId == null)
                throw new ApiException(400, "Missing required parameter 'rkTaskId' when calling TasksApi->DeleteTask");

            var localVarPath = "/tasks/{rkTaskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkTaskId != null) localVarPathParams.Add("rkTaskId", this.Configuration.ApiClient.ParameterToString(rkTaskId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a task (since 1.6) Remove a task from the TE system. The task must be idle at the time of deletion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTaskAsync (string rkTaskId)
        {
             await DeleteTaskAsyncWithHttpInfo(rkTaskId);

        }

        /// <summary>
        /// Delete a task (since 1.6) Remove a task from the TE system. The task must be idle at the time of deletion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaskAsyncWithHttpInfo (string rkTaskId)
        {
            // verify the required parameter 'rkTaskId' is set
            if (rkTaskId == null)
                throw new ApiException(400, "Missing required parameter 'rkTaskId' when calling TasksApi->DeleteTask");

            var localVarPath = "/tasks/{rkTaskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkTaskId != null) localVarPathParams.Add("rkTaskId", this.Configuration.ApiClient.ParameterToString(rkTaskId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get Task Execution Request details by ID (since 1.6) Returns the details of a single Task Execution Request
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of Task Execution Request to get</param>
        /// <returns>ExecuteTaskRequestCommand</returns>
        public ExecuteTaskRequestCommand GetExecutionTaskRequestById (string requestId)
        {
             ApiResponse<ExecuteTaskRequestCommand> localVarResponse = GetExecutionTaskRequestByIdWithHttpInfo(requestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Task Execution Request details by ID (since 1.6) Returns the details of a single Task Execution Request
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of Task Execution Request to get</param>
        /// <returns>ApiResponse of ExecuteTaskRequestCommand</returns>
        public ApiResponse< ExecuteTaskRequestCommand > GetExecutionTaskRequestByIdWithHttpInfo (string requestId)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling TasksApi->GetExecutionTaskRequestById");

            var localVarPath = "/tasks/executeTaskRequests/{requestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarPathParams.Add("requestId", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExecutionTaskRequestById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExecuteTaskRequestCommand>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExecuteTaskRequestCommand) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExecuteTaskRequestCommand)));
        }

        /// <summary>
        /// Get Task Execution Request details by ID (since 1.6) Returns the details of a single Task Execution Request
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of Task Execution Request to get</param>
        /// <returns>Task of ExecuteTaskRequestCommand</returns>
        public async System.Threading.Tasks.Task<ExecuteTaskRequestCommand> GetExecutionTaskRequestByIdAsync (string requestId)
        {
             ApiResponse<ExecuteTaskRequestCommand> localVarResponse = await GetExecutionTaskRequestByIdAsyncWithHttpInfo(requestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Task Execution Request details by ID (since 1.6) Returns the details of a single Task Execution Request
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">ID of Task Execution Request to get</param>
        /// <returns>Task of ApiResponse (ExecuteTaskRequestCommand)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExecuteTaskRequestCommand>> GetExecutionTaskRequestByIdAsyncWithHttpInfo (string requestId)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling TasksApi->GetExecutionTaskRequestById");

            var localVarPath = "/tasks/executeTaskRequests/{requestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarPathParams.Add("requestId", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExecutionTaskRequestById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExecuteTaskRequestCommand>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExecuteTaskRequestCommand) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExecuteTaskRequestCommand)));
        }

        /// <summary>
        /// Get the set of node execution status details for a task (since 1.13) Returns the latest info for each node covered by the task.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task</param>
        /// <returns>NodeStatus</returns>
        public NodeStatus GetNodeStatus (string rkTaskId)
        {
             ApiResponse<NodeStatus> localVarResponse = GetNodeStatusWithHttpInfo(rkTaskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the set of node execution status details for a task (since 1.13) Returns the latest info for each node covered by the task.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task</param>
        /// <returns>ApiResponse of NodeStatus</returns>
        public ApiResponse< NodeStatus > GetNodeStatusWithHttpInfo (string rkTaskId)
        {
            // verify the required parameter 'rkTaskId' is set
            if (rkTaskId == null)
                throw new ApiException(400, "Missing required parameter 'rkTaskId' when calling TasksApi->GetNodeStatus");

            var localVarPath = "/tasks/{rkTaskId}/nodeStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkTaskId != null) localVarPathParams.Add("rkTaskId", this.Configuration.ApiClient.ParameterToString(rkTaskId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNodeStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NodeStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeStatus)));
        }

        /// <summary>
        /// Get the set of node execution status details for a task (since 1.13) Returns the latest info for each node covered by the task.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task</param>
        /// <returns>Task of NodeStatus</returns>
        public async System.Threading.Tasks.Task<NodeStatus> GetNodeStatusAsync (string rkTaskId)
        {
             ApiResponse<NodeStatus> localVarResponse = await GetNodeStatusAsyncWithHttpInfo(rkTaskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the set of node execution status details for a task (since 1.13) Returns the latest info for each node covered by the task.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task</param>
        /// <returns>Task of ApiResponse (NodeStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NodeStatus>> GetNodeStatusAsyncWithHttpInfo (string rkTaskId)
        {
            // verify the required parameter 'rkTaskId' is set
            if (rkTaskId == null)
                throw new ApiException(400, "Missing required parameter 'rkTaskId' when calling TasksApi->GetNodeStatus");

            var localVarPath = "/tasks/{rkTaskId}/nodeStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkTaskId != null) localVarPathParams.Add("rkTaskId", this.Configuration.ApiClient.ParameterToString(rkTaskId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNodeStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NodeStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeStatus)));
        }

        /// <summary>
        /// Get status for node rule pair execution (since 1.13) Returns a list of all rule run node rule pair status records
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contextId">Ids of run context node rules to fetch (optional)</param>
        /// <param name="endTime">End time of run contexts node rules to fetch (optional)</param>
        /// <param name="endTimeRange">End time range of run contexts node rules to fetch (optional)</param>
        /// <param name="hasErrors">Has errors condition of run contexts node rules to fetch (optional)</param>
        /// <param name="hasTimeout">Has timeout condition of run contexts node rules to fetch (optional)</param>
        /// <param name="lastUpdated">Last update time of run contexts node rules to fetch (optional)</param>
        /// <param name="lastUpdatedRange">Last update time range of run contexts node rules to fetch (optional)</param>
        /// <param name="nodeId">Ids of nodes of run context node rules to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="receivedEnd">Task ids of run contexts node rules to fetch (optional)</param>
        /// <param name="ruleId">Ids of rules of run context node rules to fetch (optional)</param>
        /// <param name="runType">Run types of run contexts node rules to fetch (optional)</param>
        /// <param name="startTime">Start time of run contexts node rules to fetch (optional)</param>
        /// <param name="startTimeRange">Start time range of run contexts node rules to fetch (optional)</param>
        /// <param name="wasCancelled">Task ids of run contexts node rules to fetch (optional)</param>
        /// <returns>RunContextNodeRule</returns>
        public RunContextNodeRule GetRunContextNodeRules (List<string> contextId = null, List<string> endTime = null, string endTimeRange = null, string hasErrors = null, string hasTimeout = null, List<string> lastUpdated = null, string lastUpdatedRange = null, List<string> nodeId = null, string pageLimit = null, string pageStart = null, string receivedEnd = null, List<string> ruleId = null, List<string> runType = null, List<string> startTime = null, string startTimeRange = null, string wasCancelled = null)
        {
             ApiResponse<RunContextNodeRule> localVarResponse = GetRunContextNodeRulesWithHttpInfo(contextId, endTime, endTimeRange, hasErrors, hasTimeout, lastUpdated, lastUpdatedRange, nodeId, pageLimit, pageStart, receivedEnd, ruleId, runType, startTime, startTimeRange, wasCancelled);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get status for node rule pair execution (since 1.13) Returns a list of all rule run node rule pair status records
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contextId">Ids of run context node rules to fetch (optional)</param>
        /// <param name="endTime">End time of run contexts node rules to fetch (optional)</param>
        /// <param name="endTimeRange">End time range of run contexts node rules to fetch (optional)</param>
        /// <param name="hasErrors">Has errors condition of run contexts node rules to fetch (optional)</param>
        /// <param name="hasTimeout">Has timeout condition of run contexts node rules to fetch (optional)</param>
        /// <param name="lastUpdated">Last update time of run contexts node rules to fetch (optional)</param>
        /// <param name="lastUpdatedRange">Last update time range of run contexts node rules to fetch (optional)</param>
        /// <param name="nodeId">Ids of nodes of run context node rules to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="receivedEnd">Task ids of run contexts node rules to fetch (optional)</param>
        /// <param name="ruleId">Ids of rules of run context node rules to fetch (optional)</param>
        /// <param name="runType">Run types of run contexts node rules to fetch (optional)</param>
        /// <param name="startTime">Start time of run contexts node rules to fetch (optional)</param>
        /// <param name="startTimeRange">Start time range of run contexts node rules to fetch (optional)</param>
        /// <param name="wasCancelled">Task ids of run contexts node rules to fetch (optional)</param>
        /// <returns>ApiResponse of RunContextNodeRule</returns>
        public ApiResponse< RunContextNodeRule > GetRunContextNodeRulesWithHttpInfo (List<string> contextId = null, List<string> endTime = null, string endTimeRange = null, string hasErrors = null, string hasTimeout = null, List<string> lastUpdated = null, string lastUpdatedRange = null, List<string> nodeId = null, string pageLimit = null, string pageStart = null, string receivedEnd = null, List<string> ruleId = null, List<string> runType = null, List<string> startTime = null, string startTimeRange = null, string wasCancelled = null)
        {

            var localVarPath = "/tasks/runContextNodeRules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contextId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "contextId", contextId)); // query parameter
            if (endTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "endTime", endTime)); // query parameter
            if (endTimeRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTimeRange", endTimeRange)); // query parameter
            if (hasErrors != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hasErrors", hasErrors)); // query parameter
            if (hasTimeout != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hasTimeout", hasTimeout)); // query parameter
            if (lastUpdated != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "lastUpdated", lastUpdated)); // query parameter
            if (lastUpdatedRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastUpdatedRange", lastUpdatedRange)); // query parameter
            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "nodeId", nodeId)); // query parameter
            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageLimit", pageLimit)); // query parameter
            if (pageStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageStart", pageStart)); // query parameter
            if (receivedEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "receivedEnd", receivedEnd)); // query parameter
            if (ruleId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ruleId", ruleId)); // query parameter
            if (runType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "runType", runType)); // query parameter
            if (startTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "startTime", startTime)); // query parameter
            if (startTimeRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeRange", startTimeRange)); // query parameter
            if (wasCancelled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "wasCancelled", wasCancelled)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRunContextNodeRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RunContextNodeRule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RunContextNodeRule) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RunContextNodeRule)));
        }

        /// <summary>
        /// Get status for node rule pair execution (since 1.13) Returns a list of all rule run node rule pair status records
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contextId">Ids of run context node rules to fetch (optional)</param>
        /// <param name="endTime">End time of run contexts node rules to fetch (optional)</param>
        /// <param name="endTimeRange">End time range of run contexts node rules to fetch (optional)</param>
        /// <param name="hasErrors">Has errors condition of run contexts node rules to fetch (optional)</param>
        /// <param name="hasTimeout">Has timeout condition of run contexts node rules to fetch (optional)</param>
        /// <param name="lastUpdated">Last update time of run contexts node rules to fetch (optional)</param>
        /// <param name="lastUpdatedRange">Last update time range of run contexts node rules to fetch (optional)</param>
        /// <param name="nodeId">Ids of nodes of run context node rules to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="receivedEnd">Task ids of run contexts node rules to fetch (optional)</param>
        /// <param name="ruleId">Ids of rules of run context node rules to fetch (optional)</param>
        /// <param name="runType">Run types of run contexts node rules to fetch (optional)</param>
        /// <param name="startTime">Start time of run contexts node rules to fetch (optional)</param>
        /// <param name="startTimeRange">Start time range of run contexts node rules to fetch (optional)</param>
        /// <param name="wasCancelled">Task ids of run contexts node rules to fetch (optional)</param>
        /// <returns>Task of RunContextNodeRule</returns>
        public async System.Threading.Tasks.Task<RunContextNodeRule> GetRunContextNodeRulesAsync (List<string> contextId = null, List<string> endTime = null, string endTimeRange = null, string hasErrors = null, string hasTimeout = null, List<string> lastUpdated = null, string lastUpdatedRange = null, List<string> nodeId = null, string pageLimit = null, string pageStart = null, string receivedEnd = null, List<string> ruleId = null, List<string> runType = null, List<string> startTime = null, string startTimeRange = null, string wasCancelled = null)
        {
             ApiResponse<RunContextNodeRule> localVarResponse = await GetRunContextNodeRulesAsyncWithHttpInfo(contextId, endTime, endTimeRange, hasErrors, hasTimeout, lastUpdated, lastUpdatedRange, nodeId, pageLimit, pageStart, receivedEnd, ruleId, runType, startTime, startTimeRange, wasCancelled);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get status for node rule pair execution (since 1.13) Returns a list of all rule run node rule pair status records
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contextId">Ids of run context node rules to fetch (optional)</param>
        /// <param name="endTime">End time of run contexts node rules to fetch (optional)</param>
        /// <param name="endTimeRange">End time range of run contexts node rules to fetch (optional)</param>
        /// <param name="hasErrors">Has errors condition of run contexts node rules to fetch (optional)</param>
        /// <param name="hasTimeout">Has timeout condition of run contexts node rules to fetch (optional)</param>
        /// <param name="lastUpdated">Last update time of run contexts node rules to fetch (optional)</param>
        /// <param name="lastUpdatedRange">Last update time range of run contexts node rules to fetch (optional)</param>
        /// <param name="nodeId">Ids of nodes of run context node rules to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="receivedEnd">Task ids of run contexts node rules to fetch (optional)</param>
        /// <param name="ruleId">Ids of rules of run context node rules to fetch (optional)</param>
        /// <param name="runType">Run types of run contexts node rules to fetch (optional)</param>
        /// <param name="startTime">Start time of run contexts node rules to fetch (optional)</param>
        /// <param name="startTimeRange">Start time range of run contexts node rules to fetch (optional)</param>
        /// <param name="wasCancelled">Task ids of run contexts node rules to fetch (optional)</param>
        /// <returns>Task of ApiResponse (RunContextNodeRule)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RunContextNodeRule>> GetRunContextNodeRulesAsyncWithHttpInfo (List<string> contextId = null, List<string> endTime = null, string endTimeRange = null, string hasErrors = null, string hasTimeout = null, List<string> lastUpdated = null, string lastUpdatedRange = null, List<string> nodeId = null, string pageLimit = null, string pageStart = null, string receivedEnd = null, List<string> ruleId = null, List<string> runType = null, List<string> startTime = null, string startTimeRange = null, string wasCancelled = null)
        {

            var localVarPath = "/tasks/runContextNodeRules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contextId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "contextId", contextId)); // query parameter
            if (endTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "endTime", endTime)); // query parameter
            if (endTimeRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTimeRange", endTimeRange)); // query parameter
            if (hasErrors != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hasErrors", hasErrors)); // query parameter
            if (hasTimeout != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hasTimeout", hasTimeout)); // query parameter
            if (lastUpdated != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "lastUpdated", lastUpdated)); // query parameter
            if (lastUpdatedRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastUpdatedRange", lastUpdatedRange)); // query parameter
            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "nodeId", nodeId)); // query parameter
            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageLimit", pageLimit)); // query parameter
            if (pageStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageStart", pageStart)); // query parameter
            if (receivedEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "receivedEnd", receivedEnd)); // query parameter
            if (ruleId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ruleId", ruleId)); // query parameter
            if (runType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "runType", runType)); // query parameter
            if (startTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "startTime", startTime)); // query parameter
            if (startTimeRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeRange", startTimeRange)); // query parameter
            if (wasCancelled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "wasCancelled", wasCancelled)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRunContextNodeRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RunContextNodeRule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RunContextNodeRule) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RunContextNodeRule)));
        }

        /// <summary>
        /// Get most recent status by task for node rule pair execution (since 1.13) Returns a list the rule run node rule pair status for the latest run context of each task
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contextId">Ids of run context node rules to fetch (optional)</param>
        /// <param name="endTime">End time of run contexts node rules to fetch (optional)</param>
        /// <param name="endTimeRange">End time range of run contexts node rules to fetch (optional)</param>
        /// <param name="hasErrors">Has errors condition of run contexts node rules to fetch (optional)</param>
        /// <param name="hasTimeout">Has timeout condition of run contexts node rules to fetch (optional)</param>
        /// <param name="lastUpdated">Last update time of run contexts node rules to fetch (optional)</param>
        /// <param name="lastUpdatedRange">Last update time range of run contexts node rules to fetch (optional)</param>
        /// <param name="nodeId">Ids of nodes of run context node rules to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="receivedEnd">Task ids of run contexts node rules to fetch (optional)</param>
        /// <param name="ruleId">Ids of rules of run context node rules to fetch (optional)</param>
        /// <param name="runType">Run types of run contexts node rules to fetch (optional)</param>
        /// <param name="startTime">Start time of run contexts node rules to fetch (optional)</param>
        /// <param name="startTimeRange">Start time range of run contexts node rules to fetch (optional)</param>
        /// <param name="wasCancelled">Task ids of run contexts node rules to fetch (optional)</param>
        /// <returns>RunContextNodeRule</returns>
        public RunContextNodeRule GetRunContextNodeRulesLatest (List<string> contextId = null, List<string> endTime = null, string endTimeRange = null, string hasErrors = null, string hasTimeout = null, List<string> lastUpdated = null, string lastUpdatedRange = null, List<string> nodeId = null, string pageLimit = null, string pageStart = null, string receivedEnd = null, List<string> ruleId = null, List<string> runType = null, List<string> startTime = null, string startTimeRange = null, string wasCancelled = null)
        {
             ApiResponse<RunContextNodeRule> localVarResponse = GetRunContextNodeRulesLatestWithHttpInfo(contextId, endTime, endTimeRange, hasErrors, hasTimeout, lastUpdated, lastUpdatedRange, nodeId, pageLimit, pageStart, receivedEnd, ruleId, runType, startTime, startTimeRange, wasCancelled);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get most recent status by task for node rule pair execution (since 1.13) Returns a list the rule run node rule pair status for the latest run context of each task
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contextId">Ids of run context node rules to fetch (optional)</param>
        /// <param name="endTime">End time of run contexts node rules to fetch (optional)</param>
        /// <param name="endTimeRange">End time range of run contexts node rules to fetch (optional)</param>
        /// <param name="hasErrors">Has errors condition of run contexts node rules to fetch (optional)</param>
        /// <param name="hasTimeout">Has timeout condition of run contexts node rules to fetch (optional)</param>
        /// <param name="lastUpdated">Last update time of run contexts node rules to fetch (optional)</param>
        /// <param name="lastUpdatedRange">Last update time range of run contexts node rules to fetch (optional)</param>
        /// <param name="nodeId">Ids of nodes of run context node rules to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="receivedEnd">Task ids of run contexts node rules to fetch (optional)</param>
        /// <param name="ruleId">Ids of rules of run context node rules to fetch (optional)</param>
        /// <param name="runType">Run types of run contexts node rules to fetch (optional)</param>
        /// <param name="startTime">Start time of run contexts node rules to fetch (optional)</param>
        /// <param name="startTimeRange">Start time range of run contexts node rules to fetch (optional)</param>
        /// <param name="wasCancelled">Task ids of run contexts node rules to fetch (optional)</param>
        /// <returns>ApiResponse of RunContextNodeRule</returns>
        public ApiResponse< RunContextNodeRule > GetRunContextNodeRulesLatestWithHttpInfo (List<string> contextId = null, List<string> endTime = null, string endTimeRange = null, string hasErrors = null, string hasTimeout = null, List<string> lastUpdated = null, string lastUpdatedRange = null, List<string> nodeId = null, string pageLimit = null, string pageStart = null, string receivedEnd = null, List<string> ruleId = null, List<string> runType = null, List<string> startTime = null, string startTimeRange = null, string wasCancelled = null)
        {

            var localVarPath = "/tasks/runContextNodeRules/latest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contextId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "contextId", contextId)); // query parameter
            if (endTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "endTime", endTime)); // query parameter
            if (endTimeRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTimeRange", endTimeRange)); // query parameter
            if (hasErrors != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hasErrors", hasErrors)); // query parameter
            if (hasTimeout != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hasTimeout", hasTimeout)); // query parameter
            if (lastUpdated != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "lastUpdated", lastUpdated)); // query parameter
            if (lastUpdatedRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastUpdatedRange", lastUpdatedRange)); // query parameter
            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "nodeId", nodeId)); // query parameter
            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageLimit", pageLimit)); // query parameter
            if (pageStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageStart", pageStart)); // query parameter
            if (receivedEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "receivedEnd", receivedEnd)); // query parameter
            if (ruleId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ruleId", ruleId)); // query parameter
            if (runType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "runType", runType)); // query parameter
            if (startTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "startTime", startTime)); // query parameter
            if (startTimeRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeRange", startTimeRange)); // query parameter
            if (wasCancelled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "wasCancelled", wasCancelled)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRunContextNodeRulesLatest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RunContextNodeRule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RunContextNodeRule) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RunContextNodeRule)));
        }

        /// <summary>
        /// Get most recent status by task for node rule pair execution (since 1.13) Returns a list the rule run node rule pair status for the latest run context of each task
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contextId">Ids of run context node rules to fetch (optional)</param>
        /// <param name="endTime">End time of run contexts node rules to fetch (optional)</param>
        /// <param name="endTimeRange">End time range of run contexts node rules to fetch (optional)</param>
        /// <param name="hasErrors">Has errors condition of run contexts node rules to fetch (optional)</param>
        /// <param name="hasTimeout">Has timeout condition of run contexts node rules to fetch (optional)</param>
        /// <param name="lastUpdated">Last update time of run contexts node rules to fetch (optional)</param>
        /// <param name="lastUpdatedRange">Last update time range of run contexts node rules to fetch (optional)</param>
        /// <param name="nodeId">Ids of nodes of run context node rules to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="receivedEnd">Task ids of run contexts node rules to fetch (optional)</param>
        /// <param name="ruleId">Ids of rules of run context node rules to fetch (optional)</param>
        /// <param name="runType">Run types of run contexts node rules to fetch (optional)</param>
        /// <param name="startTime">Start time of run contexts node rules to fetch (optional)</param>
        /// <param name="startTimeRange">Start time range of run contexts node rules to fetch (optional)</param>
        /// <param name="wasCancelled">Task ids of run contexts node rules to fetch (optional)</param>
        /// <returns>Task of RunContextNodeRule</returns>
        public async System.Threading.Tasks.Task<RunContextNodeRule> GetRunContextNodeRulesLatestAsync (List<string> contextId = null, List<string> endTime = null, string endTimeRange = null, string hasErrors = null, string hasTimeout = null, List<string> lastUpdated = null, string lastUpdatedRange = null, List<string> nodeId = null, string pageLimit = null, string pageStart = null, string receivedEnd = null, List<string> ruleId = null, List<string> runType = null, List<string> startTime = null, string startTimeRange = null, string wasCancelled = null)
        {
             ApiResponse<RunContextNodeRule> localVarResponse = await GetRunContextNodeRulesLatestAsyncWithHttpInfo(contextId, endTime, endTimeRange, hasErrors, hasTimeout, lastUpdated, lastUpdatedRange, nodeId, pageLimit, pageStart, receivedEnd, ruleId, runType, startTime, startTimeRange, wasCancelled);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get most recent status by task for node rule pair execution (since 1.13) Returns a list the rule run node rule pair status for the latest run context of each task
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contextId">Ids of run context node rules to fetch (optional)</param>
        /// <param name="endTime">End time of run contexts node rules to fetch (optional)</param>
        /// <param name="endTimeRange">End time range of run contexts node rules to fetch (optional)</param>
        /// <param name="hasErrors">Has errors condition of run contexts node rules to fetch (optional)</param>
        /// <param name="hasTimeout">Has timeout condition of run contexts node rules to fetch (optional)</param>
        /// <param name="lastUpdated">Last update time of run contexts node rules to fetch (optional)</param>
        /// <param name="lastUpdatedRange">Last update time range of run contexts node rules to fetch (optional)</param>
        /// <param name="nodeId">Ids of nodes of run context node rules to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="receivedEnd">Task ids of run contexts node rules to fetch (optional)</param>
        /// <param name="ruleId">Ids of rules of run context node rules to fetch (optional)</param>
        /// <param name="runType">Run types of run contexts node rules to fetch (optional)</param>
        /// <param name="startTime">Start time of run contexts node rules to fetch (optional)</param>
        /// <param name="startTimeRange">Start time range of run contexts node rules to fetch (optional)</param>
        /// <param name="wasCancelled">Task ids of run contexts node rules to fetch (optional)</param>
        /// <returns>Task of ApiResponse (RunContextNodeRule)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RunContextNodeRule>> GetRunContextNodeRulesLatestAsyncWithHttpInfo (List<string> contextId = null, List<string> endTime = null, string endTimeRange = null, string hasErrors = null, string hasTimeout = null, List<string> lastUpdated = null, string lastUpdatedRange = null, List<string> nodeId = null, string pageLimit = null, string pageStart = null, string receivedEnd = null, List<string> ruleId = null, List<string> runType = null, List<string> startTime = null, string startTimeRange = null, string wasCancelled = null)
        {

            var localVarPath = "/tasks/runContextNodeRules/latest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contextId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "contextId", contextId)); // query parameter
            if (endTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "endTime", endTime)); // query parameter
            if (endTimeRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTimeRange", endTimeRange)); // query parameter
            if (hasErrors != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hasErrors", hasErrors)); // query parameter
            if (hasTimeout != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hasTimeout", hasTimeout)); // query parameter
            if (lastUpdated != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "lastUpdated", lastUpdated)); // query parameter
            if (lastUpdatedRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastUpdatedRange", lastUpdatedRange)); // query parameter
            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "nodeId", nodeId)); // query parameter
            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageLimit", pageLimit)); // query parameter
            if (pageStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageStart", pageStart)); // query parameter
            if (receivedEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "receivedEnd", receivedEnd)); // query parameter
            if (ruleId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ruleId", ruleId)); // query parameter
            if (runType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "runType", runType)); // query parameter
            if (startTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "startTime", startTime)); // query parameter
            if (startTimeRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeRange", startTimeRange)); // query parameter
            if (wasCancelled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "wasCancelled", wasCancelled)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRunContextNodeRulesLatest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RunContextNodeRule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RunContextNodeRule) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RunContextNodeRule)));
        }

        /// <summary>
        /// Get status for rule based task runs (since 1.13) Returns a list of task run status records
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endTime">End time of run contexts to fetch (optional)</param>
        /// <param name="endTimeRange">End time range of run contexts to fetch (optional)</param>
        /// <param name="hasErrors">Has errors condition of run contexts to fetch (optional)</param>
        /// <param name="id">Ids of run contexts to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="previousId">When paging, this should be the last element version id returned by the previous page (optional)</param>
        /// <param name="runType">Run types of run contexts to fetch (optional)</param>
        /// <param name="startTime">Start time of run contexts to fetch (optional)</param>
        /// <param name="startTimeRange">Start time range of run contexts to fetch (optional)</param>
        /// <param name="stopType">Stop types of run contexts to fetch (optional)</param>
        /// <param name="taskId">Task ids of run contexts to fetch (optional)</param>
        /// <returns>RunContext</returns>
        public RunContext GetRunContexts (List<string> endTime = null, string endTimeRange = null, string hasErrors = null, List<string> id = null, string pageLimit = null, string previousId = null, List<string> runType = null, List<string> startTime = null, string startTimeRange = null, List<string> stopType = null, List<string> taskId = null)
        {
             ApiResponse<RunContext> localVarResponse = GetRunContextsWithHttpInfo(endTime, endTimeRange, hasErrors, id, pageLimit, previousId, runType, startTime, startTimeRange, stopType, taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get status for rule based task runs (since 1.13) Returns a list of task run status records
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endTime">End time of run contexts to fetch (optional)</param>
        /// <param name="endTimeRange">End time range of run contexts to fetch (optional)</param>
        /// <param name="hasErrors">Has errors condition of run contexts to fetch (optional)</param>
        /// <param name="id">Ids of run contexts to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="previousId">When paging, this should be the last element version id returned by the previous page (optional)</param>
        /// <param name="runType">Run types of run contexts to fetch (optional)</param>
        /// <param name="startTime">Start time of run contexts to fetch (optional)</param>
        /// <param name="startTimeRange">Start time range of run contexts to fetch (optional)</param>
        /// <param name="stopType">Stop types of run contexts to fetch (optional)</param>
        /// <param name="taskId">Task ids of run contexts to fetch (optional)</param>
        /// <returns>ApiResponse of RunContext</returns>
        public ApiResponse< RunContext > GetRunContextsWithHttpInfo (List<string> endTime = null, string endTimeRange = null, string hasErrors = null, List<string> id = null, string pageLimit = null, string previousId = null, List<string> runType = null, List<string> startTime = null, string startTimeRange = null, List<string> stopType = null, List<string> taskId = null)
        {

            var localVarPath = "/tasks/runContexts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (endTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "endTime", endTime)); // query parameter
            if (endTimeRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTimeRange", endTimeRange)); // query parameter
            if (hasErrors != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hasErrors", hasErrors)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageLimit", pageLimit)); // query parameter
            if (previousId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "previousId", previousId)); // query parameter
            if (runType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "runType", runType)); // query parameter
            if (startTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "startTime", startTime)); // query parameter
            if (startTimeRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeRange", startTimeRange)); // query parameter
            if (stopType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "stopType", stopType)); // query parameter
            if (taskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "taskId", taskId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRunContexts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RunContext>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RunContext) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RunContext)));
        }

        /// <summary>
        /// Get status for rule based task runs (since 1.13) Returns a list of task run status records
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endTime">End time of run contexts to fetch (optional)</param>
        /// <param name="endTimeRange">End time range of run contexts to fetch (optional)</param>
        /// <param name="hasErrors">Has errors condition of run contexts to fetch (optional)</param>
        /// <param name="id">Ids of run contexts to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="previousId">When paging, this should be the last element version id returned by the previous page (optional)</param>
        /// <param name="runType">Run types of run contexts to fetch (optional)</param>
        /// <param name="startTime">Start time of run contexts to fetch (optional)</param>
        /// <param name="startTimeRange">Start time range of run contexts to fetch (optional)</param>
        /// <param name="stopType">Stop types of run contexts to fetch (optional)</param>
        /// <param name="taskId">Task ids of run contexts to fetch (optional)</param>
        /// <returns>Task of RunContext</returns>
        public async System.Threading.Tasks.Task<RunContext> GetRunContextsAsync (List<string> endTime = null, string endTimeRange = null, string hasErrors = null, List<string> id = null, string pageLimit = null, string previousId = null, List<string> runType = null, List<string> startTime = null, string startTimeRange = null, List<string> stopType = null, List<string> taskId = null)
        {
             ApiResponse<RunContext> localVarResponse = await GetRunContextsAsyncWithHttpInfo(endTime, endTimeRange, hasErrors, id, pageLimit, previousId, runType, startTime, startTimeRange, stopType, taskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get status for rule based task runs (since 1.13) Returns a list of task run status records
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endTime">End time of run contexts to fetch (optional)</param>
        /// <param name="endTimeRange">End time range of run contexts to fetch (optional)</param>
        /// <param name="hasErrors">Has errors condition of run contexts to fetch (optional)</param>
        /// <param name="id">Ids of run contexts to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="previousId">When paging, this should be the last element version id returned by the previous page (optional)</param>
        /// <param name="runType">Run types of run contexts to fetch (optional)</param>
        /// <param name="startTime">Start time of run contexts to fetch (optional)</param>
        /// <param name="startTimeRange">Start time range of run contexts to fetch (optional)</param>
        /// <param name="stopType">Stop types of run contexts to fetch (optional)</param>
        /// <param name="taskId">Task ids of run contexts to fetch (optional)</param>
        /// <returns>Task of ApiResponse (RunContext)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RunContext>> GetRunContextsAsyncWithHttpInfo (List<string> endTime = null, string endTimeRange = null, string hasErrors = null, List<string> id = null, string pageLimit = null, string previousId = null, List<string> runType = null, List<string> startTime = null, string startTimeRange = null, List<string> stopType = null, List<string> taskId = null)
        {

            var localVarPath = "/tasks/runContexts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (endTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "endTime", endTime)); // query parameter
            if (endTimeRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTimeRange", endTimeRange)); // query parameter
            if (hasErrors != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hasErrors", hasErrors)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageLimit", pageLimit)); // query parameter
            if (previousId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "previousId", previousId)); // query parameter
            if (runType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "runType", runType)); // query parameter
            if (startTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "startTime", startTime)); // query parameter
            if (startTimeRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeRange", startTimeRange)); // query parameter
            if (stopType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "stopType", stopType)); // query parameter
            if (taskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "taskId", taskId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRunContexts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RunContext>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RunContext) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RunContext)));
        }

        /// <summary>
        /// Get latest status for rule based task runs (since 1.13) Returns a list of the latest task run status record for each rule based task
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endTime">End time of run contexts to fetch (optional)</param>
        /// <param name="endTimeRange">End time range of run contexts to fetch (optional)</param>
        /// <param name="hasErrors">Has errors condition of run contexts to fetch (optional)</param>
        /// <param name="id">Ids of run contexts to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="previousId">When paging, this should be the last element version id returned by the previous page (optional)</param>
        /// <param name="runType">Run types of run contexts to fetch (optional)</param>
        /// <param name="startTime">Start time of run contexts to fetch (optional)</param>
        /// <param name="startTimeRange">Start time range of run contexts to fetch (optional)</param>
        /// <param name="stopType">Stop types of run contexts to fetch (optional)</param>
        /// <param name="taskId">Task ids of run contexts to fetch (optional)</param>
        /// <returns>RunContext</returns>
        public RunContext GetRunContextsLatest (List<string> endTime = null, string endTimeRange = null, string hasErrors = null, List<string> id = null, string pageLimit = null, string previousId = null, List<string> runType = null, List<string> startTime = null, string startTimeRange = null, List<string> stopType = null, List<string> taskId = null)
        {
             ApiResponse<RunContext> localVarResponse = GetRunContextsLatestWithHttpInfo(endTime, endTimeRange, hasErrors, id, pageLimit, previousId, runType, startTime, startTimeRange, stopType, taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get latest status for rule based task runs (since 1.13) Returns a list of the latest task run status record for each rule based task
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endTime">End time of run contexts to fetch (optional)</param>
        /// <param name="endTimeRange">End time range of run contexts to fetch (optional)</param>
        /// <param name="hasErrors">Has errors condition of run contexts to fetch (optional)</param>
        /// <param name="id">Ids of run contexts to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="previousId">When paging, this should be the last element version id returned by the previous page (optional)</param>
        /// <param name="runType">Run types of run contexts to fetch (optional)</param>
        /// <param name="startTime">Start time of run contexts to fetch (optional)</param>
        /// <param name="startTimeRange">Start time range of run contexts to fetch (optional)</param>
        /// <param name="stopType">Stop types of run contexts to fetch (optional)</param>
        /// <param name="taskId">Task ids of run contexts to fetch (optional)</param>
        /// <returns>ApiResponse of RunContext</returns>
        public ApiResponse< RunContext > GetRunContextsLatestWithHttpInfo (List<string> endTime = null, string endTimeRange = null, string hasErrors = null, List<string> id = null, string pageLimit = null, string previousId = null, List<string> runType = null, List<string> startTime = null, string startTimeRange = null, List<string> stopType = null, List<string> taskId = null)
        {

            var localVarPath = "/tasks/runContexts/latest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (endTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "endTime", endTime)); // query parameter
            if (endTimeRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTimeRange", endTimeRange)); // query parameter
            if (hasErrors != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hasErrors", hasErrors)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageLimit", pageLimit)); // query parameter
            if (previousId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "previousId", previousId)); // query parameter
            if (runType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "runType", runType)); // query parameter
            if (startTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "startTime", startTime)); // query parameter
            if (startTimeRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeRange", startTimeRange)); // query parameter
            if (stopType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "stopType", stopType)); // query parameter
            if (taskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "taskId", taskId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRunContextsLatest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RunContext>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RunContext) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RunContext)));
        }

        /// <summary>
        /// Get latest status for rule based task runs (since 1.13) Returns a list of the latest task run status record for each rule based task
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endTime">End time of run contexts to fetch (optional)</param>
        /// <param name="endTimeRange">End time range of run contexts to fetch (optional)</param>
        /// <param name="hasErrors">Has errors condition of run contexts to fetch (optional)</param>
        /// <param name="id">Ids of run contexts to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="previousId">When paging, this should be the last element version id returned by the previous page (optional)</param>
        /// <param name="runType">Run types of run contexts to fetch (optional)</param>
        /// <param name="startTime">Start time of run contexts to fetch (optional)</param>
        /// <param name="startTimeRange">Start time range of run contexts to fetch (optional)</param>
        /// <param name="stopType">Stop types of run contexts to fetch (optional)</param>
        /// <param name="taskId">Task ids of run contexts to fetch (optional)</param>
        /// <returns>Task of RunContext</returns>
        public async System.Threading.Tasks.Task<RunContext> GetRunContextsLatestAsync (List<string> endTime = null, string endTimeRange = null, string hasErrors = null, List<string> id = null, string pageLimit = null, string previousId = null, List<string> runType = null, List<string> startTime = null, string startTimeRange = null, List<string> stopType = null, List<string> taskId = null)
        {
             ApiResponse<RunContext> localVarResponse = await GetRunContextsLatestAsyncWithHttpInfo(endTime, endTimeRange, hasErrors, id, pageLimit, previousId, runType, startTime, startTimeRange, stopType, taskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get latest status for rule based task runs (since 1.13) Returns a list of the latest task run status record for each rule based task
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endTime">End time of run contexts to fetch (optional)</param>
        /// <param name="endTimeRange">End time range of run contexts to fetch (optional)</param>
        /// <param name="hasErrors">Has errors condition of run contexts to fetch (optional)</param>
        /// <param name="id">Ids of run contexts to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="previousId">When paging, this should be the last element version id returned by the previous page (optional)</param>
        /// <param name="runType">Run types of run contexts to fetch (optional)</param>
        /// <param name="startTime">Start time of run contexts to fetch (optional)</param>
        /// <param name="startTimeRange">Start time range of run contexts to fetch (optional)</param>
        /// <param name="stopType">Stop types of run contexts to fetch (optional)</param>
        /// <param name="taskId">Task ids of run contexts to fetch (optional)</param>
        /// <returns>Task of ApiResponse (RunContext)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RunContext>> GetRunContextsLatestAsyncWithHttpInfo (List<string> endTime = null, string endTimeRange = null, string hasErrors = null, List<string> id = null, string pageLimit = null, string previousId = null, List<string> runType = null, List<string> startTime = null, string startTimeRange = null, List<string> stopType = null, List<string> taskId = null)
        {

            var localVarPath = "/tasks/runContexts/latest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (endTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "endTime", endTime)); // query parameter
            if (endTimeRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTimeRange", endTimeRange)); // query parameter
            if (hasErrors != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hasErrors", hasErrors)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageLimit", pageLimit)); // query parameter
            if (previousId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "previousId", previousId)); // query parameter
            if (runType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "runType", runType)); // query parameter
            if (startTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "startTime", startTime)); // query parameter
            if (startTimeRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeRange", startTimeRange)); // query parameter
            if (stopType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "stopType", stopType)); // query parameter
            if (taskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "taskId", taskId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRunContextsLatest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RunContext>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RunContext) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RunContext)));
        }

        /// <summary>
        /// Get nodes targeted by this task (since 1.11) Returns nodes scoped to this task that at least one rule in the task is able to target
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task to get</param>
        /// <returns>Node</returns>
        public Node GetTargetableNodes (string rkTaskId)
        {
             ApiResponse<Node> localVarResponse = GetTargetableNodesWithHttpInfo(rkTaskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get nodes targeted by this task (since 1.11) Returns nodes scoped to this task that at least one rule in the task is able to target
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task to get</param>
        /// <returns>ApiResponse of Node</returns>
        public ApiResponse< Node > GetTargetableNodesWithHttpInfo (string rkTaskId)
        {
            // verify the required parameter 'rkTaskId' is set
            if (rkTaskId == null)
                throw new ApiException(400, "Missing required parameter 'rkTaskId' when calling TasksApi->GetTargetableNodes");

            var localVarPath = "/tasks/{rkTaskId}/targetableNodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkTaskId != null) localVarPathParams.Add("rkTaskId", this.Configuration.ApiClient.ParameterToString(rkTaskId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTargetableNodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Node>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Node) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Node)));
        }

        /// <summary>
        /// Get nodes targeted by this task (since 1.11) Returns nodes scoped to this task that at least one rule in the task is able to target
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task to get</param>
        /// <returns>Task of Node</returns>
        public async System.Threading.Tasks.Task<Node> GetTargetableNodesAsync (string rkTaskId)
        {
             ApiResponse<Node> localVarResponse = await GetTargetableNodesAsyncWithHttpInfo(rkTaskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get nodes targeted by this task (since 1.11) Returns nodes scoped to this task that at least one rule in the task is able to target
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task to get</param>
        /// <returns>Task of ApiResponse (Node)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Node>> GetTargetableNodesAsyncWithHttpInfo (string rkTaskId)
        {
            // verify the required parameter 'rkTaskId' is set
            if (rkTaskId == null)
                throw new ApiException(400, "Missing required parameter 'rkTaskId' when calling TasksApi->GetTargetableNodes");

            var localVarPath = "/tasks/{rkTaskId}/targetableNodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkTaskId != null) localVarPathParams.Add("rkTaskId", this.Configuration.ApiClient.ParameterToString(rkTaskId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTargetableNodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Node>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Node) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Node)));
        }

        /// <summary>
        /// Get task details by ID (since 1.6) Returns the details of a single task
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task to get</param>
        /// <returns>Task</returns>
        public Task GetTaskById (string rkTaskId)
        {
             ApiResponse<Task> localVarResponse = GetTaskByIdWithHttpInfo(rkTaskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get task details by ID (since 1.6) Returns the details of a single task
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task to get</param>
        /// <returns>ApiResponse of Task</returns>
        public ApiResponse< Task > GetTaskByIdWithHttpInfo (string rkTaskId)
        {
            // verify the required parameter 'rkTaskId' is set
            if (rkTaskId == null)
                throw new ApiException(400, "Missing required parameter 'rkTaskId' when calling TasksApi->GetTaskById");

            var localVarPath = "/tasks/{rkTaskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkTaskId != null) localVarPathParams.Add("rkTaskId", this.Configuration.ApiClient.ParameterToString(rkTaskId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Task>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Task) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Task)));
        }

        /// <summary>
        /// Get task details by ID (since 1.6) Returns the details of a single task
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task to get</param>
        /// <returns>Task of Task</returns>
        public async System.Threading.Tasks.Task<Task> GetTaskByIdAsync (string rkTaskId)
        {
             ApiResponse<Task> localVarResponse = await GetTaskByIdAsyncWithHttpInfo(rkTaskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get task details by ID (since 1.6) Returns the details of a single task
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task to get</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Task>> GetTaskByIdAsyncWithHttpInfo (string rkTaskId)
        {
            // verify the required parameter 'rkTaskId' is set
            if (rkTaskId == null)
                throw new ApiException(400, "Missing required parameter 'rkTaskId' when calling TasksApi->GetTaskById");

            var localVarPath = "/tasks/{rkTaskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkTaskId != null) localVarPathParams.Add("rkTaskId", this.Configuration.ApiClient.ParameterToString(rkTaskId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Task>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Task) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Task)));
        }

        /// <summary>
        /// Get a list of tasks (since 1.6) Returns a list of all tasks, or only those tasks that match the provided filter criteria. Search filters are supported for all fields except schedule. The task list is returned ordered by name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actionIds">Ids of actions to execute for tasks to fetch (optional)</param>
        /// <param name="additionalEmailAddresses">Email addresses that will receive reports from tasks to fetch (optional)</param>
        /// <param name="archiveAuditEvents">Audit events exceeding retention age option of tasks to fetch (optional)</param>
        /// <param name="archiveLogsExceeding">Number of maximum log messages to retain of tasks to fetch (optional)</param>
        /// <param name="archiveLogsOlderThan">Number of days to retain latests logs of tasks to fetch (optional)</param>
        /// <param name="archiveReports">Archive report option of tasks to fetch (optional)</param>
        /// <param name="compactVersionsExceeding">Maximum latests element versions to reatain of tasks to fetch (optional)</param>
        /// <param name="compactVersionsOlderThan">Days to ratain element versions of tasks to fetch (optional)</param>
        /// <param name="description">Description of tasks to fetch (optional)</param>
        /// <param name="emailServer">Name of email server for sending reports from tasks to fetch (optional)</param>
        /// <param name="enabled">Fetch only tasks that are enabled or disabled (optional)</param>
        /// <param name="id">Ids of tasks to fetch (optional)</param>
        /// <param name="ignoreEmptyReports">Ignore empty reports option of tasks to fetch (optional)</param>
        /// <param name="lastDuration">Last duration of execution of tasks to fetch (optional)</param>
        /// <param name="lastStart">Last start of execution of tasks to fetch (optional)</param>
        /// <param name="name">Name of tasks to fetch (optional)</param>
        /// <param name="newBaselinesOnly">New baseline element versions creation restriction option of tasks to fetch (optional)</param>
        /// <param name="nextStart">Next start for execution of tasks to fetch (optional)</param>
        /// <param name="nodeId">Node or node group ids in scope of tasks to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="reportFormat">Report format used for tasks to fetch (optional)</param>
        /// <param name="reportId">Ids of reports to execute for tasks to fetch (optional)</param>
        /// <param name="reportUserIds">Ids of users who will receive reports from tasks to fetch (optional)</param>
        /// <param name="ruleId">Rule or rule group ids in scope of tasks to fetch (optional)</param>
        /// <param name="status">Statuses of tasks to fetch (optional)</param>
        /// <param name="subDescription">Substring matching for description of tasks to fetch (optional)</param>
        /// <param name="timeout">Hour timeout of tasks to fetch (optional)</param>
        /// <param name="type">Type of tasks to fetch (optional)</param>
        /// <param name="userId">Ids of users of tasks to fetch (optional)</param>
        /// <returns>Task</returns>
        public Task GetTasks (List<string> actionIds = null, List<string> additionalEmailAddresses = null, bool? archiveAuditEvents = null, List<string> archiveLogsExceeding = null, List<string> archiveLogsOlderThan = null, bool? archiveReports = null, List<string> compactVersionsExceeding = null, List<string> compactVersionsOlderThan = null, List<string> description = null, List<string> emailServer = null, bool? enabled = null, List<string> id = null, bool? ignoreEmptyReports = null, List<string> lastDuration = null, List<string> lastStart = null, List<string> name = null, bool? newBaselinesOnly = null, List<string> nextStart = null, List<string> nodeId = null, string pageLimit = null, string pageStart = null, List<string> reportFormat = null, List<string> reportId = null, List<string> reportUserIds = null, List<string> ruleId = null, List<string> status = null, List<string> subDescription = null, List<string> timeout = null, List<string> type = null, List<string> userId = null)
        {
             ApiResponse<Task> localVarResponse = GetTasksWithHttpInfo(actionIds, additionalEmailAddresses, archiveAuditEvents, archiveLogsExceeding, archiveLogsOlderThan, archiveReports, compactVersionsExceeding, compactVersionsOlderThan, description, emailServer, enabled, id, ignoreEmptyReports, lastDuration, lastStart, name, newBaselinesOnly, nextStart, nodeId, pageLimit, pageStart, reportFormat, reportId, reportUserIds, ruleId, status, subDescription, timeout, type, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of tasks (since 1.6) Returns a list of all tasks, or only those tasks that match the provided filter criteria. Search filters are supported for all fields except schedule. The task list is returned ordered by name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actionIds">Ids of actions to execute for tasks to fetch (optional)</param>
        /// <param name="additionalEmailAddresses">Email addresses that will receive reports from tasks to fetch (optional)</param>
        /// <param name="archiveAuditEvents">Audit events exceeding retention age option of tasks to fetch (optional)</param>
        /// <param name="archiveLogsExceeding">Number of maximum log messages to retain of tasks to fetch (optional)</param>
        /// <param name="archiveLogsOlderThan">Number of days to retain latests logs of tasks to fetch (optional)</param>
        /// <param name="archiveReports">Archive report option of tasks to fetch (optional)</param>
        /// <param name="compactVersionsExceeding">Maximum latests element versions to reatain of tasks to fetch (optional)</param>
        /// <param name="compactVersionsOlderThan">Days to ratain element versions of tasks to fetch (optional)</param>
        /// <param name="description">Description of tasks to fetch (optional)</param>
        /// <param name="emailServer">Name of email server for sending reports from tasks to fetch (optional)</param>
        /// <param name="enabled">Fetch only tasks that are enabled or disabled (optional)</param>
        /// <param name="id">Ids of tasks to fetch (optional)</param>
        /// <param name="ignoreEmptyReports">Ignore empty reports option of tasks to fetch (optional)</param>
        /// <param name="lastDuration">Last duration of execution of tasks to fetch (optional)</param>
        /// <param name="lastStart">Last start of execution of tasks to fetch (optional)</param>
        /// <param name="name">Name of tasks to fetch (optional)</param>
        /// <param name="newBaselinesOnly">New baseline element versions creation restriction option of tasks to fetch (optional)</param>
        /// <param name="nextStart">Next start for execution of tasks to fetch (optional)</param>
        /// <param name="nodeId">Node or node group ids in scope of tasks to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="reportFormat">Report format used for tasks to fetch (optional)</param>
        /// <param name="reportId">Ids of reports to execute for tasks to fetch (optional)</param>
        /// <param name="reportUserIds">Ids of users who will receive reports from tasks to fetch (optional)</param>
        /// <param name="ruleId">Rule or rule group ids in scope of tasks to fetch (optional)</param>
        /// <param name="status">Statuses of tasks to fetch (optional)</param>
        /// <param name="subDescription">Substring matching for description of tasks to fetch (optional)</param>
        /// <param name="timeout">Hour timeout of tasks to fetch (optional)</param>
        /// <param name="type">Type of tasks to fetch (optional)</param>
        /// <param name="userId">Ids of users of tasks to fetch (optional)</param>
        /// <returns>ApiResponse of Task</returns>
        public ApiResponse< Task > GetTasksWithHttpInfo (List<string> actionIds = null, List<string> additionalEmailAddresses = null, bool? archiveAuditEvents = null, List<string> archiveLogsExceeding = null, List<string> archiveLogsOlderThan = null, bool? archiveReports = null, List<string> compactVersionsExceeding = null, List<string> compactVersionsOlderThan = null, List<string> description = null, List<string> emailServer = null, bool? enabled = null, List<string> id = null, bool? ignoreEmptyReports = null, List<string> lastDuration = null, List<string> lastStart = null, List<string> name = null, bool? newBaselinesOnly = null, List<string> nextStart = null, List<string> nodeId = null, string pageLimit = null, string pageStart = null, List<string> reportFormat = null, List<string> reportId = null, List<string> reportUserIds = null, List<string> ruleId = null, List<string> status = null, List<string> subDescription = null, List<string> timeout = null, List<string> type = null, List<string> userId = null)
        {

            var localVarPath = "/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (actionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "actionIds", actionIds)); // query parameter
            if (additionalEmailAddresses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "additionalEmailAddresses", additionalEmailAddresses)); // query parameter
            if (archiveAuditEvents != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "archiveAuditEvents", archiveAuditEvents)); // query parameter
            if (archiveLogsExceeding != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "archiveLogsExceeding", archiveLogsExceeding)); // query parameter
            if (archiveLogsOlderThan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "archiveLogsOlderThan", archiveLogsOlderThan)); // query parameter
            if (archiveReports != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "archiveReports", archiveReports)); // query parameter
            if (compactVersionsExceeding != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "compactVersionsExceeding", compactVersionsExceeding)); // query parameter
            if (compactVersionsOlderThan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "compactVersionsOlderThan", compactVersionsOlderThan)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "description", description)); // query parameter
            if (emailServer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "emailServer", emailServer)); // query parameter
            if (enabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enabled", enabled)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (ignoreEmptyReports != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignoreEmptyReports", ignoreEmptyReports)); // query parameter
            if (lastDuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "lastDuration", lastDuration)); // query parameter
            if (lastStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "lastStart", lastStart)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (newBaselinesOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newBaselinesOnly", newBaselinesOnly)); // query parameter
            if (nextStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "nextStart", nextStart)); // query parameter
            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "nodeId", nodeId)); // query parameter
            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageLimit", pageLimit)); // query parameter
            if (pageStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageStart", pageStart)); // query parameter
            if (reportFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "reportFormat", reportFormat)); // query parameter
            if (reportId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "reportId", reportId)); // query parameter
            if (reportUserIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "reportUserIds", reportUserIds)); // query parameter
            if (ruleId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ruleId", ruleId)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "status", status)); // query parameter
            if (subDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sub_description", subDescription)); // query parameter
            if (timeout != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "timeout", timeout)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Task>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Task) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Task)));
        }

        /// <summary>
        /// Get a list of tasks (since 1.6) Returns a list of all tasks, or only those tasks that match the provided filter criteria. Search filters are supported for all fields except schedule. The task list is returned ordered by name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actionIds">Ids of actions to execute for tasks to fetch (optional)</param>
        /// <param name="additionalEmailAddresses">Email addresses that will receive reports from tasks to fetch (optional)</param>
        /// <param name="archiveAuditEvents">Audit events exceeding retention age option of tasks to fetch (optional)</param>
        /// <param name="archiveLogsExceeding">Number of maximum log messages to retain of tasks to fetch (optional)</param>
        /// <param name="archiveLogsOlderThan">Number of days to retain latests logs of tasks to fetch (optional)</param>
        /// <param name="archiveReports">Archive report option of tasks to fetch (optional)</param>
        /// <param name="compactVersionsExceeding">Maximum latests element versions to reatain of tasks to fetch (optional)</param>
        /// <param name="compactVersionsOlderThan">Days to ratain element versions of tasks to fetch (optional)</param>
        /// <param name="description">Description of tasks to fetch (optional)</param>
        /// <param name="emailServer">Name of email server for sending reports from tasks to fetch (optional)</param>
        /// <param name="enabled">Fetch only tasks that are enabled or disabled (optional)</param>
        /// <param name="id">Ids of tasks to fetch (optional)</param>
        /// <param name="ignoreEmptyReports">Ignore empty reports option of tasks to fetch (optional)</param>
        /// <param name="lastDuration">Last duration of execution of tasks to fetch (optional)</param>
        /// <param name="lastStart">Last start of execution of tasks to fetch (optional)</param>
        /// <param name="name">Name of tasks to fetch (optional)</param>
        /// <param name="newBaselinesOnly">New baseline element versions creation restriction option of tasks to fetch (optional)</param>
        /// <param name="nextStart">Next start for execution of tasks to fetch (optional)</param>
        /// <param name="nodeId">Node or node group ids in scope of tasks to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="reportFormat">Report format used for tasks to fetch (optional)</param>
        /// <param name="reportId">Ids of reports to execute for tasks to fetch (optional)</param>
        /// <param name="reportUserIds">Ids of users who will receive reports from tasks to fetch (optional)</param>
        /// <param name="ruleId">Rule or rule group ids in scope of tasks to fetch (optional)</param>
        /// <param name="status">Statuses of tasks to fetch (optional)</param>
        /// <param name="subDescription">Substring matching for description of tasks to fetch (optional)</param>
        /// <param name="timeout">Hour timeout of tasks to fetch (optional)</param>
        /// <param name="type">Type of tasks to fetch (optional)</param>
        /// <param name="userId">Ids of users of tasks to fetch (optional)</param>
        /// <returns>Task of Task</returns>
        public async System.Threading.Tasks.Task<Task> GetTasksAsync (List<string> actionIds = null, List<string> additionalEmailAddresses = null, bool? archiveAuditEvents = null, List<string> archiveLogsExceeding = null, List<string> archiveLogsOlderThan = null, bool? archiveReports = null, List<string> compactVersionsExceeding = null, List<string> compactVersionsOlderThan = null, List<string> description = null, List<string> emailServer = null, bool? enabled = null, List<string> id = null, bool? ignoreEmptyReports = null, List<string> lastDuration = null, List<string> lastStart = null, List<string> name = null, bool? newBaselinesOnly = null, List<string> nextStart = null, List<string> nodeId = null, string pageLimit = null, string pageStart = null, List<string> reportFormat = null, List<string> reportId = null, List<string> reportUserIds = null, List<string> ruleId = null, List<string> status = null, List<string> subDescription = null, List<string> timeout = null, List<string> type = null, List<string> userId = null)
        {
             ApiResponse<Task> localVarResponse = await GetTasksAsyncWithHttpInfo(actionIds, additionalEmailAddresses, archiveAuditEvents, archiveLogsExceeding, archiveLogsOlderThan, archiveReports, compactVersionsExceeding, compactVersionsOlderThan, description, emailServer, enabled, id, ignoreEmptyReports, lastDuration, lastStart, name, newBaselinesOnly, nextStart, nodeId, pageLimit, pageStart, reportFormat, reportId, reportUserIds, ruleId, status, subDescription, timeout, type, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of tasks (since 1.6) Returns a list of all tasks, or only those tasks that match the provided filter criteria. Search filters are supported for all fields except schedule. The task list is returned ordered by name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="actionIds">Ids of actions to execute for tasks to fetch (optional)</param>
        /// <param name="additionalEmailAddresses">Email addresses that will receive reports from tasks to fetch (optional)</param>
        /// <param name="archiveAuditEvents">Audit events exceeding retention age option of tasks to fetch (optional)</param>
        /// <param name="archiveLogsExceeding">Number of maximum log messages to retain of tasks to fetch (optional)</param>
        /// <param name="archiveLogsOlderThan">Number of days to retain latests logs of tasks to fetch (optional)</param>
        /// <param name="archiveReports">Archive report option of tasks to fetch (optional)</param>
        /// <param name="compactVersionsExceeding">Maximum latests element versions to reatain of tasks to fetch (optional)</param>
        /// <param name="compactVersionsOlderThan">Days to ratain element versions of tasks to fetch (optional)</param>
        /// <param name="description">Description of tasks to fetch (optional)</param>
        /// <param name="emailServer">Name of email server for sending reports from tasks to fetch (optional)</param>
        /// <param name="enabled">Fetch only tasks that are enabled or disabled (optional)</param>
        /// <param name="id">Ids of tasks to fetch (optional)</param>
        /// <param name="ignoreEmptyReports">Ignore empty reports option of tasks to fetch (optional)</param>
        /// <param name="lastDuration">Last duration of execution of tasks to fetch (optional)</param>
        /// <param name="lastStart">Last start of execution of tasks to fetch (optional)</param>
        /// <param name="name">Name of tasks to fetch (optional)</param>
        /// <param name="newBaselinesOnly">New baseline element versions creation restriction option of tasks to fetch (optional)</param>
        /// <param name="nextStart">Next start for execution of tasks to fetch (optional)</param>
        /// <param name="nodeId">Node or node group ids in scope of tasks to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="reportFormat">Report format used for tasks to fetch (optional)</param>
        /// <param name="reportId">Ids of reports to execute for tasks to fetch (optional)</param>
        /// <param name="reportUserIds">Ids of users who will receive reports from tasks to fetch (optional)</param>
        /// <param name="ruleId">Rule or rule group ids in scope of tasks to fetch (optional)</param>
        /// <param name="status">Statuses of tasks to fetch (optional)</param>
        /// <param name="subDescription">Substring matching for description of tasks to fetch (optional)</param>
        /// <param name="timeout">Hour timeout of tasks to fetch (optional)</param>
        /// <param name="type">Type of tasks to fetch (optional)</param>
        /// <param name="userId">Ids of users of tasks to fetch (optional)</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Task>> GetTasksAsyncWithHttpInfo (List<string> actionIds = null, List<string> additionalEmailAddresses = null, bool? archiveAuditEvents = null, List<string> archiveLogsExceeding = null, List<string> archiveLogsOlderThan = null, bool? archiveReports = null, List<string> compactVersionsExceeding = null, List<string> compactVersionsOlderThan = null, List<string> description = null, List<string> emailServer = null, bool? enabled = null, List<string> id = null, bool? ignoreEmptyReports = null, List<string> lastDuration = null, List<string> lastStart = null, List<string> name = null, bool? newBaselinesOnly = null, List<string> nextStart = null, List<string> nodeId = null, string pageLimit = null, string pageStart = null, List<string> reportFormat = null, List<string> reportId = null, List<string> reportUserIds = null, List<string> ruleId = null, List<string> status = null, List<string> subDescription = null, List<string> timeout = null, List<string> type = null, List<string> userId = null)
        {

            var localVarPath = "/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (actionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "actionIds", actionIds)); // query parameter
            if (additionalEmailAddresses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "additionalEmailAddresses", additionalEmailAddresses)); // query parameter
            if (archiveAuditEvents != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "archiveAuditEvents", archiveAuditEvents)); // query parameter
            if (archiveLogsExceeding != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "archiveLogsExceeding", archiveLogsExceeding)); // query parameter
            if (archiveLogsOlderThan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "archiveLogsOlderThan", archiveLogsOlderThan)); // query parameter
            if (archiveReports != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "archiveReports", archiveReports)); // query parameter
            if (compactVersionsExceeding != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "compactVersionsExceeding", compactVersionsExceeding)); // query parameter
            if (compactVersionsOlderThan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "compactVersionsOlderThan", compactVersionsOlderThan)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "description", description)); // query parameter
            if (emailServer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "emailServer", emailServer)); // query parameter
            if (enabled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enabled", enabled)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (ignoreEmptyReports != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignoreEmptyReports", ignoreEmptyReports)); // query parameter
            if (lastDuration != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "lastDuration", lastDuration)); // query parameter
            if (lastStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "lastStart", lastStart)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (newBaselinesOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newBaselinesOnly", newBaselinesOnly)); // query parameter
            if (nextStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "nextStart", nextStart)); // query parameter
            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "nodeId", nodeId)); // query parameter
            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageLimit", pageLimit)); // query parameter
            if (pageStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageStart", pageStart)); // query parameter
            if (reportFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "reportFormat", reportFormat)); // query parameter
            if (reportId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "reportId", reportId)); // query parameter
            if (reportUserIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "reportUserIds", reportUserIds)); // query parameter
            if (ruleId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ruleId", ruleId)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "status", status)); // query parameter
            if (subDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sub_description", subDescription)); // query parameter
            if (timeout != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "timeout", timeout)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Task>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Task) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Task)));
        }

        /// <summary>
        /// Put an update to an existing task (since 1.6) Updates an existing task, ignoring the following read-only fields: type, status, lastStart, lastDuration, and nextStart. You may not rename to the same name as another task.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task to be updated</param>
        /// <param name="task">Task description to update the existing task</param>
        /// <returns>Task</returns>
        public Task UpdateTask (string rkTaskId, Task task)
        {
             ApiResponse<Task> localVarResponse = UpdateTaskWithHttpInfo(rkTaskId, task);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Put an update to an existing task (since 1.6) Updates an existing task, ignoring the following read-only fields: type, status, lastStart, lastDuration, and nextStart. You may not rename to the same name as another task.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task to be updated</param>
        /// <param name="task">Task description to update the existing task</param>
        /// <returns>ApiResponse of Task</returns>
        public ApiResponse< Task > UpdateTaskWithHttpInfo (string rkTaskId, Task task)
        {
            // verify the required parameter 'rkTaskId' is set
            if (rkTaskId == null)
                throw new ApiException(400, "Missing required parameter 'rkTaskId' when calling TasksApi->UpdateTask");
            // verify the required parameter 'task' is set
            if (task == null)
                throw new ApiException(400, "Missing required parameter 'task' when calling TasksApi->UpdateTask");

            var localVarPath = "/tasks/{rkTaskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkTaskId != null) localVarPathParams.Add("rkTaskId", this.Configuration.ApiClient.ParameterToString(rkTaskId)); // path parameter
            if (task != null && task.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(task); // http body (model) parameter
            }
            else
            {
                localVarPostBody = task; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Task>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Task) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Task)));
        }

        /// <summary>
        /// Put an update to an existing task (since 1.6) Updates an existing task, ignoring the following read-only fields: type, status, lastStart, lastDuration, and nextStart. You may not rename to the same name as another task.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task to be updated</param>
        /// <param name="task">Task description to update the existing task</param>
        /// <returns>Task of Task</returns>
        public async System.Threading.Tasks.Task<Task> UpdateTaskAsync (string rkTaskId, Task task)
        {
             ApiResponse<Task> localVarResponse = await UpdateTaskAsyncWithHttpInfo(rkTaskId, task);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Put an update to an existing task (since 1.6) Updates an existing task, ignoring the following read-only fields: type, status, lastStart, lastDuration, and nextStart. You may not rename to the same name as another task.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkTaskId">ID of Task to be updated</param>
        /// <param name="task">Task description to update the existing task</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Task>> UpdateTaskAsyncWithHttpInfo (string rkTaskId, Task task)
        {
            // verify the required parameter 'rkTaskId' is set
            if (rkTaskId == null)
                throw new ApiException(400, "Missing required parameter 'rkTaskId' when calling TasksApi->UpdateTask");
            // verify the required parameter 'task' is set
            if (task == null)
                throw new ApiException(400, "Missing required parameter 'task' when calling TasksApi->UpdateTask");

            var localVarPath = "/tasks/{rkTaskId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkTaskId != null) localVarPathParams.Add("rkTaskId", this.Configuration.ApiClient.ParameterToString(rkTaskId)); // path parameter
            if (task != null && task.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(task); // http body (model) parameter
            }
            else
            {
                localVarPostBody = task; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Task>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Task) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Task)));
        }

    }
}

/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.13.0.bmaster.r20180119190259-8b60eaa.b1753
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPolicytestresultsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Submit request for the automated remediation. (since 1.5)
        /// </summary>
        /// <remarks>
        /// Create and execute a work order for the remediation of policy test result failures using the automated remediation scripts attached to policy tests.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A request for Policy Test Results Remediation</param>
        /// <returns>RemediationRequestCommand</returns>
        RemediationRequestCommand CreateRemediation (RemediationRequestCommand body);

        /// <summary>
        /// Submit request for the automated remediation. (since 1.5)
        /// </summary>
        /// <remarks>
        /// Create and execute a work order for the remediation of policy test result failures using the automated remediation scripts attached to policy tests.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A request for Policy Test Results Remediation</param>
        /// <returns>ApiResponse of RemediationRequestCommand</returns>
        ApiResponse<RemediationRequestCommand> CreateRemediationWithHttpInfo (RemediationRequestCommand body);
        /// <summary>
        /// Search the latest policy test results (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns a list of only those policy test results that are the latest result for a given policy test and node combination, or of those, the results that match the filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creationTime">States of policy test results to fetch. Possible values: PASSED, FAILED, UNKNOWN, ERROR. (optional)</param>
        /// <param name="creationTimeRange">Creation time range of policy test results to fetch (optional)</param>
        /// <param name="elementId">Element IDs of policy tests results to fetch. (optional)</param>
        /// <param name="elementName">Element names of policy tests results to fetch. (optional)</param>
        /// <param name="elementVersionId">Element version IDs of policy tests results to fetch. (optional)</param>
        /// <param name="id">IDs of policy test results to fetch. (optional)</param>
        /// <param name="nodeId">Node IDs of policy test results to fetch. (optional)</param>
        /// <param name="nodeLabel">Node labels of policy test results to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="policyTestId">Policy Test IDs of policy test results to fetch. (optional)</param>
        /// <param name="policyTestName">Policy test names of policy test results to fetch. (optional)</param>
        /// <param name="state">States of policy test results to fetch. Possible values: PASSED, FAILED, UNKNOWN, ERROR. (optional)</param>
        /// <returns>PolicyTestResult</returns>
        PolicyTestResult GetLatestPolicyTestResults (List<string> creationTime = null, string creationTimeRange = null, List<string> elementId = null, List<string> elementName = null, List<string> elementVersionId = null, List<string> id = null, List<string> nodeId = null, List<string> nodeLabel = null, string pageLimit = null, string pageStart = null, List<string> policyTestId = null, List<string> policyTestName = null, List<string> state = null);

        /// <summary>
        /// Search the latest policy test results (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns a list of only those policy test results that are the latest result for a given policy test and node combination, or of those, the results that match the filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creationTime">States of policy test results to fetch. Possible values: PASSED, FAILED, UNKNOWN, ERROR. (optional)</param>
        /// <param name="creationTimeRange">Creation time range of policy test results to fetch (optional)</param>
        /// <param name="elementId">Element IDs of policy tests results to fetch. (optional)</param>
        /// <param name="elementName">Element names of policy tests results to fetch. (optional)</param>
        /// <param name="elementVersionId">Element version IDs of policy tests results to fetch. (optional)</param>
        /// <param name="id">IDs of policy test results to fetch. (optional)</param>
        /// <param name="nodeId">Node IDs of policy test results to fetch. (optional)</param>
        /// <param name="nodeLabel">Node labels of policy test results to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="policyTestId">Policy Test IDs of policy test results to fetch. (optional)</param>
        /// <param name="policyTestName">Policy test names of policy test results to fetch. (optional)</param>
        /// <param name="state">States of policy test results to fetch. Possible values: PASSED, FAILED, UNKNOWN, ERROR. (optional)</param>
        /// <returns>ApiResponse of PolicyTestResult</returns>
        ApiResponse<PolicyTestResult> GetLatestPolicyTestResultsWithHttpInfo (List<string> creationTime = null, string creationTimeRange = null, List<string> elementId = null, List<string> elementName = null, List<string> elementVersionId = null, List<string> id = null, List<string> nodeId = null, List<string> nodeLabel = null, string pageLimit = null, string pageStart = null, List<string> policyTestId = null, List<string> policyTestName = null, List<string> state = null);
        /// <summary>
        /// Get policy test result details by ID (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns details of a single policy test result.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestResultId">rkPolicyTestResultId to fetch</param>
        /// <returns>PolicyTestResult</returns>
        PolicyTestResult GetPolicyTestResultById (string rkPolicyTestResultId);

        /// <summary>
        /// Get policy test result details by ID (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns details of a single policy test result.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestResultId">rkPolicyTestResultId to fetch</param>
        /// <returns>ApiResponse of PolicyTestResult</returns>
        ApiResponse<PolicyTestResult> GetPolicyTestResultByIdWithHttpInfo (string rkPolicyTestResultId);
        /// <summary>
        /// Search all policy test results (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns a list of all policy test results or those that match the provided filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="at">Include the latest policy test results that are at or prior to the specified time. (optional)</param>
        /// <param name="creationTime">Creation times of policy test results to fetch. (optional)</param>
        /// <param name="creationTimeRange">Creation time range of policy test results to fetch (optional)</param>
        /// <param name="elementId">Element IDs of policy tests results to fetch. (optional)</param>
        /// <param name="elementName">Element names of policy tests results to fetch. (optional)</param>
        /// <param name="elementVersionId">Element version IDs of policy tests results to fetch. (optional)</param>
        /// <param name="id">IDs of policy test results to fetch. (optional)</param>
        /// <param name="nodeId">Node IDs of policy test results to fetch. (optional)</param>
        /// <param name="nodeLabel">Node labels of policy test results to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="policyTestId">Policy Test IDs of policy test results to fetch. (optional)</param>
        /// <param name="policyTestName">Policy test names of policy test results to fetch. (optional)</param>
        /// <param name="state">States of policy test results to fetch. Possible values: PASSED, FAILED, UNKNOWN, ERROR. (optional)</param>
        /// <returns>PolicyTestResult</returns>
        PolicyTestResult GetPolicyTestResults (string at = null, List<string> creationTime = null, string creationTimeRange = null, List<string> elementId = null, List<string> elementName = null, List<string> elementVersionId = null, List<string> id = null, List<string> nodeId = null, List<string> nodeLabel = null, string pageLimit = null, string pageStart = null, List<string> policyTestId = null, List<string> policyTestName = null, List<string> state = null);

        /// <summary>
        /// Search all policy test results (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns a list of all policy test results or those that match the provided filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="at">Include the latest policy test results that are at or prior to the specified time. (optional)</param>
        /// <param name="creationTime">Creation times of policy test results to fetch. (optional)</param>
        /// <param name="creationTimeRange">Creation time range of policy test results to fetch (optional)</param>
        /// <param name="elementId">Element IDs of policy tests results to fetch. (optional)</param>
        /// <param name="elementName">Element names of policy tests results to fetch. (optional)</param>
        /// <param name="elementVersionId">Element version IDs of policy tests results to fetch. (optional)</param>
        /// <param name="id">IDs of policy test results to fetch. (optional)</param>
        /// <param name="nodeId">Node IDs of policy test results to fetch. (optional)</param>
        /// <param name="nodeLabel">Node labels of policy test results to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="policyTestId">Policy Test IDs of policy test results to fetch. (optional)</param>
        /// <param name="policyTestName">Policy test names of policy test results to fetch. (optional)</param>
        /// <param name="state">States of policy test results to fetch. Possible values: PASSED, FAILED, UNKNOWN, ERROR. (optional)</param>
        /// <returns>ApiResponse of PolicyTestResult</returns>
        ApiResponse<PolicyTestResult> GetPolicyTestResultsWithHttpInfo (string at = null, List<string> creationTime = null, string creationTimeRange = null, List<string> elementId = null, List<string> elementName = null, List<string> elementVersionId = null, List<string> id = null, List<string> nodeId = null, List<string> nodeLabel = null, string pageLimit = null, string pageStart = null, List<string> policyTestId = null, List<string> policyTestName = null, List<string> state = null);
        /// <summary>
        /// Get the status of a remediationRequest (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns the remediationRequest updated with the latest status for the request.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Id of request to fetch</param>
        /// <returns>RemediationRequestCommand</returns>
        RemediationRequestCommand GetRemediationById (string requestId);

        /// <summary>
        /// Get the status of a remediationRequest (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns the remediationRequest updated with the latest status for the request.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Id of request to fetch</param>
        /// <returns>ApiResponse of RemediationRequestCommand</returns>
        ApiResponse<RemediationRequestCommand> GetRemediationByIdWithHttpInfo (string requestId);
        /// <summary>
        /// Get a list of missing results (since 1.8)
        /// </summary>
        /// <remarks>
        /// Returns an enumeration of every policy test for nodes that are in scope for which there is no result in TE, either because it has been deleted or has never been successfully scanned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="at">Return status of unknown test results as of the given timestamp, excluding test results that are newer. This is from the perspective of the current policy scoping configuration. (optional)</param>
        /// <returns>UnknownPolicyTestResult</returns>
        UnknownPolicyTestResult GetUnknownTestResults (string at = null);

        /// <summary>
        /// Get a list of missing results (since 1.8)
        /// </summary>
        /// <remarks>
        /// Returns an enumeration of every policy test for nodes that are in scope for which there is no result in TE, either because it has been deleted or has never been successfully scanned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="at">Return status of unknown test results as of the given timestamp, excluding test results that are newer. This is from the perspective of the current policy scoping configuration. (optional)</param>
        /// <returns>ApiResponse of UnknownPolicyTestResult</returns>
        ApiResponse<UnknownPolicyTestResult> GetUnknownTestResultsWithHttpInfo (string at = null);
        /// <summary>
        /// Extract large sets of policy test results incrementally (since 1.8)
        /// </summary>
        /// <remarks>
        /// Search for policy test results by time ranges. Results will be sorted by the policy test result id, in ascending order.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creationTimeRange">Creation time range of policy test results to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="previousId">When paging, this should be the last policy test result id returned by the previous page. (optional)</param>
        /// <returns>PolicyTestResult</returns>
        PolicyTestResult PolicyTestResultsExtract (string creationTimeRange = null, string pageLimit = null, string previousId = null);

        /// <summary>
        /// Extract large sets of policy test results incrementally (since 1.8)
        /// </summary>
        /// <remarks>
        /// Search for policy test results by time ranges. Results will be sorted by the policy test result id, in ascending order.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creationTimeRange">Creation time range of policy test results to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="previousId">When paging, this should be the last policy test result id returned by the previous page. (optional)</param>
        /// <returns>ApiResponse of PolicyTestResult</returns>
        ApiResponse<PolicyTestResult> PolicyTestResultsExtractWithHttpInfo (string creationTimeRange = null, string pageLimit = null, string previousId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Submit request for the automated remediation. (since 1.5)
        /// </summary>
        /// <remarks>
        /// Create and execute a work order for the remediation of policy test result failures using the automated remediation scripts attached to policy tests.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A request for Policy Test Results Remediation</param>
        /// <returns>Task of RemediationRequestCommand</returns>
        System.Threading.Tasks.Task<RemediationRequestCommand> CreateRemediationAsync (RemediationRequestCommand body);

        /// <summary>
        /// Submit request for the automated remediation. (since 1.5)
        /// </summary>
        /// <remarks>
        /// Create and execute a work order for the remediation of policy test result failures using the automated remediation scripts attached to policy tests.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A request for Policy Test Results Remediation</param>
        /// <returns>Task of ApiResponse (RemediationRequestCommand)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemediationRequestCommand>> CreateRemediationAsyncWithHttpInfo (RemediationRequestCommand body);
        /// <summary>
        /// Search the latest policy test results (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns a list of only those policy test results that are the latest result for a given policy test and node combination, or of those, the results that match the filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creationTime">States of policy test results to fetch. Possible values: PASSED, FAILED, UNKNOWN, ERROR. (optional)</param>
        /// <param name="creationTimeRange">Creation time range of policy test results to fetch (optional)</param>
        /// <param name="elementId">Element IDs of policy tests results to fetch. (optional)</param>
        /// <param name="elementName">Element names of policy tests results to fetch. (optional)</param>
        /// <param name="elementVersionId">Element version IDs of policy tests results to fetch. (optional)</param>
        /// <param name="id">IDs of policy test results to fetch. (optional)</param>
        /// <param name="nodeId">Node IDs of policy test results to fetch. (optional)</param>
        /// <param name="nodeLabel">Node labels of policy test results to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="policyTestId">Policy Test IDs of policy test results to fetch. (optional)</param>
        /// <param name="policyTestName">Policy test names of policy test results to fetch. (optional)</param>
        /// <param name="state">States of policy test results to fetch. Possible values: PASSED, FAILED, UNKNOWN, ERROR. (optional)</param>
        /// <returns>Task of PolicyTestResult</returns>
        System.Threading.Tasks.Task<PolicyTestResult> GetLatestPolicyTestResultsAsync (List<string> creationTime = null, string creationTimeRange = null, List<string> elementId = null, List<string> elementName = null, List<string> elementVersionId = null, List<string> id = null, List<string> nodeId = null, List<string> nodeLabel = null, string pageLimit = null, string pageStart = null, List<string> policyTestId = null, List<string> policyTestName = null, List<string> state = null);

        /// <summary>
        /// Search the latest policy test results (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns a list of only those policy test results that are the latest result for a given policy test and node combination, or of those, the results that match the filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creationTime">States of policy test results to fetch. Possible values: PASSED, FAILED, UNKNOWN, ERROR. (optional)</param>
        /// <param name="creationTimeRange">Creation time range of policy test results to fetch (optional)</param>
        /// <param name="elementId">Element IDs of policy tests results to fetch. (optional)</param>
        /// <param name="elementName">Element names of policy tests results to fetch. (optional)</param>
        /// <param name="elementVersionId">Element version IDs of policy tests results to fetch. (optional)</param>
        /// <param name="id">IDs of policy test results to fetch. (optional)</param>
        /// <param name="nodeId">Node IDs of policy test results to fetch. (optional)</param>
        /// <param name="nodeLabel">Node labels of policy test results to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="policyTestId">Policy Test IDs of policy test results to fetch. (optional)</param>
        /// <param name="policyTestName">Policy test names of policy test results to fetch. (optional)</param>
        /// <param name="state">States of policy test results to fetch. Possible values: PASSED, FAILED, UNKNOWN, ERROR. (optional)</param>
        /// <returns>Task of ApiResponse (PolicyTestResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyTestResult>> GetLatestPolicyTestResultsAsyncWithHttpInfo (List<string> creationTime = null, string creationTimeRange = null, List<string> elementId = null, List<string> elementName = null, List<string> elementVersionId = null, List<string> id = null, List<string> nodeId = null, List<string> nodeLabel = null, string pageLimit = null, string pageStart = null, List<string> policyTestId = null, List<string> policyTestName = null, List<string> state = null);
        /// <summary>
        /// Get policy test result details by ID (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns details of a single policy test result.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestResultId">rkPolicyTestResultId to fetch</param>
        /// <returns>Task of PolicyTestResult</returns>
        System.Threading.Tasks.Task<PolicyTestResult> GetPolicyTestResultByIdAsync (string rkPolicyTestResultId);

        /// <summary>
        /// Get policy test result details by ID (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns details of a single policy test result.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestResultId">rkPolicyTestResultId to fetch</param>
        /// <returns>Task of ApiResponse (PolicyTestResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyTestResult>> GetPolicyTestResultByIdAsyncWithHttpInfo (string rkPolicyTestResultId);
        /// <summary>
        /// Search all policy test results (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns a list of all policy test results or those that match the provided filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="at">Include the latest policy test results that are at or prior to the specified time. (optional)</param>
        /// <param name="creationTime">Creation times of policy test results to fetch. (optional)</param>
        /// <param name="creationTimeRange">Creation time range of policy test results to fetch (optional)</param>
        /// <param name="elementId">Element IDs of policy tests results to fetch. (optional)</param>
        /// <param name="elementName">Element names of policy tests results to fetch. (optional)</param>
        /// <param name="elementVersionId">Element version IDs of policy tests results to fetch. (optional)</param>
        /// <param name="id">IDs of policy test results to fetch. (optional)</param>
        /// <param name="nodeId">Node IDs of policy test results to fetch. (optional)</param>
        /// <param name="nodeLabel">Node labels of policy test results to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="policyTestId">Policy Test IDs of policy test results to fetch. (optional)</param>
        /// <param name="policyTestName">Policy test names of policy test results to fetch. (optional)</param>
        /// <param name="state">States of policy test results to fetch. Possible values: PASSED, FAILED, UNKNOWN, ERROR. (optional)</param>
        /// <returns>Task of PolicyTestResult</returns>
        System.Threading.Tasks.Task<PolicyTestResult> GetPolicyTestResultsAsync (string at = null, List<string> creationTime = null, string creationTimeRange = null, List<string> elementId = null, List<string> elementName = null, List<string> elementVersionId = null, List<string> id = null, List<string> nodeId = null, List<string> nodeLabel = null, string pageLimit = null, string pageStart = null, List<string> policyTestId = null, List<string> policyTestName = null, List<string> state = null);

        /// <summary>
        /// Search all policy test results (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns a list of all policy test results or those that match the provided filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="at">Include the latest policy test results that are at or prior to the specified time. (optional)</param>
        /// <param name="creationTime">Creation times of policy test results to fetch. (optional)</param>
        /// <param name="creationTimeRange">Creation time range of policy test results to fetch (optional)</param>
        /// <param name="elementId">Element IDs of policy tests results to fetch. (optional)</param>
        /// <param name="elementName">Element names of policy tests results to fetch. (optional)</param>
        /// <param name="elementVersionId">Element version IDs of policy tests results to fetch. (optional)</param>
        /// <param name="id">IDs of policy test results to fetch. (optional)</param>
        /// <param name="nodeId">Node IDs of policy test results to fetch. (optional)</param>
        /// <param name="nodeLabel">Node labels of policy test results to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="policyTestId">Policy Test IDs of policy test results to fetch. (optional)</param>
        /// <param name="policyTestName">Policy test names of policy test results to fetch. (optional)</param>
        /// <param name="state">States of policy test results to fetch. Possible values: PASSED, FAILED, UNKNOWN, ERROR. (optional)</param>
        /// <returns>Task of ApiResponse (PolicyTestResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyTestResult>> GetPolicyTestResultsAsyncWithHttpInfo (string at = null, List<string> creationTime = null, string creationTimeRange = null, List<string> elementId = null, List<string> elementName = null, List<string> elementVersionId = null, List<string> id = null, List<string> nodeId = null, List<string> nodeLabel = null, string pageLimit = null, string pageStart = null, List<string> policyTestId = null, List<string> policyTestName = null, List<string> state = null);
        /// <summary>
        /// Get the status of a remediationRequest (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns the remediationRequest updated with the latest status for the request.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Id of request to fetch</param>
        /// <returns>Task of RemediationRequestCommand</returns>
        System.Threading.Tasks.Task<RemediationRequestCommand> GetRemediationByIdAsync (string requestId);

        /// <summary>
        /// Get the status of a remediationRequest (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns the remediationRequest updated with the latest status for the request.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Id of request to fetch</param>
        /// <returns>Task of ApiResponse (RemediationRequestCommand)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemediationRequestCommand>> GetRemediationByIdAsyncWithHttpInfo (string requestId);
        /// <summary>
        /// Get a list of missing results (since 1.8)
        /// </summary>
        /// <remarks>
        /// Returns an enumeration of every policy test for nodes that are in scope for which there is no result in TE, either because it has been deleted or has never been successfully scanned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="at">Return status of unknown test results as of the given timestamp, excluding test results that are newer. This is from the perspective of the current policy scoping configuration. (optional)</param>
        /// <returns>Task of UnknownPolicyTestResult</returns>
        System.Threading.Tasks.Task<UnknownPolicyTestResult> GetUnknownTestResultsAsync (string at = null);

        /// <summary>
        /// Get a list of missing results (since 1.8)
        /// </summary>
        /// <remarks>
        /// Returns an enumeration of every policy test for nodes that are in scope for which there is no result in TE, either because it has been deleted or has never been successfully scanned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="at">Return status of unknown test results as of the given timestamp, excluding test results that are newer. This is from the perspective of the current policy scoping configuration. (optional)</param>
        /// <returns>Task of ApiResponse (UnknownPolicyTestResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnknownPolicyTestResult>> GetUnknownTestResultsAsyncWithHttpInfo (string at = null);
        /// <summary>
        /// Extract large sets of policy test results incrementally (since 1.8)
        /// </summary>
        /// <remarks>
        /// Search for policy test results by time ranges. Results will be sorted by the policy test result id, in ascending order.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creationTimeRange">Creation time range of policy test results to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="previousId">When paging, this should be the last policy test result id returned by the previous page. (optional)</param>
        /// <returns>Task of PolicyTestResult</returns>
        System.Threading.Tasks.Task<PolicyTestResult> PolicyTestResultsExtractAsync (string creationTimeRange = null, string pageLimit = null, string previousId = null);

        /// <summary>
        /// Extract large sets of policy test results incrementally (since 1.8)
        /// </summary>
        /// <remarks>
        /// Search for policy test results by time ranges. Results will be sorted by the policy test result id, in ascending order.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creationTimeRange">Creation time range of policy test results to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="previousId">When paging, this should be the last policy test result id returned by the previous page. (optional)</param>
        /// <returns>Task of ApiResponse (PolicyTestResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyTestResult>> PolicyTestResultsExtractAsyncWithHttpInfo (string creationTimeRange = null, string pageLimit = null, string previousId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PolicytestresultsApi : IPolicytestresultsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PolicytestresultsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PolicytestresultsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PolicytestresultsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PolicytestresultsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Submit request for the automated remediation. (since 1.5) Create and execute a work order for the remediation of policy test result failures using the automated remediation scripts attached to policy tests.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A request for Policy Test Results Remediation</param>
        /// <returns>RemediationRequestCommand</returns>
        public RemediationRequestCommand CreateRemediation (RemediationRequestCommand body)
        {
             ApiResponse<RemediationRequestCommand> localVarResponse = CreateRemediationWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Submit request for the automated remediation. (since 1.5) Create and execute a work order for the remediation of policy test result failures using the automated remediation scripts attached to policy tests.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A request for Policy Test Results Remediation</param>
        /// <returns>ApiResponse of RemediationRequestCommand</returns>
        public ApiResponse< RemediationRequestCommand > CreateRemediationWithHttpInfo (RemediationRequestCommand body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PolicytestresultsApi->CreateRemediation");

            var localVarPath = "/policytestresults/remediationRequests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRemediation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemediationRequestCommand>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemediationRequestCommand) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemediationRequestCommand)));
        }

        /// <summary>
        /// Submit request for the automated remediation. (since 1.5) Create and execute a work order for the remediation of policy test result failures using the automated remediation scripts attached to policy tests.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A request for Policy Test Results Remediation</param>
        /// <returns>Task of RemediationRequestCommand</returns>
        public async System.Threading.Tasks.Task<RemediationRequestCommand> CreateRemediationAsync (RemediationRequestCommand body)
        {
             ApiResponse<RemediationRequestCommand> localVarResponse = await CreateRemediationAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Submit request for the automated remediation. (since 1.5) Create and execute a work order for the remediation of policy test result failures using the automated remediation scripts attached to policy tests.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A request for Policy Test Results Remediation</param>
        /// <returns>Task of ApiResponse (RemediationRequestCommand)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemediationRequestCommand>> CreateRemediationAsyncWithHttpInfo (RemediationRequestCommand body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PolicytestresultsApi->CreateRemediation");

            var localVarPath = "/policytestresults/remediationRequests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRemediation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemediationRequestCommand>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemediationRequestCommand) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemediationRequestCommand)));
        }

        /// <summary>
        /// Search the latest policy test results (since 1.5) Returns a list of only those policy test results that are the latest result for a given policy test and node combination, or of those, the results that match the filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creationTime">States of policy test results to fetch. Possible values: PASSED, FAILED, UNKNOWN, ERROR. (optional)</param>
        /// <param name="creationTimeRange">Creation time range of policy test results to fetch (optional)</param>
        /// <param name="elementId">Element IDs of policy tests results to fetch. (optional)</param>
        /// <param name="elementName">Element names of policy tests results to fetch. (optional)</param>
        /// <param name="elementVersionId">Element version IDs of policy tests results to fetch. (optional)</param>
        /// <param name="id">IDs of policy test results to fetch. (optional)</param>
        /// <param name="nodeId">Node IDs of policy test results to fetch. (optional)</param>
        /// <param name="nodeLabel">Node labels of policy test results to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="policyTestId">Policy Test IDs of policy test results to fetch. (optional)</param>
        /// <param name="policyTestName">Policy test names of policy test results to fetch. (optional)</param>
        /// <param name="state">States of policy test results to fetch. Possible values: PASSED, FAILED, UNKNOWN, ERROR. (optional)</param>
        /// <returns>PolicyTestResult</returns>
        public PolicyTestResult GetLatestPolicyTestResults (List<string> creationTime = null, string creationTimeRange = null, List<string> elementId = null, List<string> elementName = null, List<string> elementVersionId = null, List<string> id = null, List<string> nodeId = null, List<string> nodeLabel = null, string pageLimit = null, string pageStart = null, List<string> policyTestId = null, List<string> policyTestName = null, List<string> state = null)
        {
             ApiResponse<PolicyTestResult> localVarResponse = GetLatestPolicyTestResultsWithHttpInfo(creationTime, creationTimeRange, elementId, elementName, elementVersionId, id, nodeId, nodeLabel, pageLimit, pageStart, policyTestId, policyTestName, state);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search the latest policy test results (since 1.5) Returns a list of only those policy test results that are the latest result for a given policy test and node combination, or of those, the results that match the filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creationTime">States of policy test results to fetch. Possible values: PASSED, FAILED, UNKNOWN, ERROR. (optional)</param>
        /// <param name="creationTimeRange">Creation time range of policy test results to fetch (optional)</param>
        /// <param name="elementId">Element IDs of policy tests results to fetch. (optional)</param>
        /// <param name="elementName">Element names of policy tests results to fetch. (optional)</param>
        /// <param name="elementVersionId">Element version IDs of policy tests results to fetch. (optional)</param>
        /// <param name="id">IDs of policy test results to fetch. (optional)</param>
        /// <param name="nodeId">Node IDs of policy test results to fetch. (optional)</param>
        /// <param name="nodeLabel">Node labels of policy test results to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="policyTestId">Policy Test IDs of policy test results to fetch. (optional)</param>
        /// <param name="policyTestName">Policy test names of policy test results to fetch. (optional)</param>
        /// <param name="state">States of policy test results to fetch. Possible values: PASSED, FAILED, UNKNOWN, ERROR. (optional)</param>
        /// <returns>ApiResponse of PolicyTestResult</returns>
        public ApiResponse< PolicyTestResult > GetLatestPolicyTestResultsWithHttpInfo (List<string> creationTime = null, string creationTimeRange = null, List<string> elementId = null, List<string> elementName = null, List<string> elementVersionId = null, List<string> id = null, List<string> nodeId = null, List<string> nodeLabel = null, string pageLimit = null, string pageStart = null, List<string> policyTestId = null, List<string> policyTestName = null, List<string> state = null)
        {

            var localVarPath = "/policytestresults/latest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (creationTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "creationTime", creationTime)); // query parameter
            if (creationTimeRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "creationTimeRange", creationTimeRange)); // query parameter
            if (elementId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "elementId", elementId)); // query parameter
            if (elementName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "elementName", elementName)); // query parameter
            if (elementVersionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "elementVersionId", elementVersionId)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "nodeId", nodeId)); // query parameter
            if (nodeLabel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "nodeLabel", nodeLabel)); // query parameter
            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageLimit", pageLimit)); // query parameter
            if (pageStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageStart", pageStart)); // query parameter
            if (policyTestId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "policyTestId", policyTestId)); // query parameter
            if (policyTestName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "policyTestName", policyTestName)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "state", state)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLatestPolicyTestResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyTestResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolicyTestResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyTestResult)));
        }

        /// <summary>
        /// Search the latest policy test results (since 1.5) Returns a list of only those policy test results that are the latest result for a given policy test and node combination, or of those, the results that match the filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creationTime">States of policy test results to fetch. Possible values: PASSED, FAILED, UNKNOWN, ERROR. (optional)</param>
        /// <param name="creationTimeRange">Creation time range of policy test results to fetch (optional)</param>
        /// <param name="elementId">Element IDs of policy tests results to fetch. (optional)</param>
        /// <param name="elementName">Element names of policy tests results to fetch. (optional)</param>
        /// <param name="elementVersionId">Element version IDs of policy tests results to fetch. (optional)</param>
        /// <param name="id">IDs of policy test results to fetch. (optional)</param>
        /// <param name="nodeId">Node IDs of policy test results to fetch. (optional)</param>
        /// <param name="nodeLabel">Node labels of policy test results to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="policyTestId">Policy Test IDs of policy test results to fetch. (optional)</param>
        /// <param name="policyTestName">Policy test names of policy test results to fetch. (optional)</param>
        /// <param name="state">States of policy test results to fetch. Possible values: PASSED, FAILED, UNKNOWN, ERROR. (optional)</param>
        /// <returns>Task of PolicyTestResult</returns>
        public async System.Threading.Tasks.Task<PolicyTestResult> GetLatestPolicyTestResultsAsync (List<string> creationTime = null, string creationTimeRange = null, List<string> elementId = null, List<string> elementName = null, List<string> elementVersionId = null, List<string> id = null, List<string> nodeId = null, List<string> nodeLabel = null, string pageLimit = null, string pageStart = null, List<string> policyTestId = null, List<string> policyTestName = null, List<string> state = null)
        {
             ApiResponse<PolicyTestResult> localVarResponse = await GetLatestPolicyTestResultsAsyncWithHttpInfo(creationTime, creationTimeRange, elementId, elementName, elementVersionId, id, nodeId, nodeLabel, pageLimit, pageStart, policyTestId, policyTestName, state);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search the latest policy test results (since 1.5) Returns a list of only those policy test results that are the latest result for a given policy test and node combination, or of those, the results that match the filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creationTime">States of policy test results to fetch. Possible values: PASSED, FAILED, UNKNOWN, ERROR. (optional)</param>
        /// <param name="creationTimeRange">Creation time range of policy test results to fetch (optional)</param>
        /// <param name="elementId">Element IDs of policy tests results to fetch. (optional)</param>
        /// <param name="elementName">Element names of policy tests results to fetch. (optional)</param>
        /// <param name="elementVersionId">Element version IDs of policy tests results to fetch. (optional)</param>
        /// <param name="id">IDs of policy test results to fetch. (optional)</param>
        /// <param name="nodeId">Node IDs of policy test results to fetch. (optional)</param>
        /// <param name="nodeLabel">Node labels of policy test results to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="policyTestId">Policy Test IDs of policy test results to fetch. (optional)</param>
        /// <param name="policyTestName">Policy test names of policy test results to fetch. (optional)</param>
        /// <param name="state">States of policy test results to fetch. Possible values: PASSED, FAILED, UNKNOWN, ERROR. (optional)</param>
        /// <returns>Task of ApiResponse (PolicyTestResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PolicyTestResult>> GetLatestPolicyTestResultsAsyncWithHttpInfo (List<string> creationTime = null, string creationTimeRange = null, List<string> elementId = null, List<string> elementName = null, List<string> elementVersionId = null, List<string> id = null, List<string> nodeId = null, List<string> nodeLabel = null, string pageLimit = null, string pageStart = null, List<string> policyTestId = null, List<string> policyTestName = null, List<string> state = null)
        {

            var localVarPath = "/policytestresults/latest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (creationTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "creationTime", creationTime)); // query parameter
            if (creationTimeRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "creationTimeRange", creationTimeRange)); // query parameter
            if (elementId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "elementId", elementId)); // query parameter
            if (elementName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "elementName", elementName)); // query parameter
            if (elementVersionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "elementVersionId", elementVersionId)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "nodeId", nodeId)); // query parameter
            if (nodeLabel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "nodeLabel", nodeLabel)); // query parameter
            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageLimit", pageLimit)); // query parameter
            if (pageStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageStart", pageStart)); // query parameter
            if (policyTestId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "policyTestId", policyTestId)); // query parameter
            if (policyTestName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "policyTestName", policyTestName)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "state", state)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLatestPolicyTestResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyTestResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolicyTestResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyTestResult)));
        }

        /// <summary>
        /// Get policy test result details by ID (since 1.5) Returns details of a single policy test result.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestResultId">rkPolicyTestResultId to fetch</param>
        /// <returns>PolicyTestResult</returns>
        public PolicyTestResult GetPolicyTestResultById (string rkPolicyTestResultId)
        {
             ApiResponse<PolicyTestResult> localVarResponse = GetPolicyTestResultByIdWithHttpInfo(rkPolicyTestResultId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get policy test result details by ID (since 1.5) Returns details of a single policy test result.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestResultId">rkPolicyTestResultId to fetch</param>
        /// <returns>ApiResponse of PolicyTestResult</returns>
        public ApiResponse< PolicyTestResult > GetPolicyTestResultByIdWithHttpInfo (string rkPolicyTestResultId)
        {
            // verify the required parameter 'rkPolicyTestResultId' is set
            if (rkPolicyTestResultId == null)
                throw new ApiException(400, "Missing required parameter 'rkPolicyTestResultId' when calling PolicytestresultsApi->GetPolicyTestResultById");

            var localVarPath = "/policytestresults/{rkPolicyTestResultId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkPolicyTestResultId != null) localVarPathParams.Add("rkPolicyTestResultId", this.Configuration.ApiClient.ParameterToString(rkPolicyTestResultId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPolicyTestResultById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyTestResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolicyTestResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyTestResult)));
        }

        /// <summary>
        /// Get policy test result details by ID (since 1.5) Returns details of a single policy test result.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestResultId">rkPolicyTestResultId to fetch</param>
        /// <returns>Task of PolicyTestResult</returns>
        public async System.Threading.Tasks.Task<PolicyTestResult> GetPolicyTestResultByIdAsync (string rkPolicyTestResultId)
        {
             ApiResponse<PolicyTestResult> localVarResponse = await GetPolicyTestResultByIdAsyncWithHttpInfo(rkPolicyTestResultId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get policy test result details by ID (since 1.5) Returns details of a single policy test result.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyTestResultId">rkPolicyTestResultId to fetch</param>
        /// <returns>Task of ApiResponse (PolicyTestResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PolicyTestResult>> GetPolicyTestResultByIdAsyncWithHttpInfo (string rkPolicyTestResultId)
        {
            // verify the required parameter 'rkPolicyTestResultId' is set
            if (rkPolicyTestResultId == null)
                throw new ApiException(400, "Missing required parameter 'rkPolicyTestResultId' when calling PolicytestresultsApi->GetPolicyTestResultById");

            var localVarPath = "/policytestresults/{rkPolicyTestResultId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkPolicyTestResultId != null) localVarPathParams.Add("rkPolicyTestResultId", this.Configuration.ApiClient.ParameterToString(rkPolicyTestResultId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPolicyTestResultById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyTestResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolicyTestResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyTestResult)));
        }

        /// <summary>
        /// Search all policy test results (since 1.5) Returns a list of all policy test results or those that match the provided filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="at">Include the latest policy test results that are at or prior to the specified time. (optional)</param>
        /// <param name="creationTime">Creation times of policy test results to fetch. (optional)</param>
        /// <param name="creationTimeRange">Creation time range of policy test results to fetch (optional)</param>
        /// <param name="elementId">Element IDs of policy tests results to fetch. (optional)</param>
        /// <param name="elementName">Element names of policy tests results to fetch. (optional)</param>
        /// <param name="elementVersionId">Element version IDs of policy tests results to fetch. (optional)</param>
        /// <param name="id">IDs of policy test results to fetch. (optional)</param>
        /// <param name="nodeId">Node IDs of policy test results to fetch. (optional)</param>
        /// <param name="nodeLabel">Node labels of policy test results to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="policyTestId">Policy Test IDs of policy test results to fetch. (optional)</param>
        /// <param name="policyTestName">Policy test names of policy test results to fetch. (optional)</param>
        /// <param name="state">States of policy test results to fetch. Possible values: PASSED, FAILED, UNKNOWN, ERROR. (optional)</param>
        /// <returns>PolicyTestResult</returns>
        public PolicyTestResult GetPolicyTestResults (string at = null, List<string> creationTime = null, string creationTimeRange = null, List<string> elementId = null, List<string> elementName = null, List<string> elementVersionId = null, List<string> id = null, List<string> nodeId = null, List<string> nodeLabel = null, string pageLimit = null, string pageStart = null, List<string> policyTestId = null, List<string> policyTestName = null, List<string> state = null)
        {
             ApiResponse<PolicyTestResult> localVarResponse = GetPolicyTestResultsWithHttpInfo(at, creationTime, creationTimeRange, elementId, elementName, elementVersionId, id, nodeId, nodeLabel, pageLimit, pageStart, policyTestId, policyTestName, state);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search all policy test results (since 1.5) Returns a list of all policy test results or those that match the provided filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="at">Include the latest policy test results that are at or prior to the specified time. (optional)</param>
        /// <param name="creationTime">Creation times of policy test results to fetch. (optional)</param>
        /// <param name="creationTimeRange">Creation time range of policy test results to fetch (optional)</param>
        /// <param name="elementId">Element IDs of policy tests results to fetch. (optional)</param>
        /// <param name="elementName">Element names of policy tests results to fetch. (optional)</param>
        /// <param name="elementVersionId">Element version IDs of policy tests results to fetch. (optional)</param>
        /// <param name="id">IDs of policy test results to fetch. (optional)</param>
        /// <param name="nodeId">Node IDs of policy test results to fetch. (optional)</param>
        /// <param name="nodeLabel">Node labels of policy test results to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="policyTestId">Policy Test IDs of policy test results to fetch. (optional)</param>
        /// <param name="policyTestName">Policy test names of policy test results to fetch. (optional)</param>
        /// <param name="state">States of policy test results to fetch. Possible values: PASSED, FAILED, UNKNOWN, ERROR. (optional)</param>
        /// <returns>ApiResponse of PolicyTestResult</returns>
        public ApiResponse< PolicyTestResult > GetPolicyTestResultsWithHttpInfo (string at = null, List<string> creationTime = null, string creationTimeRange = null, List<string> elementId = null, List<string> elementName = null, List<string> elementVersionId = null, List<string> id = null, List<string> nodeId = null, List<string> nodeLabel = null, string pageLimit = null, string pageStart = null, List<string> policyTestId = null, List<string> policyTestName = null, List<string> state = null)
        {

            var localVarPath = "/policytestresults";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (at != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "at", at)); // query parameter
            if (creationTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "creationTime", creationTime)); // query parameter
            if (creationTimeRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "creationTimeRange", creationTimeRange)); // query parameter
            if (elementId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "elementId", elementId)); // query parameter
            if (elementName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "elementName", elementName)); // query parameter
            if (elementVersionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "elementVersionId", elementVersionId)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "nodeId", nodeId)); // query parameter
            if (nodeLabel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "nodeLabel", nodeLabel)); // query parameter
            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageLimit", pageLimit)); // query parameter
            if (pageStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageStart", pageStart)); // query parameter
            if (policyTestId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "policyTestId", policyTestId)); // query parameter
            if (policyTestName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "policyTestName", policyTestName)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "state", state)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPolicyTestResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyTestResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolicyTestResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyTestResult)));
        }

        /// <summary>
        /// Search all policy test results (since 1.5) Returns a list of all policy test results or those that match the provided filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="at">Include the latest policy test results that are at or prior to the specified time. (optional)</param>
        /// <param name="creationTime">Creation times of policy test results to fetch. (optional)</param>
        /// <param name="creationTimeRange">Creation time range of policy test results to fetch (optional)</param>
        /// <param name="elementId">Element IDs of policy tests results to fetch. (optional)</param>
        /// <param name="elementName">Element names of policy tests results to fetch. (optional)</param>
        /// <param name="elementVersionId">Element version IDs of policy tests results to fetch. (optional)</param>
        /// <param name="id">IDs of policy test results to fetch. (optional)</param>
        /// <param name="nodeId">Node IDs of policy test results to fetch. (optional)</param>
        /// <param name="nodeLabel">Node labels of policy test results to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="policyTestId">Policy Test IDs of policy test results to fetch. (optional)</param>
        /// <param name="policyTestName">Policy test names of policy test results to fetch. (optional)</param>
        /// <param name="state">States of policy test results to fetch. Possible values: PASSED, FAILED, UNKNOWN, ERROR. (optional)</param>
        /// <returns>Task of PolicyTestResult</returns>
        public async System.Threading.Tasks.Task<PolicyTestResult> GetPolicyTestResultsAsync (string at = null, List<string> creationTime = null, string creationTimeRange = null, List<string> elementId = null, List<string> elementName = null, List<string> elementVersionId = null, List<string> id = null, List<string> nodeId = null, List<string> nodeLabel = null, string pageLimit = null, string pageStart = null, List<string> policyTestId = null, List<string> policyTestName = null, List<string> state = null)
        {
             ApiResponse<PolicyTestResult> localVarResponse = await GetPolicyTestResultsAsyncWithHttpInfo(at, creationTime, creationTimeRange, elementId, elementName, elementVersionId, id, nodeId, nodeLabel, pageLimit, pageStart, policyTestId, policyTestName, state);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search all policy test results (since 1.5) Returns a list of all policy test results or those that match the provided filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="at">Include the latest policy test results that are at or prior to the specified time. (optional)</param>
        /// <param name="creationTime">Creation times of policy test results to fetch. (optional)</param>
        /// <param name="creationTimeRange">Creation time range of policy test results to fetch (optional)</param>
        /// <param name="elementId">Element IDs of policy tests results to fetch. (optional)</param>
        /// <param name="elementName">Element names of policy tests results to fetch. (optional)</param>
        /// <param name="elementVersionId">Element version IDs of policy tests results to fetch. (optional)</param>
        /// <param name="id">IDs of policy test results to fetch. (optional)</param>
        /// <param name="nodeId">Node IDs of policy test results to fetch. (optional)</param>
        /// <param name="nodeLabel">Node labels of policy test results to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="policyTestId">Policy Test IDs of policy test results to fetch. (optional)</param>
        /// <param name="policyTestName">Policy test names of policy test results to fetch. (optional)</param>
        /// <param name="state">States of policy test results to fetch. Possible values: PASSED, FAILED, UNKNOWN, ERROR. (optional)</param>
        /// <returns>Task of ApiResponse (PolicyTestResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PolicyTestResult>> GetPolicyTestResultsAsyncWithHttpInfo (string at = null, List<string> creationTime = null, string creationTimeRange = null, List<string> elementId = null, List<string> elementName = null, List<string> elementVersionId = null, List<string> id = null, List<string> nodeId = null, List<string> nodeLabel = null, string pageLimit = null, string pageStart = null, List<string> policyTestId = null, List<string> policyTestName = null, List<string> state = null)
        {

            var localVarPath = "/policytestresults";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (at != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "at", at)); // query parameter
            if (creationTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "creationTime", creationTime)); // query parameter
            if (creationTimeRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "creationTimeRange", creationTimeRange)); // query parameter
            if (elementId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "elementId", elementId)); // query parameter
            if (elementName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "elementName", elementName)); // query parameter
            if (elementVersionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "elementVersionId", elementVersionId)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "nodeId", nodeId)); // query parameter
            if (nodeLabel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "nodeLabel", nodeLabel)); // query parameter
            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageLimit", pageLimit)); // query parameter
            if (pageStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageStart", pageStart)); // query parameter
            if (policyTestId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "policyTestId", policyTestId)); // query parameter
            if (policyTestName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "policyTestName", policyTestName)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "state", state)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPolicyTestResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyTestResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolicyTestResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyTestResult)));
        }

        /// <summary>
        /// Get the status of a remediationRequest (since 1.5) Returns the remediationRequest updated with the latest status for the request.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Id of request to fetch</param>
        /// <returns>RemediationRequestCommand</returns>
        public RemediationRequestCommand GetRemediationById (string requestId)
        {
             ApiResponse<RemediationRequestCommand> localVarResponse = GetRemediationByIdWithHttpInfo(requestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the status of a remediationRequest (since 1.5) Returns the remediationRequest updated with the latest status for the request.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Id of request to fetch</param>
        /// <returns>ApiResponse of RemediationRequestCommand</returns>
        public ApiResponse< RemediationRequestCommand > GetRemediationByIdWithHttpInfo (string requestId)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling PolicytestresultsApi->GetRemediationById");

            var localVarPath = "/policytestresults/remediationRequests/{requestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarPathParams.Add("requestId", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRemediationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemediationRequestCommand>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemediationRequestCommand) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemediationRequestCommand)));
        }

        /// <summary>
        /// Get the status of a remediationRequest (since 1.5) Returns the remediationRequest updated with the latest status for the request.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Id of request to fetch</param>
        /// <returns>Task of RemediationRequestCommand</returns>
        public async System.Threading.Tasks.Task<RemediationRequestCommand> GetRemediationByIdAsync (string requestId)
        {
             ApiResponse<RemediationRequestCommand> localVarResponse = await GetRemediationByIdAsyncWithHttpInfo(requestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the status of a remediationRequest (since 1.5) Returns the remediationRequest updated with the latest status for the request.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Id of request to fetch</param>
        /// <returns>Task of ApiResponse (RemediationRequestCommand)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemediationRequestCommand>> GetRemediationByIdAsyncWithHttpInfo (string requestId)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling PolicytestresultsApi->GetRemediationById");

            var localVarPath = "/policytestresults/remediationRequests/{requestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarPathParams.Add("requestId", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRemediationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemediationRequestCommand>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemediationRequestCommand) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemediationRequestCommand)));
        }

        /// <summary>
        /// Get a list of missing results (since 1.8) Returns an enumeration of every policy test for nodes that are in scope for which there is no result in TE, either because it has been deleted or has never been successfully scanned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="at">Return status of unknown test results as of the given timestamp, excluding test results that are newer. This is from the perspective of the current policy scoping configuration. (optional)</param>
        /// <returns>UnknownPolicyTestResult</returns>
        public UnknownPolicyTestResult GetUnknownTestResults (string at = null)
        {
             ApiResponse<UnknownPolicyTestResult> localVarResponse = GetUnknownTestResultsWithHttpInfo(at);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of missing results (since 1.8) Returns an enumeration of every policy test for nodes that are in scope for which there is no result in TE, either because it has been deleted or has never been successfully scanned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="at">Return status of unknown test results as of the given timestamp, excluding test results that are newer. This is from the perspective of the current policy scoping configuration. (optional)</param>
        /// <returns>ApiResponse of UnknownPolicyTestResult</returns>
        public ApiResponse< UnknownPolicyTestResult > GetUnknownTestResultsWithHttpInfo (string at = null)
        {

            var localVarPath = "/policytestresults/unknownTestResults";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (at != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "at", at)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnknownTestResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnknownPolicyTestResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnknownPolicyTestResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnknownPolicyTestResult)));
        }

        /// <summary>
        /// Get a list of missing results (since 1.8) Returns an enumeration of every policy test for nodes that are in scope for which there is no result in TE, either because it has been deleted or has never been successfully scanned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="at">Return status of unknown test results as of the given timestamp, excluding test results that are newer. This is from the perspective of the current policy scoping configuration. (optional)</param>
        /// <returns>Task of UnknownPolicyTestResult</returns>
        public async System.Threading.Tasks.Task<UnknownPolicyTestResult> GetUnknownTestResultsAsync (string at = null)
        {
             ApiResponse<UnknownPolicyTestResult> localVarResponse = await GetUnknownTestResultsAsyncWithHttpInfo(at);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of missing results (since 1.8) Returns an enumeration of every policy test for nodes that are in scope for which there is no result in TE, either because it has been deleted or has never been successfully scanned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="at">Return status of unknown test results as of the given timestamp, excluding test results that are newer. This is from the perspective of the current policy scoping configuration. (optional)</param>
        /// <returns>Task of ApiResponse (UnknownPolicyTestResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UnknownPolicyTestResult>> GetUnknownTestResultsAsyncWithHttpInfo (string at = null)
        {

            var localVarPath = "/policytestresults/unknownTestResults";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (at != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "at", at)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnknownTestResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnknownPolicyTestResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnknownPolicyTestResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnknownPolicyTestResult)));
        }

        /// <summary>
        /// Extract large sets of policy test results incrementally (since 1.8) Search for policy test results by time ranges. Results will be sorted by the policy test result id, in ascending order.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creationTimeRange">Creation time range of policy test results to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="previousId">When paging, this should be the last policy test result id returned by the previous page. (optional)</param>
        /// <returns>PolicyTestResult</returns>
        public PolicyTestResult PolicyTestResultsExtract (string creationTimeRange = null, string pageLimit = null, string previousId = null)
        {
             ApiResponse<PolicyTestResult> localVarResponse = PolicyTestResultsExtractWithHttpInfo(creationTimeRange, pageLimit, previousId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Extract large sets of policy test results incrementally (since 1.8) Search for policy test results by time ranges. Results will be sorted by the policy test result id, in ascending order.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creationTimeRange">Creation time range of policy test results to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="previousId">When paging, this should be the last policy test result id returned by the previous page. (optional)</param>
        /// <returns>ApiResponse of PolicyTestResult</returns>
        public ApiResponse< PolicyTestResult > PolicyTestResultsExtractWithHttpInfo (string creationTimeRange = null, string pageLimit = null, string previousId = null)
        {

            var localVarPath = "/policytestresults/_extract";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (creationTimeRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "creationTimeRange", creationTimeRange)); // query parameter
            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageLimit", pageLimit)); // query parameter
            if (previousId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "previousId", previousId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PolicyTestResultsExtract", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyTestResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolicyTestResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyTestResult)));
        }

        /// <summary>
        /// Extract large sets of policy test results incrementally (since 1.8) Search for policy test results by time ranges. Results will be sorted by the policy test result id, in ascending order.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creationTimeRange">Creation time range of policy test results to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="previousId">When paging, this should be the last policy test result id returned by the previous page. (optional)</param>
        /// <returns>Task of PolicyTestResult</returns>
        public async System.Threading.Tasks.Task<PolicyTestResult> PolicyTestResultsExtractAsync (string creationTimeRange = null, string pageLimit = null, string previousId = null)
        {
             ApiResponse<PolicyTestResult> localVarResponse = await PolicyTestResultsExtractAsyncWithHttpInfo(creationTimeRange, pageLimit, previousId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Extract large sets of policy test results incrementally (since 1.8) Search for policy test results by time ranges. Results will be sorted by the policy test result id, in ascending order.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creationTimeRange">Creation time range of policy test results to fetch (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="previousId">When paging, this should be the last policy test result id returned by the previous page. (optional)</param>
        /// <returns>Task of ApiResponse (PolicyTestResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PolicyTestResult>> PolicyTestResultsExtractAsyncWithHttpInfo (string creationTimeRange = null, string pageLimit = null, string previousId = null)
        {

            var localVarPath = "/policytestresults/_extract";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (creationTimeRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "creationTimeRange", creationTimeRange)); // query parameter
            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageLimit", pageLimit)); // query parameter
            if (previousId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "previousId", previousId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PolicyTestResultsExtract", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyTestResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolicyTestResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyTestResult)));
        }

    }
}

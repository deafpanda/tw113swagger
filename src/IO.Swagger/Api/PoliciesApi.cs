/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.13.0.bmaster.r20180119190259-8b60eaa.b1753
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPoliciesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a policy (since 1.11)
        /// </summary>
        /// <remarks>
        /// Removes a policy, leaving any child policy groups and tests in the unlinked group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyId">ID of policy to delete</param>
        /// <returns></returns>
        void DeletePolicy (string rkPolicyId);

        /// <summary>
        /// Delete a policy (since 1.11)
        /// </summary>
        /// <remarks>
        /// Removes a policy, leaving any child policy groups and tests in the unlinked group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyId">ID of policy to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePolicyWithHttpInfo (string rkPolicyId);
        /// <summary>
        /// Get included nodes of a policy (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns a list of all nodes in scope for a policy by virtue of the 3 policy level node scoping criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyId">ID of policy to fetch</param>
        /// <returns>string</returns>
        string GetIncludedNodes (string rkPolicyId);

        /// <summary>
        /// Get included nodes of a policy (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns a list of all nodes in scope for a policy by virtue of the 3 policy level node scoping criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyId">ID of policy to fetch</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetIncludedNodesWithHttpInfo (string rkPolicyId);
        /// <summary>
        /// Search policies (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns a list of all policies or those that match the provided filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Descriptions of policies to fetch. (optional)</param>
        /// <param name="id">IDs of policies to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of policies to fetch. (optional)</param>
        /// <param name="importedTimeRange">Imported time range of policy to fetch (optional)</param>
        /// <param name="modifiedTime">Modified times of policies to fetch. (optional)</param>
        /// <param name="name">Names of policies to fetch. (optional)</param>
        /// <param name="nodeScope">Node scopes of policies to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="purgeDataOlderThanDays">Days to purge old data of policies to fetch. (optional)</param>
        /// <param name="purgeOldData">If should be purged old data of policies to fetch. (optional)</param>
        /// <param name="subDescription">Support for like search for description parameter. (optional)</param>
        /// <param name="trackingId">Tracking IDs of policies to fetch. (optional)</param>
        /// <returns>Policy</returns>
        Policy GetPolicies (List<string> description = null, List<string> id = null, List<string> importedTime = null, string importedTimeRange = null, List<string> modifiedTime = null, List<string> name = null, List<string> nodeScope = null, string pageLimit = null, string pageStart = null, List<string> purgeDataOlderThanDays = null, bool? purgeOldData = null, List<string> subDescription = null, List<string> trackingId = null);

        /// <summary>
        /// Search policies (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns a list of all policies or those that match the provided filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Descriptions of policies to fetch. (optional)</param>
        /// <param name="id">IDs of policies to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of policies to fetch. (optional)</param>
        /// <param name="importedTimeRange">Imported time range of policy to fetch (optional)</param>
        /// <param name="modifiedTime">Modified times of policies to fetch. (optional)</param>
        /// <param name="name">Names of policies to fetch. (optional)</param>
        /// <param name="nodeScope">Node scopes of policies to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="purgeDataOlderThanDays">Days to purge old data of policies to fetch. (optional)</param>
        /// <param name="purgeOldData">If should be purged old data of policies to fetch. (optional)</param>
        /// <param name="subDescription">Support for like search for description parameter. (optional)</param>
        /// <param name="trackingId">Tracking IDs of policies to fetch. (optional)</param>
        /// <returns>ApiResponse of Policy</returns>
        ApiResponse<Policy> GetPoliciesWithHttpInfo (List<string> description = null, List<string> id = null, List<string> importedTime = null, string importedTimeRange = null, List<string> modifiedTime = null, List<string> name = null, List<string> nodeScope = null, string pageLimit = null, string pageStart = null, List<string> purgeDataOlderThanDays = null, bool? purgeOldData = null, List<string> subDescription = null, List<string> trackingId = null);
        /// <summary>
        /// Get policy details by ID (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns the details of a single policy.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyId">ID of policy to fetch</param>
        /// <returns>Policy</returns>
        Policy GetPolicyById (string rkPolicyId);

        /// <summary>
        /// Get policy details by ID (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns the details of a single policy.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyId">ID of policy to fetch</param>
        /// <returns>ApiResponse of Policy</returns>
        ApiResponse<Policy> GetPolicyByIdWithHttpInfo (string rkPolicyId);
        /// <summary>
        /// Post a request to run policies (since 1.5)
        /// </summary>
        /// <remarks>
        /// Allows evaluation of policy test criteria against previously harvested element versions for a specified set of policies and nodes. This does not harvest state from monitored hosts.   Use this after updating or importing policy content to refresh policy test results.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Policies and list of Nodes where Policies should be run. List of Nodes is optional. (optional)</param>
        /// <returns></returns>
        void RunPolicies (PolicyRun body = null);

        /// <summary>
        /// Post a request to run policies (since 1.5)
        /// </summary>
        /// <remarks>
        /// Allows evaluation of policy test criteria against previously harvested element versions for a specified set of policies and nodes. This does not harvest state from monitored hosts.   Use this after updating or importing policy content to refresh policy test results.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Policies and list of Nodes where Policies should be run. List of Nodes is optional. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RunPoliciesWithHttpInfo (PolicyRun body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a policy (since 1.11)
        /// </summary>
        /// <remarks>
        /// Removes a policy, leaving any child policy groups and tests in the unlinked group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyId">ID of policy to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePolicyAsync (string rkPolicyId);

        /// <summary>
        /// Delete a policy (since 1.11)
        /// </summary>
        /// <remarks>
        /// Removes a policy, leaving any child policy groups and tests in the unlinked group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyId">ID of policy to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePolicyAsyncWithHttpInfo (string rkPolicyId);
        /// <summary>
        /// Get included nodes of a policy (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns a list of all nodes in scope for a policy by virtue of the 3 policy level node scoping criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyId">ID of policy to fetch</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetIncludedNodesAsync (string rkPolicyId);

        /// <summary>
        /// Get included nodes of a policy (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns a list of all nodes in scope for a policy by virtue of the 3 policy level node scoping criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyId">ID of policy to fetch</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetIncludedNodesAsyncWithHttpInfo (string rkPolicyId);
        /// <summary>
        /// Search policies (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns a list of all policies or those that match the provided filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Descriptions of policies to fetch. (optional)</param>
        /// <param name="id">IDs of policies to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of policies to fetch. (optional)</param>
        /// <param name="importedTimeRange">Imported time range of policy to fetch (optional)</param>
        /// <param name="modifiedTime">Modified times of policies to fetch. (optional)</param>
        /// <param name="name">Names of policies to fetch. (optional)</param>
        /// <param name="nodeScope">Node scopes of policies to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="purgeDataOlderThanDays">Days to purge old data of policies to fetch. (optional)</param>
        /// <param name="purgeOldData">If should be purged old data of policies to fetch. (optional)</param>
        /// <param name="subDescription">Support for like search for description parameter. (optional)</param>
        /// <param name="trackingId">Tracking IDs of policies to fetch. (optional)</param>
        /// <returns>Task of Policy</returns>
        System.Threading.Tasks.Task<Policy> GetPoliciesAsync (List<string> description = null, List<string> id = null, List<string> importedTime = null, string importedTimeRange = null, List<string> modifiedTime = null, List<string> name = null, List<string> nodeScope = null, string pageLimit = null, string pageStart = null, List<string> purgeDataOlderThanDays = null, bool? purgeOldData = null, List<string> subDescription = null, List<string> trackingId = null);

        /// <summary>
        /// Search policies (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns a list of all policies or those that match the provided filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Descriptions of policies to fetch. (optional)</param>
        /// <param name="id">IDs of policies to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of policies to fetch. (optional)</param>
        /// <param name="importedTimeRange">Imported time range of policy to fetch (optional)</param>
        /// <param name="modifiedTime">Modified times of policies to fetch. (optional)</param>
        /// <param name="name">Names of policies to fetch. (optional)</param>
        /// <param name="nodeScope">Node scopes of policies to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="purgeDataOlderThanDays">Days to purge old data of policies to fetch. (optional)</param>
        /// <param name="purgeOldData">If should be purged old data of policies to fetch. (optional)</param>
        /// <param name="subDescription">Support for like search for description parameter. (optional)</param>
        /// <param name="trackingId">Tracking IDs of policies to fetch. (optional)</param>
        /// <returns>Task of ApiResponse (Policy)</returns>
        System.Threading.Tasks.Task<ApiResponse<Policy>> GetPoliciesAsyncWithHttpInfo (List<string> description = null, List<string> id = null, List<string> importedTime = null, string importedTimeRange = null, List<string> modifiedTime = null, List<string> name = null, List<string> nodeScope = null, string pageLimit = null, string pageStart = null, List<string> purgeDataOlderThanDays = null, bool? purgeOldData = null, List<string> subDescription = null, List<string> trackingId = null);
        /// <summary>
        /// Get policy details by ID (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns the details of a single policy.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyId">ID of policy to fetch</param>
        /// <returns>Task of Policy</returns>
        System.Threading.Tasks.Task<Policy> GetPolicyByIdAsync (string rkPolicyId);

        /// <summary>
        /// Get policy details by ID (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns the details of a single policy.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyId">ID of policy to fetch</param>
        /// <returns>Task of ApiResponse (Policy)</returns>
        System.Threading.Tasks.Task<ApiResponse<Policy>> GetPolicyByIdAsyncWithHttpInfo (string rkPolicyId);
        /// <summary>
        /// Post a request to run policies (since 1.5)
        /// </summary>
        /// <remarks>
        /// Allows evaluation of policy test criteria against previously harvested element versions for a specified set of policies and nodes. This does not harvest state from monitored hosts.   Use this after updating or importing policy content to refresh policy test results.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Policies and list of Nodes where Policies should be run. List of Nodes is optional. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RunPoliciesAsync (PolicyRun body = null);

        /// <summary>
        /// Post a request to run policies (since 1.5)
        /// </summary>
        /// <remarks>
        /// Allows evaluation of policy test criteria against previously harvested element versions for a specified set of policies and nodes. This does not harvest state from monitored hosts.   Use this after updating or importing policy content to refresh policy test results.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Policies and list of Nodes where Policies should be run. List of Nodes is optional. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RunPoliciesAsyncWithHttpInfo (PolicyRun body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PoliciesApi : IPoliciesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PoliciesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PoliciesApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PoliciesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PoliciesApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a policy (since 1.11) Removes a policy, leaving any child policy groups and tests in the unlinked group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyId">ID of policy to delete</param>
        /// <returns></returns>
        public void DeletePolicy (string rkPolicyId)
        {
             DeletePolicyWithHttpInfo(rkPolicyId);
        }

        /// <summary>
        /// Delete a policy (since 1.11) Removes a policy, leaving any child policy groups and tests in the unlinked group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyId">ID of policy to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePolicyWithHttpInfo (string rkPolicyId)
        {
            // verify the required parameter 'rkPolicyId' is set
            if (rkPolicyId == null)
                throw new ApiException(400, "Missing required parameter 'rkPolicyId' when calling PoliciesApi->DeletePolicy");

            var localVarPath = "/policies/{rkPolicyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkPolicyId != null) localVarPathParams.Add("rkPolicyId", this.Configuration.ApiClient.ParameterToString(rkPolicyId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a policy (since 1.11) Removes a policy, leaving any child policy groups and tests in the unlinked group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyId">ID of policy to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePolicyAsync (string rkPolicyId)
        {
             await DeletePolicyAsyncWithHttpInfo(rkPolicyId);

        }

        /// <summary>
        /// Delete a policy (since 1.11) Removes a policy, leaving any child policy groups and tests in the unlinked group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyId">ID of policy to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePolicyAsyncWithHttpInfo (string rkPolicyId)
        {
            // verify the required parameter 'rkPolicyId' is set
            if (rkPolicyId == null)
                throw new ApiException(400, "Missing required parameter 'rkPolicyId' when calling PoliciesApi->DeletePolicy");

            var localVarPath = "/policies/{rkPolicyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkPolicyId != null) localVarPathParams.Add("rkPolicyId", this.Configuration.ApiClient.ParameterToString(rkPolicyId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get included nodes of a policy (since 1.5) Returns a list of all nodes in scope for a policy by virtue of the 3 policy level node scoping criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyId">ID of policy to fetch</param>
        /// <returns>string</returns>
        public string GetIncludedNodes (string rkPolicyId)
        {
             ApiResponse<string> localVarResponse = GetIncludedNodesWithHttpInfo(rkPolicyId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get included nodes of a policy (since 1.5) Returns a list of all nodes in scope for a policy by virtue of the 3 policy level node scoping criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyId">ID of policy to fetch</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetIncludedNodesWithHttpInfo (string rkPolicyId)
        {
            // verify the required parameter 'rkPolicyId' is set
            if (rkPolicyId == null)
                throw new ApiException(400, "Missing required parameter 'rkPolicyId' when calling PoliciesApi->GetIncludedNodes");

            var localVarPath = "/policies/{rkPolicyId}/includedNodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkPolicyId != null) localVarPathParams.Add("rkPolicyId", this.Configuration.ApiClient.ParameterToString(rkPolicyId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIncludedNodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get included nodes of a policy (since 1.5) Returns a list of all nodes in scope for a policy by virtue of the 3 policy level node scoping criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyId">ID of policy to fetch</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetIncludedNodesAsync (string rkPolicyId)
        {
             ApiResponse<string> localVarResponse = await GetIncludedNodesAsyncWithHttpInfo(rkPolicyId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get included nodes of a policy (since 1.5) Returns a list of all nodes in scope for a policy by virtue of the 3 policy level node scoping criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyId">ID of policy to fetch</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetIncludedNodesAsyncWithHttpInfo (string rkPolicyId)
        {
            // verify the required parameter 'rkPolicyId' is set
            if (rkPolicyId == null)
                throw new ApiException(400, "Missing required parameter 'rkPolicyId' when calling PoliciesApi->GetIncludedNodes");

            var localVarPath = "/policies/{rkPolicyId}/includedNodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkPolicyId != null) localVarPathParams.Add("rkPolicyId", this.Configuration.ApiClient.ParameterToString(rkPolicyId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIncludedNodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Search policies (since 1.5) Returns a list of all policies or those that match the provided filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Descriptions of policies to fetch. (optional)</param>
        /// <param name="id">IDs of policies to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of policies to fetch. (optional)</param>
        /// <param name="importedTimeRange">Imported time range of policy to fetch (optional)</param>
        /// <param name="modifiedTime">Modified times of policies to fetch. (optional)</param>
        /// <param name="name">Names of policies to fetch. (optional)</param>
        /// <param name="nodeScope">Node scopes of policies to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="purgeDataOlderThanDays">Days to purge old data of policies to fetch. (optional)</param>
        /// <param name="purgeOldData">If should be purged old data of policies to fetch. (optional)</param>
        /// <param name="subDescription">Support for like search for description parameter. (optional)</param>
        /// <param name="trackingId">Tracking IDs of policies to fetch. (optional)</param>
        /// <returns>Policy</returns>
        public Policy GetPolicies (List<string> description = null, List<string> id = null, List<string> importedTime = null, string importedTimeRange = null, List<string> modifiedTime = null, List<string> name = null, List<string> nodeScope = null, string pageLimit = null, string pageStart = null, List<string> purgeDataOlderThanDays = null, bool? purgeOldData = null, List<string> subDescription = null, List<string> trackingId = null)
        {
             ApiResponse<Policy> localVarResponse = GetPoliciesWithHttpInfo(description, id, importedTime, importedTimeRange, modifiedTime, name, nodeScope, pageLimit, pageStart, purgeDataOlderThanDays, purgeOldData, subDescription, trackingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search policies (since 1.5) Returns a list of all policies or those that match the provided filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Descriptions of policies to fetch. (optional)</param>
        /// <param name="id">IDs of policies to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of policies to fetch. (optional)</param>
        /// <param name="importedTimeRange">Imported time range of policy to fetch (optional)</param>
        /// <param name="modifiedTime">Modified times of policies to fetch. (optional)</param>
        /// <param name="name">Names of policies to fetch. (optional)</param>
        /// <param name="nodeScope">Node scopes of policies to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="purgeDataOlderThanDays">Days to purge old data of policies to fetch. (optional)</param>
        /// <param name="purgeOldData">If should be purged old data of policies to fetch. (optional)</param>
        /// <param name="subDescription">Support for like search for description parameter. (optional)</param>
        /// <param name="trackingId">Tracking IDs of policies to fetch. (optional)</param>
        /// <returns>ApiResponse of Policy</returns>
        public ApiResponse< Policy > GetPoliciesWithHttpInfo (List<string> description = null, List<string> id = null, List<string> importedTime = null, string importedTimeRange = null, List<string> modifiedTime = null, List<string> name = null, List<string> nodeScope = null, string pageLimit = null, string pageStart = null, List<string> purgeDataOlderThanDays = null, bool? purgeOldData = null, List<string> subDescription = null, List<string> trackingId = null)
        {

            var localVarPath = "/policies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "description", description)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (importedTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "importedTime", importedTime)); // query parameter
            if (importedTimeRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "importedTimeRange", importedTimeRange)); // query parameter
            if (modifiedTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "modifiedTime", modifiedTime)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (nodeScope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "nodeScope", nodeScope)); // query parameter
            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageLimit", pageLimit)); // query parameter
            if (pageStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageStart", pageStart)); // query parameter
            if (purgeDataOlderThanDays != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "purgeDataOlderThanDays", purgeDataOlderThanDays)); // query parameter
            if (purgeOldData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "purgeOldData", purgeOldData)); // query parameter
            if (subDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sub_description", subDescription)); // query parameter
            if (trackingId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "trackingId", trackingId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPolicies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Policy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Policy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Policy)));
        }

        /// <summary>
        /// Search policies (since 1.5) Returns a list of all policies or those that match the provided filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Descriptions of policies to fetch. (optional)</param>
        /// <param name="id">IDs of policies to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of policies to fetch. (optional)</param>
        /// <param name="importedTimeRange">Imported time range of policy to fetch (optional)</param>
        /// <param name="modifiedTime">Modified times of policies to fetch. (optional)</param>
        /// <param name="name">Names of policies to fetch. (optional)</param>
        /// <param name="nodeScope">Node scopes of policies to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="purgeDataOlderThanDays">Days to purge old data of policies to fetch. (optional)</param>
        /// <param name="purgeOldData">If should be purged old data of policies to fetch. (optional)</param>
        /// <param name="subDescription">Support for like search for description parameter. (optional)</param>
        /// <param name="trackingId">Tracking IDs of policies to fetch. (optional)</param>
        /// <returns>Task of Policy</returns>
        public async System.Threading.Tasks.Task<Policy> GetPoliciesAsync (List<string> description = null, List<string> id = null, List<string> importedTime = null, string importedTimeRange = null, List<string> modifiedTime = null, List<string> name = null, List<string> nodeScope = null, string pageLimit = null, string pageStart = null, List<string> purgeDataOlderThanDays = null, bool? purgeOldData = null, List<string> subDescription = null, List<string> trackingId = null)
        {
             ApiResponse<Policy> localVarResponse = await GetPoliciesAsyncWithHttpInfo(description, id, importedTime, importedTimeRange, modifiedTime, name, nodeScope, pageLimit, pageStart, purgeDataOlderThanDays, purgeOldData, subDescription, trackingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search policies (since 1.5) Returns a list of all policies or those that match the provided filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="description">Descriptions of policies to fetch. (optional)</param>
        /// <param name="id">IDs of policies to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of policies to fetch. (optional)</param>
        /// <param name="importedTimeRange">Imported time range of policy to fetch (optional)</param>
        /// <param name="modifiedTime">Modified times of policies to fetch. (optional)</param>
        /// <param name="name">Names of policies to fetch. (optional)</param>
        /// <param name="nodeScope">Node scopes of policies to fetch. (optional)</param>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="purgeDataOlderThanDays">Days to purge old data of policies to fetch. (optional)</param>
        /// <param name="purgeOldData">If should be purged old data of policies to fetch. (optional)</param>
        /// <param name="subDescription">Support for like search for description parameter. (optional)</param>
        /// <param name="trackingId">Tracking IDs of policies to fetch. (optional)</param>
        /// <returns>Task of ApiResponse (Policy)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Policy>> GetPoliciesAsyncWithHttpInfo (List<string> description = null, List<string> id = null, List<string> importedTime = null, string importedTimeRange = null, List<string> modifiedTime = null, List<string> name = null, List<string> nodeScope = null, string pageLimit = null, string pageStart = null, List<string> purgeDataOlderThanDays = null, bool? purgeOldData = null, List<string> subDescription = null, List<string> trackingId = null)
        {

            var localVarPath = "/policies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "description", description)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (importedTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "importedTime", importedTime)); // query parameter
            if (importedTimeRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "importedTimeRange", importedTimeRange)); // query parameter
            if (modifiedTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "modifiedTime", modifiedTime)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (nodeScope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "nodeScope", nodeScope)); // query parameter
            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageLimit", pageLimit)); // query parameter
            if (pageStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageStart", pageStart)); // query parameter
            if (purgeDataOlderThanDays != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "purgeDataOlderThanDays", purgeDataOlderThanDays)); // query parameter
            if (purgeOldData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "purgeOldData", purgeOldData)); // query parameter
            if (subDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sub_description", subDescription)); // query parameter
            if (trackingId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "trackingId", trackingId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPolicies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Policy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Policy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Policy)));
        }

        /// <summary>
        /// Get policy details by ID (since 1.5) Returns the details of a single policy.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyId">ID of policy to fetch</param>
        /// <returns>Policy</returns>
        public Policy GetPolicyById (string rkPolicyId)
        {
             ApiResponse<Policy> localVarResponse = GetPolicyByIdWithHttpInfo(rkPolicyId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get policy details by ID (since 1.5) Returns the details of a single policy.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyId">ID of policy to fetch</param>
        /// <returns>ApiResponse of Policy</returns>
        public ApiResponse< Policy > GetPolicyByIdWithHttpInfo (string rkPolicyId)
        {
            // verify the required parameter 'rkPolicyId' is set
            if (rkPolicyId == null)
                throw new ApiException(400, "Missing required parameter 'rkPolicyId' when calling PoliciesApi->GetPolicyById");

            var localVarPath = "/policies/{rkPolicyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkPolicyId != null) localVarPathParams.Add("rkPolicyId", this.Configuration.ApiClient.ParameterToString(rkPolicyId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPolicyById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Policy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Policy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Policy)));
        }

        /// <summary>
        /// Get policy details by ID (since 1.5) Returns the details of a single policy.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyId">ID of policy to fetch</param>
        /// <returns>Task of Policy</returns>
        public async System.Threading.Tasks.Task<Policy> GetPolicyByIdAsync (string rkPolicyId)
        {
             ApiResponse<Policy> localVarResponse = await GetPolicyByIdAsyncWithHttpInfo(rkPolicyId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get policy details by ID (since 1.5) Returns the details of a single policy.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkPolicyId">ID of policy to fetch</param>
        /// <returns>Task of ApiResponse (Policy)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Policy>> GetPolicyByIdAsyncWithHttpInfo (string rkPolicyId)
        {
            // verify the required parameter 'rkPolicyId' is set
            if (rkPolicyId == null)
                throw new ApiException(400, "Missing required parameter 'rkPolicyId' when calling PoliciesApi->GetPolicyById");

            var localVarPath = "/policies/{rkPolicyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkPolicyId != null) localVarPathParams.Add("rkPolicyId", this.Configuration.ApiClient.ParameterToString(rkPolicyId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPolicyById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Policy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Policy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Policy)));
        }

        /// <summary>
        /// Post a request to run policies (since 1.5) Allows evaluation of policy test criteria against previously harvested element versions for a specified set of policies and nodes. This does not harvest state from monitored hosts.   Use this after updating or importing policy content to refresh policy test results.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Policies and list of Nodes where Policies should be run. List of Nodes is optional. (optional)</param>
        /// <returns></returns>
        public void RunPolicies (PolicyRun body = null)
        {
             RunPoliciesWithHttpInfo(body);
        }

        /// <summary>
        /// Post a request to run policies (since 1.5) Allows evaluation of policy test criteria against previously harvested element versions for a specified set of policies and nodes. This does not harvest state from monitored hosts.   Use this after updating or importing policy content to refresh policy test results.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Policies and list of Nodes where Policies should be run. List of Nodes is optional. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RunPoliciesWithHttpInfo (PolicyRun body = null)
        {

            var localVarPath = "/policies/run";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RunPolicies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Post a request to run policies (since 1.5) Allows evaluation of policy test criteria against previously harvested element versions for a specified set of policies and nodes. This does not harvest state from monitored hosts.   Use this after updating or importing policy content to refresh policy test results.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Policies and list of Nodes where Policies should be run. List of Nodes is optional. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RunPoliciesAsync (PolicyRun body = null)
        {
             await RunPoliciesAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Post a request to run policies (since 1.5) Allows evaluation of policy test criteria against previously harvested element versions for a specified set of policies and nodes. This does not harvest state from monitored hosts.   Use this after updating or importing policy content to refresh policy test results.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of Policies and list of Nodes where Policies should be run. List of Nodes is optional. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RunPoliciesAsyncWithHttpInfo (PolicyRun body = null)
        {

            var localVarPath = "/policies/run";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RunPolicies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}

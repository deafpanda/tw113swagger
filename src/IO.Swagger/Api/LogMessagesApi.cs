/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.12.1.bmaster.r20170922182356-4e84151.b1741
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILogMessagesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a log message (since 1.9)
        /// </summary>
        /// <remarks>
        /// Returns a newly created log message of one of the following types: System, Tacacs, Radius, SOAP Client. System messages are general, and can optionally be associated to one or more TE objects. Tacacs and Radius messages require a single Node object in the objects field. Log message levels may be INFO or ERROR.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A log entry that stores information about an event (optional)</param>
        /// <returns>LogMessage</returns>
        LogMessage CreateLogMessage (LogMessage body = null);

        /// <summary>
        /// Create a log message (since 1.9)
        /// </summary>
        /// <remarks>
        /// Returns a newly created log message of one of the following types: System, Tacacs, Radius, SOAP Client. System messages are general, and can optionally be associated to one or more TE objects. Tacacs and Radius messages require a single Node object in the objects field. Log message levels may be INFO or ERROR.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A log entry that stores information about an event (optional)</param>
        /// <returns>ApiResponse of LogMessage</returns>
        ApiResponse<LogMessage> CreateLogMessageWithHttpInfo (LogMessage body = null);
        /// <summary>
        /// Get messages in the TE log manager (since 1.6)
        /// </summary>
        /// <remarks>
        /// List all log manager messages or those that match the filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageLimit">Page limit for paging support. (optional)</param>
        /// <param name="pageStart">Page start for paging support. (optional)</param>
        /// <param name="id">IDs of log messages to fetch. (optional)</param>
        /// <param name="level">Level of log messages to fetch. May be one of ERROR, INFO, UNKNOWN (optional)</param>
        /// <param name="time">Times of creation of log messages to fetch. (optional)</param>
        /// <param name="timeRange">Creation time range of log messages to fetch. (optional)</param>
        /// <param name="type">Types of log messages to fetch. (optional)</param>
        /// <param name="message">Messages of log messages to fetch. (optional)</param>
        /// <param name="subMessage">Substring matching for messages of log messages to fetch. (optional)</param>
        /// <param name="username">Username of log messages to fetch. (optional)</param>
        /// <param name="_object">Associated object readable keys of log messages to fetch. (optional)</param>
        /// <returns>List&lt;LogMessage&gt;</returns>
        List<LogMessage> GetLogMessages (string pageLimit = null, string pageStart = null, List<string> id = null, List<string> level = null, List<string> time = null, string timeRange = null, List<string> type = null, List<string> message = null, List<string> subMessage = null, List<string> username = null, List<string> _object = null);

        /// <summary>
        /// Get messages in the TE log manager (since 1.6)
        /// </summary>
        /// <remarks>
        /// List all log manager messages or those that match the filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageLimit">Page limit for paging support. (optional)</param>
        /// <param name="pageStart">Page start for paging support. (optional)</param>
        /// <param name="id">IDs of log messages to fetch. (optional)</param>
        /// <param name="level">Level of log messages to fetch. May be one of ERROR, INFO, UNKNOWN (optional)</param>
        /// <param name="time">Times of creation of log messages to fetch. (optional)</param>
        /// <param name="timeRange">Creation time range of log messages to fetch. (optional)</param>
        /// <param name="type">Types of log messages to fetch. (optional)</param>
        /// <param name="message">Messages of log messages to fetch. (optional)</param>
        /// <param name="subMessage">Substring matching for messages of log messages to fetch. (optional)</param>
        /// <param name="username">Username of log messages to fetch. (optional)</param>
        /// <param name="_object">Associated object readable keys of log messages to fetch. (optional)</param>
        /// <returns>ApiResponse of List&lt;LogMessage&gt;</returns>
        ApiResponse<List<LogMessage>> GetLogMessagesWithHttpInfo (string pageLimit = null, string pageStart = null, List<string> id = null, List<string> level = null, List<string> time = null, string timeRange = null, List<string> type = null, List<string> message = null, List<string> subMessage = null, List<string> username = null, List<string> _object = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a log message (since 1.9)
        /// </summary>
        /// <remarks>
        /// Returns a newly created log message of one of the following types: System, Tacacs, Radius, SOAP Client. System messages are general, and can optionally be associated to one or more TE objects. Tacacs and Radius messages require a single Node object in the objects field. Log message levels may be INFO or ERROR.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A log entry that stores information about an event (optional)</param>
        /// <returns>Task of LogMessage</returns>
        System.Threading.Tasks.Task<LogMessage> CreateLogMessageAsync (LogMessage body = null);

        /// <summary>
        /// Create a log message (since 1.9)
        /// </summary>
        /// <remarks>
        /// Returns a newly created log message of one of the following types: System, Tacacs, Radius, SOAP Client. System messages are general, and can optionally be associated to one or more TE objects. Tacacs and Radius messages require a single Node object in the objects field. Log message levels may be INFO or ERROR.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A log entry that stores information about an event (optional)</param>
        /// <returns>Task of ApiResponse (LogMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogMessage>> CreateLogMessageAsyncWithHttpInfo (LogMessage body = null);
        /// <summary>
        /// Get messages in the TE log manager (since 1.6)
        /// </summary>
        /// <remarks>
        /// List all log manager messages or those that match the filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageLimit">Page limit for paging support. (optional)</param>
        /// <param name="pageStart">Page start for paging support. (optional)</param>
        /// <param name="id">IDs of log messages to fetch. (optional)</param>
        /// <param name="level">Level of log messages to fetch. May be one of ERROR, INFO, UNKNOWN (optional)</param>
        /// <param name="time">Times of creation of log messages to fetch. (optional)</param>
        /// <param name="timeRange">Creation time range of log messages to fetch. (optional)</param>
        /// <param name="type">Types of log messages to fetch. (optional)</param>
        /// <param name="message">Messages of log messages to fetch. (optional)</param>
        /// <param name="subMessage">Substring matching for messages of log messages to fetch. (optional)</param>
        /// <param name="username">Username of log messages to fetch. (optional)</param>
        /// <param name="_object">Associated object readable keys of log messages to fetch. (optional)</param>
        /// <returns>Task of List&lt;LogMessage&gt;</returns>
        System.Threading.Tasks.Task<List<LogMessage>> GetLogMessagesAsync (string pageLimit = null, string pageStart = null, List<string> id = null, List<string> level = null, List<string> time = null, string timeRange = null, List<string> type = null, List<string> message = null, List<string> subMessage = null, List<string> username = null, List<string> _object = null);

        /// <summary>
        /// Get messages in the TE log manager (since 1.6)
        /// </summary>
        /// <remarks>
        /// List all log manager messages or those that match the filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageLimit">Page limit for paging support. (optional)</param>
        /// <param name="pageStart">Page start for paging support. (optional)</param>
        /// <param name="id">IDs of log messages to fetch. (optional)</param>
        /// <param name="level">Level of log messages to fetch. May be one of ERROR, INFO, UNKNOWN (optional)</param>
        /// <param name="time">Times of creation of log messages to fetch. (optional)</param>
        /// <param name="timeRange">Creation time range of log messages to fetch. (optional)</param>
        /// <param name="type">Types of log messages to fetch. (optional)</param>
        /// <param name="message">Messages of log messages to fetch. (optional)</param>
        /// <param name="subMessage">Substring matching for messages of log messages to fetch. (optional)</param>
        /// <param name="username">Username of log messages to fetch. (optional)</param>
        /// <param name="_object">Associated object readable keys of log messages to fetch. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LogMessage&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LogMessage>>> GetLogMessagesAsyncWithHttpInfo (string pageLimit = null, string pageStart = null, List<string> id = null, List<string> level = null, List<string> time = null, string timeRange = null, List<string> type = null, List<string> message = null, List<string> subMessage = null, List<string> username = null, List<string> _object = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LogMessagesApi : ILogMessagesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LogMessagesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LogMessagesApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogMessagesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LogMessagesApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a log message (since 1.9) Returns a newly created log message of one of the following types: System, Tacacs, Radius, SOAP Client. System messages are general, and can optionally be associated to one or more TE objects. Tacacs and Radius messages require a single Node object in the objects field. Log message levels may be INFO or ERROR.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A log entry that stores information about an event (optional)</param>
        /// <returns>LogMessage</returns>
        public LogMessage CreateLogMessage (LogMessage body = null)
        {
             ApiResponse<LogMessage> localVarResponse = CreateLogMessageWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a log message (since 1.9) Returns a newly created log message of one of the following types: System, Tacacs, Radius, SOAP Client. System messages are general, and can optionally be associated to one or more TE objects. Tacacs and Radius messages require a single Node object in the objects field. Log message levels may be INFO or ERROR.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A log entry that stores information about an event (optional)</param>
        /// <returns>ApiResponse of LogMessage</returns>
        public ApiResponse< LogMessage > CreateLogMessageWithHttpInfo (LogMessage body = null)
        {

            var localVarPath = "/logMessages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLogMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogMessage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogMessage)));
        }

        /// <summary>
        /// Create a log message (since 1.9) Returns a newly created log message of one of the following types: System, Tacacs, Radius, SOAP Client. System messages are general, and can optionally be associated to one or more TE objects. Tacacs and Radius messages require a single Node object in the objects field. Log message levels may be INFO or ERROR.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A log entry that stores information about an event (optional)</param>
        /// <returns>Task of LogMessage</returns>
        public async System.Threading.Tasks.Task<LogMessage> CreateLogMessageAsync (LogMessage body = null)
        {
             ApiResponse<LogMessage> localVarResponse = await CreateLogMessageAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a log message (since 1.9) Returns a newly created log message of one of the following types: System, Tacacs, Radius, SOAP Client. System messages are general, and can optionally be associated to one or more TE objects. Tacacs and Radius messages require a single Node object in the objects field. Log message levels may be INFO or ERROR.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A log entry that stores information about an event (optional)</param>
        /// <returns>Task of ApiResponse (LogMessage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogMessage>> CreateLogMessageAsyncWithHttpInfo (LogMessage body = null)
        {

            var localVarPath = "/logMessages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLogMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogMessage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogMessage)));
        }

        /// <summary>
        /// Get messages in the TE log manager (since 1.6) List all log manager messages or those that match the filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageLimit">Page limit for paging support. (optional)</param>
        /// <param name="pageStart">Page start for paging support. (optional)</param>
        /// <param name="id">IDs of log messages to fetch. (optional)</param>
        /// <param name="level">Level of log messages to fetch. May be one of ERROR, INFO, UNKNOWN (optional)</param>
        /// <param name="time">Times of creation of log messages to fetch. (optional)</param>
        /// <param name="timeRange">Creation time range of log messages to fetch. (optional)</param>
        /// <param name="type">Types of log messages to fetch. (optional)</param>
        /// <param name="message">Messages of log messages to fetch. (optional)</param>
        /// <param name="subMessage">Substring matching for messages of log messages to fetch. (optional)</param>
        /// <param name="username">Username of log messages to fetch. (optional)</param>
        /// <param name="_object">Associated object readable keys of log messages to fetch. (optional)</param>
        /// <returns>List&lt;LogMessage&gt;</returns>
        public List<LogMessage> GetLogMessages (string pageLimit = null, string pageStart = null, List<string> id = null, List<string> level = null, List<string> time = null, string timeRange = null, List<string> type = null, List<string> message = null, List<string> subMessage = null, List<string> username = null, List<string> _object = null)
        {
             ApiResponse<List<LogMessage>> localVarResponse = GetLogMessagesWithHttpInfo(pageLimit, pageStart, id, level, time, timeRange, type, message, subMessage, username, _object);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get messages in the TE log manager (since 1.6) List all log manager messages or those that match the filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageLimit">Page limit for paging support. (optional)</param>
        /// <param name="pageStart">Page start for paging support. (optional)</param>
        /// <param name="id">IDs of log messages to fetch. (optional)</param>
        /// <param name="level">Level of log messages to fetch. May be one of ERROR, INFO, UNKNOWN (optional)</param>
        /// <param name="time">Times of creation of log messages to fetch. (optional)</param>
        /// <param name="timeRange">Creation time range of log messages to fetch. (optional)</param>
        /// <param name="type">Types of log messages to fetch. (optional)</param>
        /// <param name="message">Messages of log messages to fetch. (optional)</param>
        /// <param name="subMessage">Substring matching for messages of log messages to fetch. (optional)</param>
        /// <param name="username">Username of log messages to fetch. (optional)</param>
        /// <param name="_object">Associated object readable keys of log messages to fetch. (optional)</param>
        /// <returns>ApiResponse of List&lt;LogMessage&gt;</returns>
        public ApiResponse< List<LogMessage> > GetLogMessagesWithHttpInfo (string pageLimit = null, string pageStart = null, List<string> id = null, List<string> level = null, List<string> time = null, string timeRange = null, List<string> type = null, List<string> message = null, List<string> subMessage = null, List<string> username = null, List<string> _object = null)
        {

            var localVarPath = "/logMessages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageLimit", pageLimit)); // query parameter
            if (pageStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageStart", pageStart)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "level", level)); // query parameter
            if (time != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "time", time)); // query parameter
            if (timeRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeRange", timeRange)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter
            if (message != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "message", message)); // query parameter
            if (subMessage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sub_message", subMessage)); // query parameter
            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "username", username)); // query parameter
            if (_object != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "object", _object)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLogMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LogMessage>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LogMessage>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LogMessage>)));
        }

        /// <summary>
        /// Get messages in the TE log manager (since 1.6) List all log manager messages or those that match the filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageLimit">Page limit for paging support. (optional)</param>
        /// <param name="pageStart">Page start for paging support. (optional)</param>
        /// <param name="id">IDs of log messages to fetch. (optional)</param>
        /// <param name="level">Level of log messages to fetch. May be one of ERROR, INFO, UNKNOWN (optional)</param>
        /// <param name="time">Times of creation of log messages to fetch. (optional)</param>
        /// <param name="timeRange">Creation time range of log messages to fetch. (optional)</param>
        /// <param name="type">Types of log messages to fetch. (optional)</param>
        /// <param name="message">Messages of log messages to fetch. (optional)</param>
        /// <param name="subMessage">Substring matching for messages of log messages to fetch. (optional)</param>
        /// <param name="username">Username of log messages to fetch. (optional)</param>
        /// <param name="_object">Associated object readable keys of log messages to fetch. (optional)</param>
        /// <returns>Task of List&lt;LogMessage&gt;</returns>
        public async System.Threading.Tasks.Task<List<LogMessage>> GetLogMessagesAsync (string pageLimit = null, string pageStart = null, List<string> id = null, List<string> level = null, List<string> time = null, string timeRange = null, List<string> type = null, List<string> message = null, List<string> subMessage = null, List<string> username = null, List<string> _object = null)
        {
             ApiResponse<List<LogMessage>> localVarResponse = await GetLogMessagesAsyncWithHttpInfo(pageLimit, pageStart, id, level, time, timeRange, type, message, subMessage, username, _object);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get messages in the TE log manager (since 1.6) List all log manager messages or those that match the filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageLimit">Page limit for paging support. (optional)</param>
        /// <param name="pageStart">Page start for paging support. (optional)</param>
        /// <param name="id">IDs of log messages to fetch. (optional)</param>
        /// <param name="level">Level of log messages to fetch. May be one of ERROR, INFO, UNKNOWN (optional)</param>
        /// <param name="time">Times of creation of log messages to fetch. (optional)</param>
        /// <param name="timeRange">Creation time range of log messages to fetch. (optional)</param>
        /// <param name="type">Types of log messages to fetch. (optional)</param>
        /// <param name="message">Messages of log messages to fetch. (optional)</param>
        /// <param name="subMessage">Substring matching for messages of log messages to fetch. (optional)</param>
        /// <param name="username">Username of log messages to fetch. (optional)</param>
        /// <param name="_object">Associated object readable keys of log messages to fetch. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LogMessage&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LogMessage>>> GetLogMessagesAsyncWithHttpInfo (string pageLimit = null, string pageStart = null, List<string> id = null, List<string> level = null, List<string> time = null, string timeRange = null, List<string> type = null, List<string> message = null, List<string> subMessage = null, List<string> username = null, List<string> _object = null)
        {

            var localVarPath = "/logMessages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageLimit", pageLimit)); // query parameter
            if (pageStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageStart", pageStart)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "level", level)); // query parameter
            if (time != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "time", time)); // query parameter
            if (timeRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeRange", timeRange)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter
            if (message != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "message", message)); // query parameter
            if (subMessage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sub_message", subMessage)); // query parameter
            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "username", username)); // query parameter
            if (_object != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "object", _object)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLogMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LogMessage>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LogMessage>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LogMessage>)));
        }

    }
}

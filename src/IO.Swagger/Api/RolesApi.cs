/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.13.0.bmaster.r20180119190259-8b60eaa.b1753
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRolesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a permission to a role (since 1.1)
        /// </summary>
        /// <remarks>
        /// Associates a Permission with a role, granting it to all users that have that Role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to create the association</param>
        /// <param name="rkPermissionId">ID of permission to create the association</param>
        /// <returns></returns>
        void AssociatePermissionToRole (string rkRoleId, string rkPermissionId);

        /// <summary>
        /// Add a permission to a role (since 1.1)
        /// </summary>
        /// <remarks>
        /// Associates a Permission with a role, granting it to all users that have that Role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to create the association</param>
        /// <param name="rkPermissionId">ID of permission to create the association</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssociatePermissionToRoleWithHttpInfo (string rkRoleId, string rkPermissionId);
        /// <summary>
        /// Post a new role (since 1.1)
        /// </summary>
        /// <remarks>
        /// Posts a request to create a new role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Role object to be created in TE</param>
        /// <returns>Role</returns>
        Role CreateRole (Role body);

        /// <summary>
        /// Post a new role (since 1.1)
        /// </summary>
        /// <remarks>
        /// Posts a request to create a new role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Role object to be created in TE</param>
        /// <returns>ApiResponse of Role</returns>
        ApiResponse<Role> CreateRoleWithHttpInfo (Role body);
        /// <summary>
        /// Delete association between a role and a permission (since 1.1)
        /// </summary>
        /// <remarks>
        /// Removes a permission from the role, no longer granting it to users with that role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to remove the association</param>
        /// <param name="rkPermissionId">ID of permission to remove the association</param>
        /// <returns></returns>
        void DeletePermissionFromRole (string rkRoleId, string rkPermissionId);

        /// <summary>
        /// Delete association between a role and a permission (since 1.1)
        /// </summary>
        /// <remarks>
        /// Removes a permission from the role, no longer granting it to users with that role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to remove the association</param>
        /// <param name="rkPermissionId">ID of permission to remove the association</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePermissionFromRoleWithHttpInfo (string rkRoleId, string rkPermissionId);
        /// <summary>
        /// Delete a role (since 1.1)
        /// </summary>
        /// <remarks>
        /// Removes an existing role from the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to fetch</param>
        /// <returns></returns>
        void DeleteRole (string rkRoleId);

        /// <summary>
        /// Delete a role (since 1.1)
        /// </summary>
        /// <remarks>
        /// Removes an existing role from the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to fetch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRoleWithHttpInfo (string rkRoleId);
        /// <summary>
        /// Get role details by ID (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns the details of a single role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to fetch</param>
        /// <returns>Role</returns>
        Role GetRole (string rkRoleId);

        /// <summary>
        /// Get role details by ID (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns the details of a single role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to fetch</param>
        /// <returns>ApiResponse of Role</returns>
        ApiResponse<Role> GetRoleWithHttpInfo (string rkRoleId);
        /// <summary>
        /// Get the list of permissions associated with a role (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns a list that includes all the permissions that a user is granted by having the specified role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to fetch the permissions from</param>
        /// <returns>Permission</returns>
        Permission GetRolePermissions (string rkRoleId);

        /// <summary>
        /// Get the list of permissions associated with a role (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns a list that includes all the permissions that a user is granted by having the specified role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to fetch the permissions from</param>
        /// <returns>ApiResponse of Permission</returns>
        ApiResponse<Permission> GetRolePermissionsWithHttpInfo (string rkRoleId);
        /// <summary>
        /// Search roles (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns a list of all roles, or those that match the filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="administrator">Role administrator filter. (optional)</param>
        /// <param name="builtin">Role builtin filter. (optional)</param>
        /// <param name="description">Role description to search. (optional)</param>
        /// <param name="id">Role IDs to search. (optional)</param>
        /// <param name="name">Role names to search. (optional)</param>
        /// <param name="subDescription">Role substring criteria for description to search. (optional)</param>
        /// <returns>Role</returns>
        Role GetRoles (bool? administrator = null, bool? builtin = null, List<string> description = null, List<string> id = null, List<string> name = null, List<string> subDescription = null);

        /// <summary>
        /// Search roles (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns a list of all roles, or those that match the filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="administrator">Role administrator filter. (optional)</param>
        /// <param name="builtin">Role builtin filter. (optional)</param>
        /// <param name="description">Role description to search. (optional)</param>
        /// <param name="id">Role IDs to search. (optional)</param>
        /// <param name="name">Role names to search. (optional)</param>
        /// <param name="subDescription">Role substring criteria for description to search. (optional)</param>
        /// <returns>ApiResponse of Role</returns>
        ApiResponse<Role> GetRolesWithHttpInfo (bool? administrator = null, bool? builtin = null, List<string> description = null, List<string> id = null, List<string> name = null, List<string> subDescription = null);
        /// <summary>
        /// Update an existing role (since 1.1)
        /// </summary>
        /// <remarks>
        /// Modifies an existing role to update the submitted fields with new values. Read-only fields should not be submitted.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to be updated</param>
        /// <param name="body">Role description to update the existing role</param>
        /// <returns>Role</returns>
        Role UpdateRole (string rkRoleId, Role body);

        /// <summary>
        /// Update an existing role (since 1.1)
        /// </summary>
        /// <remarks>
        /// Modifies an existing role to update the submitted fields with new values. Read-only fields should not be submitted.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to be updated</param>
        /// <param name="body">Role description to update the existing role</param>
        /// <returns>ApiResponse of Role</returns>
        ApiResponse<Role> UpdateRoleWithHttpInfo (string rkRoleId, Role body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add a permission to a role (since 1.1)
        /// </summary>
        /// <remarks>
        /// Associates a Permission with a role, granting it to all users that have that Role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to create the association</param>
        /// <param name="rkPermissionId">ID of permission to create the association</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssociatePermissionToRoleAsync (string rkRoleId, string rkPermissionId);

        /// <summary>
        /// Add a permission to a role (since 1.1)
        /// </summary>
        /// <remarks>
        /// Associates a Permission with a role, granting it to all users that have that Role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to create the association</param>
        /// <param name="rkPermissionId">ID of permission to create the association</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssociatePermissionToRoleAsyncWithHttpInfo (string rkRoleId, string rkPermissionId);
        /// <summary>
        /// Post a new role (since 1.1)
        /// </summary>
        /// <remarks>
        /// Posts a request to create a new role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Role object to be created in TE</param>
        /// <returns>Task of Role</returns>
        System.Threading.Tasks.Task<Role> CreateRoleAsync (Role body);

        /// <summary>
        /// Post a new role (since 1.1)
        /// </summary>
        /// <remarks>
        /// Posts a request to create a new role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Role object to be created in TE</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        System.Threading.Tasks.Task<ApiResponse<Role>> CreateRoleAsyncWithHttpInfo (Role body);
        /// <summary>
        /// Delete association between a role and a permission (since 1.1)
        /// </summary>
        /// <remarks>
        /// Removes a permission from the role, no longer granting it to users with that role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to remove the association</param>
        /// <param name="rkPermissionId">ID of permission to remove the association</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePermissionFromRoleAsync (string rkRoleId, string rkPermissionId);

        /// <summary>
        /// Delete association between a role and a permission (since 1.1)
        /// </summary>
        /// <remarks>
        /// Removes a permission from the role, no longer granting it to users with that role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to remove the association</param>
        /// <param name="rkPermissionId">ID of permission to remove the association</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePermissionFromRoleAsyncWithHttpInfo (string rkRoleId, string rkPermissionId);
        /// <summary>
        /// Delete a role (since 1.1)
        /// </summary>
        /// <remarks>
        /// Removes an existing role from the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to fetch</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRoleAsync (string rkRoleId);

        /// <summary>
        /// Delete a role (since 1.1)
        /// </summary>
        /// <remarks>
        /// Removes an existing role from the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to fetch</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRoleAsyncWithHttpInfo (string rkRoleId);
        /// <summary>
        /// Get role details by ID (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns the details of a single role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to fetch</param>
        /// <returns>Task of Role</returns>
        System.Threading.Tasks.Task<Role> GetRoleAsync (string rkRoleId);

        /// <summary>
        /// Get role details by ID (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns the details of a single role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to fetch</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        System.Threading.Tasks.Task<ApiResponse<Role>> GetRoleAsyncWithHttpInfo (string rkRoleId);
        /// <summary>
        /// Get the list of permissions associated with a role (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns a list that includes all the permissions that a user is granted by having the specified role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to fetch the permissions from</param>
        /// <returns>Task of Permission</returns>
        System.Threading.Tasks.Task<Permission> GetRolePermissionsAsync (string rkRoleId);

        /// <summary>
        /// Get the list of permissions associated with a role (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns a list that includes all the permissions that a user is granted by having the specified role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to fetch the permissions from</param>
        /// <returns>Task of ApiResponse (Permission)</returns>
        System.Threading.Tasks.Task<ApiResponse<Permission>> GetRolePermissionsAsyncWithHttpInfo (string rkRoleId);
        /// <summary>
        /// Search roles (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns a list of all roles, or those that match the filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="administrator">Role administrator filter. (optional)</param>
        /// <param name="builtin">Role builtin filter. (optional)</param>
        /// <param name="description">Role description to search. (optional)</param>
        /// <param name="id">Role IDs to search. (optional)</param>
        /// <param name="name">Role names to search. (optional)</param>
        /// <param name="subDescription">Role substring criteria for description to search. (optional)</param>
        /// <returns>Task of Role</returns>
        System.Threading.Tasks.Task<Role> GetRolesAsync (bool? administrator = null, bool? builtin = null, List<string> description = null, List<string> id = null, List<string> name = null, List<string> subDescription = null);

        /// <summary>
        /// Search roles (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns a list of all roles, or those that match the filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="administrator">Role administrator filter. (optional)</param>
        /// <param name="builtin">Role builtin filter. (optional)</param>
        /// <param name="description">Role description to search. (optional)</param>
        /// <param name="id">Role IDs to search. (optional)</param>
        /// <param name="name">Role names to search. (optional)</param>
        /// <param name="subDescription">Role substring criteria for description to search. (optional)</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        System.Threading.Tasks.Task<ApiResponse<Role>> GetRolesAsyncWithHttpInfo (bool? administrator = null, bool? builtin = null, List<string> description = null, List<string> id = null, List<string> name = null, List<string> subDescription = null);
        /// <summary>
        /// Update an existing role (since 1.1)
        /// </summary>
        /// <remarks>
        /// Modifies an existing role to update the submitted fields with new values. Read-only fields should not be submitted.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to be updated</param>
        /// <param name="body">Role description to update the existing role</param>
        /// <returns>Task of Role</returns>
        System.Threading.Tasks.Task<Role> UpdateRoleAsync (string rkRoleId, Role body);

        /// <summary>
        /// Update an existing role (since 1.1)
        /// </summary>
        /// <remarks>
        /// Modifies an existing role to update the submitted fields with new values. Read-only fields should not be submitted.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to be updated</param>
        /// <param name="body">Role description to update the existing role</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        System.Threading.Tasks.Task<ApiResponse<Role>> UpdateRoleAsyncWithHttpInfo (string rkRoleId, Role body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RolesApi : IRolesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RolesApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RolesApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add a permission to a role (since 1.1) Associates a Permission with a role, granting it to all users that have that Role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to create the association</param>
        /// <param name="rkPermissionId">ID of permission to create the association</param>
        /// <returns></returns>
        public void AssociatePermissionToRole (string rkRoleId, string rkPermissionId)
        {
             AssociatePermissionToRoleWithHttpInfo(rkRoleId, rkPermissionId);
        }

        /// <summary>
        /// Add a permission to a role (since 1.1) Associates a Permission with a role, granting it to all users that have that Role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to create the association</param>
        /// <param name="rkPermissionId">ID of permission to create the association</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssociatePermissionToRoleWithHttpInfo (string rkRoleId, string rkPermissionId)
        {
            // verify the required parameter 'rkRoleId' is set
            if (rkRoleId == null)
                throw new ApiException(400, "Missing required parameter 'rkRoleId' when calling RolesApi->AssociatePermissionToRole");
            // verify the required parameter 'rkPermissionId' is set
            if (rkPermissionId == null)
                throw new ApiException(400, "Missing required parameter 'rkPermissionId' when calling RolesApi->AssociatePermissionToRole");

            var localVarPath = "/roles/{rkRoleId}/permissions/{rkPermissionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkRoleId != null) localVarPathParams.Add("rkRoleId", this.Configuration.ApiClient.ParameterToString(rkRoleId)); // path parameter
            if (rkPermissionId != null) localVarPathParams.Add("rkPermissionId", this.Configuration.ApiClient.ParameterToString(rkPermissionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociatePermissionToRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add a permission to a role (since 1.1) Associates a Permission with a role, granting it to all users that have that Role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to create the association</param>
        /// <param name="rkPermissionId">ID of permission to create the association</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssociatePermissionToRoleAsync (string rkRoleId, string rkPermissionId)
        {
             await AssociatePermissionToRoleAsyncWithHttpInfo(rkRoleId, rkPermissionId);

        }

        /// <summary>
        /// Add a permission to a role (since 1.1) Associates a Permission with a role, granting it to all users that have that Role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to create the association</param>
        /// <param name="rkPermissionId">ID of permission to create the association</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssociatePermissionToRoleAsyncWithHttpInfo (string rkRoleId, string rkPermissionId)
        {
            // verify the required parameter 'rkRoleId' is set
            if (rkRoleId == null)
                throw new ApiException(400, "Missing required parameter 'rkRoleId' when calling RolesApi->AssociatePermissionToRole");
            // verify the required parameter 'rkPermissionId' is set
            if (rkPermissionId == null)
                throw new ApiException(400, "Missing required parameter 'rkPermissionId' when calling RolesApi->AssociatePermissionToRole");

            var localVarPath = "/roles/{rkRoleId}/permissions/{rkPermissionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkRoleId != null) localVarPathParams.Add("rkRoleId", this.Configuration.ApiClient.ParameterToString(rkRoleId)); // path parameter
            if (rkPermissionId != null) localVarPathParams.Add("rkPermissionId", this.Configuration.ApiClient.ParameterToString(rkPermissionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociatePermissionToRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Post a new role (since 1.1) Posts a request to create a new role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Role object to be created in TE</param>
        /// <returns>Role</returns>
        public Role CreateRole (Role body)
        {
             ApiResponse<Role> localVarResponse = CreateRoleWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post a new role (since 1.1) Posts a request to create a new role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Role object to be created in TE</param>
        /// <returns>ApiResponse of Role</returns>
        public ApiResponse< Role > CreateRoleWithHttpInfo (Role body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RolesApi->CreateRole");

            var localVarPath = "/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Role>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Role) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
        }

        /// <summary>
        /// Post a new role (since 1.1) Posts a request to create a new role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Role object to be created in TE</param>
        /// <returns>Task of Role</returns>
        public async System.Threading.Tasks.Task<Role> CreateRoleAsync (Role body)
        {
             ApiResponse<Role> localVarResponse = await CreateRoleAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post a new role (since 1.1) Posts a request to create a new role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Role object to be created in TE</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Role>> CreateRoleAsyncWithHttpInfo (Role body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RolesApi->CreateRole");

            var localVarPath = "/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Role>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Role) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
        }

        /// <summary>
        /// Delete association between a role and a permission (since 1.1) Removes a permission from the role, no longer granting it to users with that role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to remove the association</param>
        /// <param name="rkPermissionId">ID of permission to remove the association</param>
        /// <returns></returns>
        public void DeletePermissionFromRole (string rkRoleId, string rkPermissionId)
        {
             DeletePermissionFromRoleWithHttpInfo(rkRoleId, rkPermissionId);
        }

        /// <summary>
        /// Delete association between a role and a permission (since 1.1) Removes a permission from the role, no longer granting it to users with that role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to remove the association</param>
        /// <param name="rkPermissionId">ID of permission to remove the association</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePermissionFromRoleWithHttpInfo (string rkRoleId, string rkPermissionId)
        {
            // verify the required parameter 'rkRoleId' is set
            if (rkRoleId == null)
                throw new ApiException(400, "Missing required parameter 'rkRoleId' when calling RolesApi->DeletePermissionFromRole");
            // verify the required parameter 'rkPermissionId' is set
            if (rkPermissionId == null)
                throw new ApiException(400, "Missing required parameter 'rkPermissionId' when calling RolesApi->DeletePermissionFromRole");

            var localVarPath = "/roles/{rkRoleId}/permissions/{rkPermissionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkRoleId != null) localVarPathParams.Add("rkRoleId", this.Configuration.ApiClient.ParameterToString(rkRoleId)); // path parameter
            if (rkPermissionId != null) localVarPathParams.Add("rkPermissionId", this.Configuration.ApiClient.ParameterToString(rkPermissionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePermissionFromRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete association between a role and a permission (since 1.1) Removes a permission from the role, no longer granting it to users with that role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to remove the association</param>
        /// <param name="rkPermissionId">ID of permission to remove the association</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePermissionFromRoleAsync (string rkRoleId, string rkPermissionId)
        {
             await DeletePermissionFromRoleAsyncWithHttpInfo(rkRoleId, rkPermissionId);

        }

        /// <summary>
        /// Delete association between a role and a permission (since 1.1) Removes a permission from the role, no longer granting it to users with that role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to remove the association</param>
        /// <param name="rkPermissionId">ID of permission to remove the association</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePermissionFromRoleAsyncWithHttpInfo (string rkRoleId, string rkPermissionId)
        {
            // verify the required parameter 'rkRoleId' is set
            if (rkRoleId == null)
                throw new ApiException(400, "Missing required parameter 'rkRoleId' when calling RolesApi->DeletePermissionFromRole");
            // verify the required parameter 'rkPermissionId' is set
            if (rkPermissionId == null)
                throw new ApiException(400, "Missing required parameter 'rkPermissionId' when calling RolesApi->DeletePermissionFromRole");

            var localVarPath = "/roles/{rkRoleId}/permissions/{rkPermissionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkRoleId != null) localVarPathParams.Add("rkRoleId", this.Configuration.ApiClient.ParameterToString(rkRoleId)); // path parameter
            if (rkPermissionId != null) localVarPathParams.Add("rkPermissionId", this.Configuration.ApiClient.ParameterToString(rkPermissionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePermissionFromRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a role (since 1.1) Removes an existing role from the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to fetch</param>
        /// <returns></returns>
        public void DeleteRole (string rkRoleId)
        {
             DeleteRoleWithHttpInfo(rkRoleId);
        }

        /// <summary>
        /// Delete a role (since 1.1) Removes an existing role from the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to fetch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRoleWithHttpInfo (string rkRoleId)
        {
            // verify the required parameter 'rkRoleId' is set
            if (rkRoleId == null)
                throw new ApiException(400, "Missing required parameter 'rkRoleId' when calling RolesApi->DeleteRole");

            var localVarPath = "/roles/{rkRoleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkRoleId != null) localVarPathParams.Add("rkRoleId", this.Configuration.ApiClient.ParameterToString(rkRoleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a role (since 1.1) Removes an existing role from the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to fetch</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRoleAsync (string rkRoleId)
        {
             await DeleteRoleAsyncWithHttpInfo(rkRoleId);

        }

        /// <summary>
        /// Delete a role (since 1.1) Removes an existing role from the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to fetch</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRoleAsyncWithHttpInfo (string rkRoleId)
        {
            // verify the required parameter 'rkRoleId' is set
            if (rkRoleId == null)
                throw new ApiException(400, "Missing required parameter 'rkRoleId' when calling RolesApi->DeleteRole");

            var localVarPath = "/roles/{rkRoleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkRoleId != null) localVarPathParams.Add("rkRoleId", this.Configuration.ApiClient.ParameterToString(rkRoleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get role details by ID (since 1.1) Returns the details of a single role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to fetch</param>
        /// <returns>Role</returns>
        public Role GetRole (string rkRoleId)
        {
             ApiResponse<Role> localVarResponse = GetRoleWithHttpInfo(rkRoleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get role details by ID (since 1.1) Returns the details of a single role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to fetch</param>
        /// <returns>ApiResponse of Role</returns>
        public ApiResponse< Role > GetRoleWithHttpInfo (string rkRoleId)
        {
            // verify the required parameter 'rkRoleId' is set
            if (rkRoleId == null)
                throw new ApiException(400, "Missing required parameter 'rkRoleId' when calling RolesApi->GetRole");

            var localVarPath = "/roles/{rkRoleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkRoleId != null) localVarPathParams.Add("rkRoleId", this.Configuration.ApiClient.ParameterToString(rkRoleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Role>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Role) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
        }

        /// <summary>
        /// Get role details by ID (since 1.1) Returns the details of a single role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to fetch</param>
        /// <returns>Task of Role</returns>
        public async System.Threading.Tasks.Task<Role> GetRoleAsync (string rkRoleId)
        {
             ApiResponse<Role> localVarResponse = await GetRoleAsyncWithHttpInfo(rkRoleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get role details by ID (since 1.1) Returns the details of a single role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to fetch</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Role>> GetRoleAsyncWithHttpInfo (string rkRoleId)
        {
            // verify the required parameter 'rkRoleId' is set
            if (rkRoleId == null)
                throw new ApiException(400, "Missing required parameter 'rkRoleId' when calling RolesApi->GetRole");

            var localVarPath = "/roles/{rkRoleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkRoleId != null) localVarPathParams.Add("rkRoleId", this.Configuration.ApiClient.ParameterToString(rkRoleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Role>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Role) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
        }

        /// <summary>
        /// Get the list of permissions associated with a role (since 1.1) Returns a list that includes all the permissions that a user is granted by having the specified role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to fetch the permissions from</param>
        /// <returns>Permission</returns>
        public Permission GetRolePermissions (string rkRoleId)
        {
             ApiResponse<Permission> localVarResponse = GetRolePermissionsWithHttpInfo(rkRoleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of permissions associated with a role (since 1.1) Returns a list that includes all the permissions that a user is granted by having the specified role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to fetch the permissions from</param>
        /// <returns>ApiResponse of Permission</returns>
        public ApiResponse< Permission > GetRolePermissionsWithHttpInfo (string rkRoleId)
        {
            // verify the required parameter 'rkRoleId' is set
            if (rkRoleId == null)
                throw new ApiException(400, "Missing required parameter 'rkRoleId' when calling RolesApi->GetRolePermissions");

            var localVarPath = "/roles/{rkRoleId}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkRoleId != null) localVarPathParams.Add("rkRoleId", this.Configuration.ApiClient.ParameterToString(rkRoleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRolePermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Permission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Permission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Permission)));
        }

        /// <summary>
        /// Get the list of permissions associated with a role (since 1.1) Returns a list that includes all the permissions that a user is granted by having the specified role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to fetch the permissions from</param>
        /// <returns>Task of Permission</returns>
        public async System.Threading.Tasks.Task<Permission> GetRolePermissionsAsync (string rkRoleId)
        {
             ApiResponse<Permission> localVarResponse = await GetRolePermissionsAsyncWithHttpInfo(rkRoleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the list of permissions associated with a role (since 1.1) Returns a list that includes all the permissions that a user is granted by having the specified role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to fetch the permissions from</param>
        /// <returns>Task of ApiResponse (Permission)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Permission>> GetRolePermissionsAsyncWithHttpInfo (string rkRoleId)
        {
            // verify the required parameter 'rkRoleId' is set
            if (rkRoleId == null)
                throw new ApiException(400, "Missing required parameter 'rkRoleId' when calling RolesApi->GetRolePermissions");

            var localVarPath = "/roles/{rkRoleId}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkRoleId != null) localVarPathParams.Add("rkRoleId", this.Configuration.ApiClient.ParameterToString(rkRoleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRolePermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Permission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Permission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Permission)));
        }

        /// <summary>
        /// Search roles (since 1.1) Returns a list of all roles, or those that match the filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="administrator">Role administrator filter. (optional)</param>
        /// <param name="builtin">Role builtin filter. (optional)</param>
        /// <param name="description">Role description to search. (optional)</param>
        /// <param name="id">Role IDs to search. (optional)</param>
        /// <param name="name">Role names to search. (optional)</param>
        /// <param name="subDescription">Role substring criteria for description to search. (optional)</param>
        /// <returns>Role</returns>
        public Role GetRoles (bool? administrator = null, bool? builtin = null, List<string> description = null, List<string> id = null, List<string> name = null, List<string> subDescription = null)
        {
             ApiResponse<Role> localVarResponse = GetRolesWithHttpInfo(administrator, builtin, description, id, name, subDescription);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search roles (since 1.1) Returns a list of all roles, or those that match the filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="administrator">Role administrator filter. (optional)</param>
        /// <param name="builtin">Role builtin filter. (optional)</param>
        /// <param name="description">Role description to search. (optional)</param>
        /// <param name="id">Role IDs to search. (optional)</param>
        /// <param name="name">Role names to search. (optional)</param>
        /// <param name="subDescription">Role substring criteria for description to search. (optional)</param>
        /// <returns>ApiResponse of Role</returns>
        public ApiResponse< Role > GetRolesWithHttpInfo (bool? administrator = null, bool? builtin = null, List<string> description = null, List<string> id = null, List<string> name = null, List<string> subDescription = null)
        {

            var localVarPath = "/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (administrator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "administrator", administrator)); // query parameter
            if (builtin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "builtin", builtin)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "description", description)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (subDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sub_description", subDescription)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Role>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Role) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
        }

        /// <summary>
        /// Search roles (since 1.1) Returns a list of all roles, or those that match the filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="administrator">Role administrator filter. (optional)</param>
        /// <param name="builtin">Role builtin filter. (optional)</param>
        /// <param name="description">Role description to search. (optional)</param>
        /// <param name="id">Role IDs to search. (optional)</param>
        /// <param name="name">Role names to search. (optional)</param>
        /// <param name="subDescription">Role substring criteria for description to search. (optional)</param>
        /// <returns>Task of Role</returns>
        public async System.Threading.Tasks.Task<Role> GetRolesAsync (bool? administrator = null, bool? builtin = null, List<string> description = null, List<string> id = null, List<string> name = null, List<string> subDescription = null)
        {
             ApiResponse<Role> localVarResponse = await GetRolesAsyncWithHttpInfo(administrator, builtin, description, id, name, subDescription);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search roles (since 1.1) Returns a list of all roles, or those that match the filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="administrator">Role administrator filter. (optional)</param>
        /// <param name="builtin">Role builtin filter. (optional)</param>
        /// <param name="description">Role description to search. (optional)</param>
        /// <param name="id">Role IDs to search. (optional)</param>
        /// <param name="name">Role names to search. (optional)</param>
        /// <param name="subDescription">Role substring criteria for description to search. (optional)</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Role>> GetRolesAsyncWithHttpInfo (bool? administrator = null, bool? builtin = null, List<string> description = null, List<string> id = null, List<string> name = null, List<string> subDescription = null)
        {

            var localVarPath = "/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (administrator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "administrator", administrator)); // query parameter
            if (builtin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "builtin", builtin)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "description", description)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (subDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sub_description", subDescription)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Role>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Role) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
        }

        /// <summary>
        /// Update an existing role (since 1.1) Modifies an existing role to update the submitted fields with new values. Read-only fields should not be submitted.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to be updated</param>
        /// <param name="body">Role description to update the existing role</param>
        /// <returns>Role</returns>
        public Role UpdateRole (string rkRoleId, Role body)
        {
             ApiResponse<Role> localVarResponse = UpdateRoleWithHttpInfo(rkRoleId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing role (since 1.1) Modifies an existing role to update the submitted fields with new values. Read-only fields should not be submitted.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to be updated</param>
        /// <param name="body">Role description to update the existing role</param>
        /// <returns>ApiResponse of Role</returns>
        public ApiResponse< Role > UpdateRoleWithHttpInfo (string rkRoleId, Role body)
        {
            // verify the required parameter 'rkRoleId' is set
            if (rkRoleId == null)
                throw new ApiException(400, "Missing required parameter 'rkRoleId' when calling RolesApi->UpdateRole");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RolesApi->UpdateRole");

            var localVarPath = "/roles/{rkRoleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkRoleId != null) localVarPathParams.Add("rkRoleId", this.Configuration.ApiClient.ParameterToString(rkRoleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Role>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Role) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
        }

        /// <summary>
        /// Update an existing role (since 1.1) Modifies an existing role to update the submitted fields with new values. Read-only fields should not be submitted.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to be updated</param>
        /// <param name="body">Role description to update the existing role</param>
        /// <returns>Task of Role</returns>
        public async System.Threading.Tasks.Task<Role> UpdateRoleAsync (string rkRoleId, Role body)
        {
             ApiResponse<Role> localVarResponse = await UpdateRoleAsyncWithHttpInfo(rkRoleId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an existing role (since 1.1) Modifies an existing role to update the submitted fields with new values. Read-only fields should not be submitted.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRoleId">ID of role to be updated</param>
        /// <param name="body">Role description to update the existing role</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Role>> UpdateRoleAsyncWithHttpInfo (string rkRoleId, Role body)
        {
            // verify the required parameter 'rkRoleId' is set
            if (rkRoleId == null)
                throw new ApiException(400, "Missing required parameter 'rkRoleId' when calling RolesApi->UpdateRole");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RolesApi->UpdateRole");

            var localVarPath = "/roles/{rkRoleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkRoleId != null) localVarPathParams.Add("rkRoleId", this.Configuration.ApiClient.ParameterToString(rkRoleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Role>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Role) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
        }

    }
}

/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.12.1.bmaster.r20170922182356-4e84151.b1741
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRulesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new rule
        /// </summary>
        /// <remarks>
        /// Creates a rule of the given type. Only \&quot;External Rule\&quot; type is supported at this time. Rules created are in the unlinked rule group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Rule object to be created in TE</param>
        /// <returns>Rule</returns>
        Rule CreateExternalRule (Rule body);

        /// <summary>
        /// Create a new rule
        /// </summary>
        /// <remarks>
        /// Creates a rule of the given type. Only \&quot;External Rule\&quot; type is supported at this time. Rules created are in the unlinked rule group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Rule object to be created in TE</param>
        /// <returns>ApiResponse of Rule</returns>
        ApiResponse<Rule> CreateExternalRuleWithHttpInfo (Rule body);
        /// <summary>
        /// Get rule details by ID
        /// </summary>
        /// <remarks>
        /// Returns the details of a single rule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleId">ID of rule to fetch</param>
        /// <returns>Rule</returns>
        Rule GetRuleById (string rkRuleId);

        /// <summary>
        /// Get rule details by ID
        /// </summary>
        /// <remarks>
        /// Returns the details of a single rule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleId">ID of rule to fetch</param>
        /// <returns>ApiResponse of Rule</returns>
        ApiResponse<Rule> GetRuleByIdWithHttpInfo (string rkRuleId);
        /// <summary>
        /// List parent groups for a rule (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns a list of the parent groups for a rule with a specific ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleId">ID of the Rule</param>
        /// <returns>List&lt;RuleGroupPath&gt;</returns>
        List<RuleGroupPath> GetRuleParentGroups (string rkRuleId);

        /// <summary>
        /// List parent groups for a rule (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns a list of the parent groups for a rule with a specific ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleId">ID of the Rule</param>
        /// <returns>ApiResponse of List&lt;RuleGroupPath&gt;</returns>
        ApiResponse<List<RuleGroupPath>> GetRuleParentGroupsWithHttpInfo (string rkRuleId);
        /// <summary>
        /// Search rules
        /// </summary>
        /// <remarks>
        /// Returns a list of all rules or those that match the provided filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="id">IDs of rules to fetch. (optional)</param>
        /// <param name="oid">Return rules with the given database object id. (optional)</param>
        /// <param name="name">Names of rules to fetch. (optional)</param>
        /// <param name="description">Descriptions of rules to fetch. (optional)</param>
        /// <param name="subDescription">Support for substring search for description parameter. (optional)</param>
        /// <param name="modifiedTime">Modified times of rules to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of rules to fetch. (optional)</param>
        /// <param name="trackingId">Tracking ids of rules to fetch. (optional)</param>
        /// <param name="type">Types of rules to fetch. (optional)</param>
        /// <param name="importedTimeRange">Imported time range of rules to fetch. (optional)</param>
        /// <returns>List&lt;Rule&gt;</returns>
        List<Rule> GetRules (string pageLimit = null, string pageStart = null, List<string> id = null, List<string> oid = null, List<string> name = null, List<string> description = null, List<string> subDescription = null, List<string> modifiedTime = null, List<string> importedTime = null, List<string> trackingId = null, List<string> type = null, string importedTimeRange = null);

        /// <summary>
        /// Search rules
        /// </summary>
        /// <remarks>
        /// Returns a list of all rules or those that match the provided filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="id">IDs of rules to fetch. (optional)</param>
        /// <param name="oid">Return rules with the given database object id. (optional)</param>
        /// <param name="name">Names of rules to fetch. (optional)</param>
        /// <param name="description">Descriptions of rules to fetch. (optional)</param>
        /// <param name="subDescription">Support for substring search for description parameter. (optional)</param>
        /// <param name="modifiedTime">Modified times of rules to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of rules to fetch. (optional)</param>
        /// <param name="trackingId">Tracking ids of rules to fetch. (optional)</param>
        /// <param name="type">Types of rules to fetch. (optional)</param>
        /// <param name="importedTimeRange">Imported time range of rules to fetch. (optional)</param>
        /// <returns>ApiResponse of List&lt;Rule&gt;</returns>
        ApiResponse<List<Rule>> GetRulesWithHttpInfo (string pageLimit = null, string pageStart = null, List<string> id = null, List<string> oid = null, List<string> name = null, List<string> description = null, List<string> subDescription = null, List<string> modifiedTime = null, List<string> importedTime = null, List<string> trackingId = null, List<string> type = null, string importedTimeRange = null);
        /// <summary>
        /// Update details of a rule
        /// </summary>
        /// <remarks>
        /// Modifies a rule updating the rule fields with those submitted in the request. Submitted read-only fields will not be updated.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleId">ID of rule to be updated</param>
        /// <param name="body">Rule description to update the existing rule</param>
        /// <returns>Rule</returns>
        Rule UpdateRule (string rkRuleId, Rule body);

        /// <summary>
        /// Update details of a rule
        /// </summary>
        /// <remarks>
        /// Modifies a rule updating the rule fields with those submitted in the request. Submitted read-only fields will not be updated.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleId">ID of rule to be updated</param>
        /// <param name="body">Rule description to update the existing rule</param>
        /// <returns>ApiResponse of Rule</returns>
        ApiResponse<Rule> UpdateRuleWithHttpInfo (string rkRuleId, Rule body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new rule
        /// </summary>
        /// <remarks>
        /// Creates a rule of the given type. Only \&quot;External Rule\&quot; type is supported at this time. Rules created are in the unlinked rule group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Rule object to be created in TE</param>
        /// <returns>Task of Rule</returns>
        System.Threading.Tasks.Task<Rule> CreateExternalRuleAsync (Rule body);

        /// <summary>
        /// Create a new rule
        /// </summary>
        /// <remarks>
        /// Creates a rule of the given type. Only \&quot;External Rule\&quot; type is supported at this time. Rules created are in the unlinked rule group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Rule object to be created in TE</param>
        /// <returns>Task of ApiResponse (Rule)</returns>
        System.Threading.Tasks.Task<ApiResponse<Rule>> CreateExternalRuleAsyncWithHttpInfo (Rule body);
        /// <summary>
        /// Get rule details by ID
        /// </summary>
        /// <remarks>
        /// Returns the details of a single rule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleId">ID of rule to fetch</param>
        /// <returns>Task of Rule</returns>
        System.Threading.Tasks.Task<Rule> GetRuleByIdAsync (string rkRuleId);

        /// <summary>
        /// Get rule details by ID
        /// </summary>
        /// <remarks>
        /// Returns the details of a single rule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleId">ID of rule to fetch</param>
        /// <returns>Task of ApiResponse (Rule)</returns>
        System.Threading.Tasks.Task<ApiResponse<Rule>> GetRuleByIdAsyncWithHttpInfo (string rkRuleId);
        /// <summary>
        /// List parent groups for a rule (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns a list of the parent groups for a rule with a specific ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleId">ID of the Rule</param>
        /// <returns>Task of List&lt;RuleGroupPath&gt;</returns>
        System.Threading.Tasks.Task<List<RuleGroupPath>> GetRuleParentGroupsAsync (string rkRuleId);

        /// <summary>
        /// List parent groups for a rule (since 1.5)
        /// </summary>
        /// <remarks>
        /// Returns a list of the parent groups for a rule with a specific ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleId">ID of the Rule</param>
        /// <returns>Task of ApiResponse (List&lt;RuleGroupPath&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RuleGroupPath>>> GetRuleParentGroupsAsyncWithHttpInfo (string rkRuleId);
        /// <summary>
        /// Search rules
        /// </summary>
        /// <remarks>
        /// Returns a list of all rules or those that match the provided filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="id">IDs of rules to fetch. (optional)</param>
        /// <param name="oid">Return rules with the given database object id. (optional)</param>
        /// <param name="name">Names of rules to fetch. (optional)</param>
        /// <param name="description">Descriptions of rules to fetch. (optional)</param>
        /// <param name="subDescription">Support for substring search for description parameter. (optional)</param>
        /// <param name="modifiedTime">Modified times of rules to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of rules to fetch. (optional)</param>
        /// <param name="trackingId">Tracking ids of rules to fetch. (optional)</param>
        /// <param name="type">Types of rules to fetch. (optional)</param>
        /// <param name="importedTimeRange">Imported time range of rules to fetch. (optional)</param>
        /// <returns>Task of List&lt;Rule&gt;</returns>
        System.Threading.Tasks.Task<List<Rule>> GetRulesAsync (string pageLimit = null, string pageStart = null, List<string> id = null, List<string> oid = null, List<string> name = null, List<string> description = null, List<string> subDescription = null, List<string> modifiedTime = null, List<string> importedTime = null, List<string> trackingId = null, List<string> type = null, string importedTimeRange = null);

        /// <summary>
        /// Search rules
        /// </summary>
        /// <remarks>
        /// Returns a list of all rules or those that match the provided filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="id">IDs of rules to fetch. (optional)</param>
        /// <param name="oid">Return rules with the given database object id. (optional)</param>
        /// <param name="name">Names of rules to fetch. (optional)</param>
        /// <param name="description">Descriptions of rules to fetch. (optional)</param>
        /// <param name="subDescription">Support for substring search for description parameter. (optional)</param>
        /// <param name="modifiedTime">Modified times of rules to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of rules to fetch. (optional)</param>
        /// <param name="trackingId">Tracking ids of rules to fetch. (optional)</param>
        /// <param name="type">Types of rules to fetch. (optional)</param>
        /// <param name="importedTimeRange">Imported time range of rules to fetch. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Rule&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Rule>>> GetRulesAsyncWithHttpInfo (string pageLimit = null, string pageStart = null, List<string> id = null, List<string> oid = null, List<string> name = null, List<string> description = null, List<string> subDescription = null, List<string> modifiedTime = null, List<string> importedTime = null, List<string> trackingId = null, List<string> type = null, string importedTimeRange = null);
        /// <summary>
        /// Update details of a rule
        /// </summary>
        /// <remarks>
        /// Modifies a rule updating the rule fields with those submitted in the request. Submitted read-only fields will not be updated.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleId">ID of rule to be updated</param>
        /// <param name="body">Rule description to update the existing rule</param>
        /// <returns>Task of Rule</returns>
        System.Threading.Tasks.Task<Rule> UpdateRuleAsync (string rkRuleId, Rule body);

        /// <summary>
        /// Update details of a rule
        /// </summary>
        /// <remarks>
        /// Modifies a rule updating the rule fields with those submitted in the request. Submitted read-only fields will not be updated.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleId">ID of rule to be updated</param>
        /// <param name="body">Rule description to update the existing rule</param>
        /// <returns>Task of ApiResponse (Rule)</returns>
        System.Threading.Tasks.Task<ApiResponse<Rule>> UpdateRuleAsyncWithHttpInfo (string rkRuleId, Rule body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RulesApi : IRulesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RulesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RulesApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RulesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RulesApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new rule Creates a rule of the given type. Only \&quot;External Rule\&quot; type is supported at this time. Rules created are in the unlinked rule group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Rule object to be created in TE</param>
        /// <returns>Rule</returns>
        public Rule CreateExternalRule (Rule body)
        {
             ApiResponse<Rule> localVarResponse = CreateExternalRuleWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new rule Creates a rule of the given type. Only \&quot;External Rule\&quot; type is supported at this time. Rules created are in the unlinked rule group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Rule object to be created in TE</param>
        /// <returns>ApiResponse of Rule</returns>
        public ApiResponse< Rule > CreateExternalRuleWithHttpInfo (Rule body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RulesApi->CreateExternalRule");

            var localVarPath = "/rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateExternalRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Rule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Rule) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Rule)));
        }

        /// <summary>
        /// Create a new rule Creates a rule of the given type. Only \&quot;External Rule\&quot; type is supported at this time. Rules created are in the unlinked rule group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Rule object to be created in TE</param>
        /// <returns>Task of Rule</returns>
        public async System.Threading.Tasks.Task<Rule> CreateExternalRuleAsync (Rule body)
        {
             ApiResponse<Rule> localVarResponse = await CreateExternalRuleAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new rule Creates a rule of the given type. Only \&quot;External Rule\&quot; type is supported at this time. Rules created are in the unlinked rule group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Rule object to be created in TE</param>
        /// <returns>Task of ApiResponse (Rule)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Rule>> CreateExternalRuleAsyncWithHttpInfo (Rule body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RulesApi->CreateExternalRule");

            var localVarPath = "/rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateExternalRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Rule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Rule) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Rule)));
        }

        /// <summary>
        /// Get rule details by ID Returns the details of a single rule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleId">ID of rule to fetch</param>
        /// <returns>Rule</returns>
        public Rule GetRuleById (string rkRuleId)
        {
             ApiResponse<Rule> localVarResponse = GetRuleByIdWithHttpInfo(rkRuleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get rule details by ID Returns the details of a single rule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleId">ID of rule to fetch</param>
        /// <returns>ApiResponse of Rule</returns>
        public ApiResponse< Rule > GetRuleByIdWithHttpInfo (string rkRuleId)
        {
            // verify the required parameter 'rkRuleId' is set
            if (rkRuleId == null)
                throw new ApiException(400, "Missing required parameter 'rkRuleId' when calling RulesApi->GetRuleById");

            var localVarPath = "/rules/{rkRuleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkRuleId != null) localVarPathParams.Add("rkRuleId", this.Configuration.ApiClient.ParameterToString(rkRuleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRuleById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Rule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Rule) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Rule)));
        }

        /// <summary>
        /// Get rule details by ID Returns the details of a single rule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleId">ID of rule to fetch</param>
        /// <returns>Task of Rule</returns>
        public async System.Threading.Tasks.Task<Rule> GetRuleByIdAsync (string rkRuleId)
        {
             ApiResponse<Rule> localVarResponse = await GetRuleByIdAsyncWithHttpInfo(rkRuleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get rule details by ID Returns the details of a single rule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleId">ID of rule to fetch</param>
        /// <returns>Task of ApiResponse (Rule)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Rule>> GetRuleByIdAsyncWithHttpInfo (string rkRuleId)
        {
            // verify the required parameter 'rkRuleId' is set
            if (rkRuleId == null)
                throw new ApiException(400, "Missing required parameter 'rkRuleId' when calling RulesApi->GetRuleById");

            var localVarPath = "/rules/{rkRuleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkRuleId != null) localVarPathParams.Add("rkRuleId", this.Configuration.ApiClient.ParameterToString(rkRuleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRuleById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Rule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Rule) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Rule)));
        }

        /// <summary>
        /// List parent groups for a rule (since 1.5) Returns a list of the parent groups for a rule with a specific ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleId">ID of the Rule</param>
        /// <returns>List&lt;RuleGroupPath&gt;</returns>
        public List<RuleGroupPath> GetRuleParentGroups (string rkRuleId)
        {
             ApiResponse<List<RuleGroupPath>> localVarResponse = GetRuleParentGroupsWithHttpInfo(rkRuleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List parent groups for a rule (since 1.5) Returns a list of the parent groups for a rule with a specific ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleId">ID of the Rule</param>
        /// <returns>ApiResponse of List&lt;RuleGroupPath&gt;</returns>
        public ApiResponse< List<RuleGroupPath> > GetRuleParentGroupsWithHttpInfo (string rkRuleId)
        {
            // verify the required parameter 'rkRuleId' is set
            if (rkRuleId == null)
                throw new ApiException(400, "Missing required parameter 'rkRuleId' when calling RulesApi->GetRuleParentGroups");

            var localVarPath = "/rules/{rkRuleId}/parentGroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkRuleId != null) localVarPathParams.Add("rkRuleId", this.Configuration.ApiClient.ParameterToString(rkRuleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRuleParentGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RuleGroupPath>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RuleGroupPath>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RuleGroupPath>)));
        }

        /// <summary>
        /// List parent groups for a rule (since 1.5) Returns a list of the parent groups for a rule with a specific ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleId">ID of the Rule</param>
        /// <returns>Task of List&lt;RuleGroupPath&gt;</returns>
        public async System.Threading.Tasks.Task<List<RuleGroupPath>> GetRuleParentGroupsAsync (string rkRuleId)
        {
             ApiResponse<List<RuleGroupPath>> localVarResponse = await GetRuleParentGroupsAsyncWithHttpInfo(rkRuleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List parent groups for a rule (since 1.5) Returns a list of the parent groups for a rule with a specific ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleId">ID of the Rule</param>
        /// <returns>Task of ApiResponse (List&lt;RuleGroupPath&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RuleGroupPath>>> GetRuleParentGroupsAsyncWithHttpInfo (string rkRuleId)
        {
            // verify the required parameter 'rkRuleId' is set
            if (rkRuleId == null)
                throw new ApiException(400, "Missing required parameter 'rkRuleId' when calling RulesApi->GetRuleParentGroups");

            var localVarPath = "/rules/{rkRuleId}/parentGroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkRuleId != null) localVarPathParams.Add("rkRuleId", this.Configuration.ApiClient.ParameterToString(rkRuleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRuleParentGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RuleGroupPath>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RuleGroupPath>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RuleGroupPath>)));
        }

        /// <summary>
        /// Search rules Returns a list of all rules or those that match the provided filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="id">IDs of rules to fetch. (optional)</param>
        /// <param name="oid">Return rules with the given database object id. (optional)</param>
        /// <param name="name">Names of rules to fetch. (optional)</param>
        /// <param name="description">Descriptions of rules to fetch. (optional)</param>
        /// <param name="subDescription">Support for substring search for description parameter. (optional)</param>
        /// <param name="modifiedTime">Modified times of rules to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of rules to fetch. (optional)</param>
        /// <param name="trackingId">Tracking ids of rules to fetch. (optional)</param>
        /// <param name="type">Types of rules to fetch. (optional)</param>
        /// <param name="importedTimeRange">Imported time range of rules to fetch. (optional)</param>
        /// <returns>List&lt;Rule&gt;</returns>
        public List<Rule> GetRules (string pageLimit = null, string pageStart = null, List<string> id = null, List<string> oid = null, List<string> name = null, List<string> description = null, List<string> subDescription = null, List<string> modifiedTime = null, List<string> importedTime = null, List<string> trackingId = null, List<string> type = null, string importedTimeRange = null)
        {
             ApiResponse<List<Rule>> localVarResponse = GetRulesWithHttpInfo(pageLimit, pageStart, id, oid, name, description, subDescription, modifiedTime, importedTime, trackingId, type, importedTimeRange);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search rules Returns a list of all rules or those that match the provided filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="id">IDs of rules to fetch. (optional)</param>
        /// <param name="oid">Return rules with the given database object id. (optional)</param>
        /// <param name="name">Names of rules to fetch. (optional)</param>
        /// <param name="description">Descriptions of rules to fetch. (optional)</param>
        /// <param name="subDescription">Support for substring search for description parameter. (optional)</param>
        /// <param name="modifiedTime">Modified times of rules to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of rules to fetch. (optional)</param>
        /// <param name="trackingId">Tracking ids of rules to fetch. (optional)</param>
        /// <param name="type">Types of rules to fetch. (optional)</param>
        /// <param name="importedTimeRange">Imported time range of rules to fetch. (optional)</param>
        /// <returns>ApiResponse of List&lt;Rule&gt;</returns>
        public ApiResponse< List<Rule> > GetRulesWithHttpInfo (string pageLimit = null, string pageStart = null, List<string> id = null, List<string> oid = null, List<string> name = null, List<string> description = null, List<string> subDescription = null, List<string> modifiedTime = null, List<string> importedTime = null, List<string> trackingId = null, List<string> type = null, string importedTimeRange = null)
        {

            var localVarPath = "/rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageLimit", pageLimit)); // query parameter
            if (pageStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageStart", pageStart)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (oid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "oid", oid)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "description", description)); // query parameter
            if (subDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sub_description", subDescription)); // query parameter
            if (modifiedTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "modifiedTime", modifiedTime)); // query parameter
            if (importedTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "importedTime", importedTime)); // query parameter
            if (trackingId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "trackingId", trackingId)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter
            if (importedTimeRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "importedTimeRange", importedTimeRange)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Rule>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Rule>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Rule>)));
        }

        /// <summary>
        /// Search rules Returns a list of all rules or those that match the provided filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="id">IDs of rules to fetch. (optional)</param>
        /// <param name="oid">Return rules with the given database object id. (optional)</param>
        /// <param name="name">Names of rules to fetch. (optional)</param>
        /// <param name="description">Descriptions of rules to fetch. (optional)</param>
        /// <param name="subDescription">Support for substring search for description parameter. (optional)</param>
        /// <param name="modifiedTime">Modified times of rules to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of rules to fetch. (optional)</param>
        /// <param name="trackingId">Tracking ids of rules to fetch. (optional)</param>
        /// <param name="type">Types of rules to fetch. (optional)</param>
        /// <param name="importedTimeRange">Imported time range of rules to fetch. (optional)</param>
        /// <returns>Task of List&lt;Rule&gt;</returns>
        public async System.Threading.Tasks.Task<List<Rule>> GetRulesAsync (string pageLimit = null, string pageStart = null, List<string> id = null, List<string> oid = null, List<string> name = null, List<string> description = null, List<string> subDescription = null, List<string> modifiedTime = null, List<string> importedTime = null, List<string> trackingId = null, List<string> type = null, string importedTimeRange = null)
        {
             ApiResponse<List<Rule>> localVarResponse = await GetRulesAsyncWithHttpInfo(pageLimit, pageStart, id, oid, name, description, subDescription, modifiedTime, importedTime, trackingId, type, importedTimeRange);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search rules Returns a list of all rules or those that match the provided filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="id">IDs of rules to fetch. (optional)</param>
        /// <param name="oid">Return rules with the given database object id. (optional)</param>
        /// <param name="name">Names of rules to fetch. (optional)</param>
        /// <param name="description">Descriptions of rules to fetch. (optional)</param>
        /// <param name="subDescription">Support for substring search for description parameter. (optional)</param>
        /// <param name="modifiedTime">Modified times of rules to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of rules to fetch. (optional)</param>
        /// <param name="trackingId">Tracking ids of rules to fetch. (optional)</param>
        /// <param name="type">Types of rules to fetch. (optional)</param>
        /// <param name="importedTimeRange">Imported time range of rules to fetch. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Rule&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Rule>>> GetRulesAsyncWithHttpInfo (string pageLimit = null, string pageStart = null, List<string> id = null, List<string> oid = null, List<string> name = null, List<string> description = null, List<string> subDescription = null, List<string> modifiedTime = null, List<string> importedTime = null, List<string> trackingId = null, List<string> type = null, string importedTimeRange = null)
        {

            var localVarPath = "/rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageLimit", pageLimit)); // query parameter
            if (pageStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageStart", pageStart)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (oid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "oid", oid)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "description", description)); // query parameter
            if (subDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sub_description", subDescription)); // query parameter
            if (modifiedTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "modifiedTime", modifiedTime)); // query parameter
            if (importedTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "importedTime", importedTime)); // query parameter
            if (trackingId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "trackingId", trackingId)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter
            if (importedTimeRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "importedTimeRange", importedTimeRange)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Rule>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Rule>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Rule>)));
        }

        /// <summary>
        /// Update details of a rule Modifies a rule updating the rule fields with those submitted in the request. Submitted read-only fields will not be updated.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleId">ID of rule to be updated</param>
        /// <param name="body">Rule description to update the existing rule</param>
        /// <returns>Rule</returns>
        public Rule UpdateRule (string rkRuleId, Rule body)
        {
             ApiResponse<Rule> localVarResponse = UpdateRuleWithHttpInfo(rkRuleId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update details of a rule Modifies a rule updating the rule fields with those submitted in the request. Submitted read-only fields will not be updated.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleId">ID of rule to be updated</param>
        /// <param name="body">Rule description to update the existing rule</param>
        /// <returns>ApiResponse of Rule</returns>
        public ApiResponse< Rule > UpdateRuleWithHttpInfo (string rkRuleId, Rule body)
        {
            // verify the required parameter 'rkRuleId' is set
            if (rkRuleId == null)
                throw new ApiException(400, "Missing required parameter 'rkRuleId' when calling RulesApi->UpdateRule");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RulesApi->UpdateRule");

            var localVarPath = "/rules/{rkRuleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkRuleId != null) localVarPathParams.Add("rkRuleId", this.Configuration.ApiClient.ParameterToString(rkRuleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Rule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Rule) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Rule)));
        }

        /// <summary>
        /// Update details of a rule Modifies a rule updating the rule fields with those submitted in the request. Submitted read-only fields will not be updated.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleId">ID of rule to be updated</param>
        /// <param name="body">Rule description to update the existing rule</param>
        /// <returns>Task of Rule</returns>
        public async System.Threading.Tasks.Task<Rule> UpdateRuleAsync (string rkRuleId, Rule body)
        {
             ApiResponse<Rule> localVarResponse = await UpdateRuleAsyncWithHttpInfo(rkRuleId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update details of a rule Modifies a rule updating the rule fields with those submitted in the request. Submitted read-only fields will not be updated.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleId">ID of rule to be updated</param>
        /// <param name="body">Rule description to update the existing rule</param>
        /// <returns>Task of ApiResponse (Rule)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Rule>> UpdateRuleAsyncWithHttpInfo (string rkRuleId, Rule body)
        {
            // verify the required parameter 'rkRuleId' is set
            if (rkRuleId == null)
                throw new ApiException(400, "Missing required parameter 'rkRuleId' when calling RulesApi->UpdateRule");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RulesApi->UpdateRule");

            var localVarPath = "/rules/{rkRuleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkRuleId != null) localVarPathParams.Add("rkRuleId", this.Configuration.ApiClient.ParameterToString(rkRuleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Rule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Rule) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Rule)));
        }

    }
}

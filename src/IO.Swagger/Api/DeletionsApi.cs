/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.13.0.bmaster.r20180119190259-8b60eaa.b1753
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeletionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a list of critical deleted objects (since 1.8)
        /// </summary>
        /// <remarks>
        /// Returns a deletion record for any policy test group, action group, element, waiver, policy, policy test, job, report, rule, rule group, node, node group, action, task or Task Group that has been deleted. Records are automatically purged if older than 90 days.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletedTimeRange">Time range of deletion records to fetch (optional)</param>
        /// <returns>DeletionRecord</returns>
        DeletionRecord GetAll (string deletedTimeRange = null);

        /// <summary>
        /// Get a list of critical deleted objects (since 1.8)
        /// </summary>
        /// <remarks>
        /// Returns a deletion record for any policy test group, action group, element, waiver, policy, policy test, job, report, rule, rule group, node, node group, action, task or Task Group that has been deleted. Records are automatically purged if older than 90 days.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletedTimeRange">Time range of deletion records to fetch (optional)</param>
        /// <returns>ApiResponse of DeletionRecord</returns>
        ApiResponse<DeletionRecord> GetAllWithHttpInfo (string deletedTimeRange = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get a list of critical deleted objects (since 1.8)
        /// </summary>
        /// <remarks>
        /// Returns a deletion record for any policy test group, action group, element, waiver, policy, policy test, job, report, rule, rule group, node, node group, action, task or Task Group that has been deleted. Records are automatically purged if older than 90 days.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletedTimeRange">Time range of deletion records to fetch (optional)</param>
        /// <returns>Task of DeletionRecord</returns>
        System.Threading.Tasks.Task<DeletionRecord> GetAllAsync (string deletedTimeRange = null);

        /// <summary>
        /// Get a list of critical deleted objects (since 1.8)
        /// </summary>
        /// <remarks>
        /// Returns a deletion record for any policy test group, action group, element, waiver, policy, policy test, job, report, rule, rule group, node, node group, action, task or Task Group that has been deleted. Records are automatically purged if older than 90 days.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletedTimeRange">Time range of deletion records to fetch (optional)</param>
        /// <returns>Task of ApiResponse (DeletionRecord)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeletionRecord>> GetAllAsyncWithHttpInfo (string deletedTimeRange = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DeletionsApi : IDeletionsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DeletionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeletionsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeletionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DeletionsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get a list of critical deleted objects (since 1.8) Returns a deletion record for any policy test group, action group, element, waiver, policy, policy test, job, report, rule, rule group, node, node group, action, task or Task Group that has been deleted. Records are automatically purged if older than 90 days.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletedTimeRange">Time range of deletion records to fetch (optional)</param>
        /// <returns>DeletionRecord</returns>
        public DeletionRecord GetAll (string deletedTimeRange = null)
        {
             ApiResponse<DeletionRecord> localVarResponse = GetAllWithHttpInfo(deletedTimeRange);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of critical deleted objects (since 1.8) Returns a deletion record for any policy test group, action group, element, waiver, policy, policy test, job, report, rule, rule group, node, node group, action, task or Task Group that has been deleted. Records are automatically purged if older than 90 days.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletedTimeRange">Time range of deletion records to fetch (optional)</param>
        /// <returns>ApiResponse of DeletionRecord</returns>
        public ApiResponse< DeletionRecord > GetAllWithHttpInfo (string deletedTimeRange = null)
        {

            var localVarPath = "/deletions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deletedTimeRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deletedTimeRange", deletedTimeRange)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletionRecord>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeletionRecord) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletionRecord)));
        }

        /// <summary>
        /// Get a list of critical deleted objects (since 1.8) Returns a deletion record for any policy test group, action group, element, waiver, policy, policy test, job, report, rule, rule group, node, node group, action, task or Task Group that has been deleted. Records are automatically purged if older than 90 days.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletedTimeRange">Time range of deletion records to fetch (optional)</param>
        /// <returns>Task of DeletionRecord</returns>
        public async System.Threading.Tasks.Task<DeletionRecord> GetAllAsync (string deletedTimeRange = null)
        {
             ApiResponse<DeletionRecord> localVarResponse = await GetAllAsyncWithHttpInfo(deletedTimeRange);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of critical deleted objects (since 1.8) Returns a deletion record for any policy test group, action group, element, waiver, policy, policy test, job, report, rule, rule group, node, node group, action, task or Task Group that has been deleted. Records are automatically purged if older than 90 days.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletedTimeRange">Time range of deletion records to fetch (optional)</param>
        /// <returns>Task of ApiResponse (DeletionRecord)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeletionRecord>> GetAllAsyncWithHttpInfo (string deletedTimeRange = null)
        {

            var localVarPath = "/deletions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deletedTimeRange != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "deletedTimeRange", deletedTimeRange)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletionRecord>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeletionRecord) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletionRecord)));
        }

    }
}

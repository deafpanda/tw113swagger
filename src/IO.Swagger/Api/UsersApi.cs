/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.13.0.bmaster.r20180119190259-8b60eaa.b1753
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a homepage to a user (since 1.1)
        /// </summary>
        /// <remarks>
        /// Adds a homepage to the set of homepages available to a user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to associate</param>
        /// <param name="rkHomePageId">ID of homepage to associate</param>
        /// <returns></returns>
        void AssociateHomePageToUser (string rkUserId, string rkHomePageId);

        /// <summary>
        /// Add a homepage to a user (since 1.1)
        /// </summary>
        /// <remarks>
        /// Adds a homepage to the set of homepages available to a user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to associate</param>
        /// <param name="rkHomePageId">ID of homepage to associate</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssociateHomePageToUserWithHttpInfo (string rkUserId, string rkHomePageId);
        /// <summary>
        /// Associate a role to a user (since 1.1)
        /// </summary>
        /// <remarks>
        /// Associate a role to a user to grant them the permissions associated with that role. The TE user   interface for administering users and roles will not work correctly if multiple roles are applied   to a single user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to associate</param>
        /// <param name="rkRoleId">ID of role to associate</param>
        /// <returns></returns>
        void AssociateRoleToUser (string rkUserId, string rkRoleId);

        /// <summary>
        /// Associate a role to a user (since 1.1)
        /// </summary>
        /// <remarks>
        /// Associate a role to a user to grant them the permissions associated with that role. The TE user   interface for administering users and roles will not work correctly if multiple roles are applied   to a single user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to associate</param>
        /// <param name="rkRoleId">ID of role to associate</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssociateRoleToUserWithHttpInfo (string rkUserId, string rkRoleId);
        /// <summary>
        /// Set or change a user&#39;s password (since 1.3)
        /// </summary>
        /// <remarks>
        /// The API allows an authorized user (the admin user or the user himself) to change a password. If the  requesting user does not have the Administrator role, then the old password must be submitted, and rkUserId must be the user&#39;s own ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to change password</param>
        /// <param name="body">Password object to be set/change for user</param>
        /// <returns>Password</returns>
        Password ChangePassword (string rkUserId, Password body);

        /// <summary>
        /// Set or change a user&#39;s password (since 1.3)
        /// </summary>
        /// <remarks>
        /// The API allows an authorized user (the admin user or the user himself) to change a password. If the  requesting user does not have the Administrator role, then the old password must be submitted, and rkUserId must be the user&#39;s own ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to change password</param>
        /// <param name="body">Password object to be set/change for user</param>
        /// <returns>ApiResponse of Password</returns>
        ApiResponse<Password> ChangePasswordWithHttpInfo (string rkUserId, Password body);
        /// <summary>
        /// Create a new user (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns the newly created user. The user has no password, and no role.  A role must be associated before the user logs in.  If using LDAP authentication with Tripwire Enterprise, the password may be left unset.  The TE UI will not support editing a user that does not have a password or role set.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User object to be created in TE</param>
        /// <returns>User</returns>
        User CreateUser (User body);

        /// <summary>
        /// Create a new user (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns the newly created user. The user has no password, and no role.  A role must be associated before the user logs in.  If using LDAP authentication with Tripwire Enterprise, the password may be left unset.  The TE UI will not support editing a user that does not have a password or role set.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User object to be created in TE</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> CreateUserWithHttpInfo (User body);
        /// <summary>
        /// Delete a user (since 1.1)
        /// </summary>
        /// <remarks>
        /// Removes a user from the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to fetch</param>
        /// <returns></returns>
        void DeleteUser (string rkUserId);

        /// <summary>
        /// Delete a user (since 1.1)
        /// </summary>
        /// <remarks>
        /// Removes a user from the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to fetch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserWithHttpInfo (string rkUserId);
        /// <summary>
        /// Delete a homepage from a user&#39;s list of homepages (since 1.1)
        /// </summary>
        /// <remarks>
        /// Removes the homepage from those available to the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">rkUserId</param>
        /// <param name="rkHomePageId">rkHomePageId</param>
        /// <returns></returns>
        void DisassociateHomepageFromUser (string rkUserId, string rkHomePageId);

        /// <summary>
        /// Delete a homepage from a user&#39;s list of homepages (since 1.1)
        /// </summary>
        /// <remarks>
        /// Removes the homepage from those available to the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">rkUserId</param>
        /// <param name="rkHomePageId">rkHomePageId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DisassociateHomepageFromUserWithHttpInfo (string rkUserId, string rkHomePageId);
        /// <summary>
        /// Delete a role from a user (since 1.1)
        /// </summary>
        /// <remarks>
        /// Removes a role from those associated with a user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to disassociate</param>
        /// <param name="rkRoleId">ID of role to disassociate</param>
        /// <returns></returns>
        void DisassociateRoleFromUser (string rkUserId, string rkRoleId);

        /// <summary>
        /// Delete a role from a user (since 1.1)
        /// </summary>
        /// <remarks>
        /// Removes a role from those associated with a user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to disassociate</param>
        /// <param name="rkRoleId">ID of role to disassociate</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DisassociateRoleFromUserWithHttpInfo (string rkUserId, string rkRoleId);
        /// <summary>
        /// List the user groups a user is a member of (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns a list of the user groups that the specified user belongs to.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user</param>
        /// <returns>UserGroup</returns>
        UserGroup GetGroupsOfUser (string rkUserId);

        /// <summary>
        /// List the user groups a user is a member of (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns a list of the user groups that the specified user belongs to.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user</param>
        /// <returns>ApiResponse of UserGroup</returns>
        ApiResponse<UserGroup> GetGroupsOfUserWithHttpInfo (string rkUserId);
        /// <summary>
        /// Get the user&#39;s homepages (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns a list of the homepages that have been assigned to, or created by the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user</param>
        /// <returns>Homepage</returns>
        Homepage GetHomepagesByUserId (string rkUserId);

        /// <summary>
        /// Get the user&#39;s homepages (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns a list of the homepages that have been assigned to, or created by the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user</param>
        /// <returns>ApiResponse of Homepage</returns>
        ApiResponse<Homepage> GetHomepagesByUserIdWithHttpInfo (string rkUserId);
        /// <summary>
        /// Get the roles for a user (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns the roles associated with this user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to fetch</param>
        /// <returns>Role</returns>
        Role GetRolesByUserId (string rkUserId);

        /// <summary>
        /// Get the roles for a user (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns the roles associated with this user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to fetch</param>
        /// <returns>ApiResponse of Role</returns>
        ApiResponse<Role> GetRolesByUserIdWithHttpInfo (string rkUserId);
        /// <summary>
        /// Get a user by ID (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns the details of a single user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to fetch</param>
        /// <returns>User</returns>
        User GetUserById (string rkUserId);

        /// <summary>
        /// Get a user by ID (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns the details of a single user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to fetch</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetUserByIdWithHttpInfo (string rkUserId);
        /// <summary>
        /// Search users (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns a list of all users or those that match the filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="builtin">Fetch users that are builtin to TE deployments or only custom users. (optional)</param>
        /// <param name="description">Descriptions of users to fetch. (optional)</param>
        /// <param name="email">Emails of users to fetch. (optional)</param>
        /// <param name="id">IDs of users to fetch. (optional)</param>
        /// <param name="lastLogin">Last login dates of users to fetch. (optional)</param>
        /// <param name="lastLogout">Last logout dates of users to fetch. (optional)</param>
        /// <param name="name">Names of users to fetch. (optional)</param>
        /// <param name="roleId">The id of the role associated to the user (optional)</param>
        /// <param name="subDescription">Support for substring search for description parameter. (optional)</param>
        /// <returns>User</returns>
        User GetUsers (bool? builtin = null, List<string> description = null, List<string> email = null, List<string> id = null, List<string> lastLogin = null, List<string> lastLogout = null, List<string> name = null, List<string> roleId = null, List<string> subDescription = null);

        /// <summary>
        /// Search users (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns a list of all users or those that match the filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="builtin">Fetch users that are builtin to TE deployments or only custom users. (optional)</param>
        /// <param name="description">Descriptions of users to fetch. (optional)</param>
        /// <param name="email">Emails of users to fetch. (optional)</param>
        /// <param name="id">IDs of users to fetch. (optional)</param>
        /// <param name="lastLogin">Last login dates of users to fetch. (optional)</param>
        /// <param name="lastLogout">Last logout dates of users to fetch. (optional)</param>
        /// <param name="name">Names of users to fetch. (optional)</param>
        /// <param name="roleId">The id of the role associated to the user (optional)</param>
        /// <param name="subDescription">Support for substring search for description parameter. (optional)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetUsersWithHttpInfo (bool? builtin = null, List<string> description = null, List<string> email = null, List<string> id = null, List<string> lastLogin = null, List<string> lastLogout = null, List<string> name = null, List<string> roleId = null, List<string> subDescription = null);
        /// <summary>
        /// Update details of a user (since 1.1)
        /// </summary>
        /// <remarks>
        /// Modifies a user updating the user fields with those submitted in the request. Read-only fields should not be submitted.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to be updated</param>
        /// <param name="body">User description to update the existing user</param>
        /// <returns>User</returns>
        User UpdateUser (string rkUserId, User body);

        /// <summary>
        /// Update details of a user (since 1.1)
        /// </summary>
        /// <remarks>
        /// Modifies a user updating the user fields with those submitted in the request. Read-only fields should not be submitted.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to be updated</param>
        /// <param name="body">User description to update the existing user</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UpdateUserWithHttpInfo (string rkUserId, User body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add a homepage to a user (since 1.1)
        /// </summary>
        /// <remarks>
        /// Adds a homepage to the set of homepages available to a user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to associate</param>
        /// <param name="rkHomePageId">ID of homepage to associate</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssociateHomePageToUserAsync (string rkUserId, string rkHomePageId);

        /// <summary>
        /// Add a homepage to a user (since 1.1)
        /// </summary>
        /// <remarks>
        /// Adds a homepage to the set of homepages available to a user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to associate</param>
        /// <param name="rkHomePageId">ID of homepage to associate</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssociateHomePageToUserAsyncWithHttpInfo (string rkUserId, string rkHomePageId);
        /// <summary>
        /// Associate a role to a user (since 1.1)
        /// </summary>
        /// <remarks>
        /// Associate a role to a user to grant them the permissions associated with that role. The TE user   interface for administering users and roles will not work correctly if multiple roles are applied   to a single user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to associate</param>
        /// <param name="rkRoleId">ID of role to associate</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssociateRoleToUserAsync (string rkUserId, string rkRoleId);

        /// <summary>
        /// Associate a role to a user (since 1.1)
        /// </summary>
        /// <remarks>
        /// Associate a role to a user to grant them the permissions associated with that role. The TE user   interface for administering users and roles will not work correctly if multiple roles are applied   to a single user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to associate</param>
        /// <param name="rkRoleId">ID of role to associate</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssociateRoleToUserAsyncWithHttpInfo (string rkUserId, string rkRoleId);
        /// <summary>
        /// Set or change a user&#39;s password (since 1.3)
        /// </summary>
        /// <remarks>
        /// The API allows an authorized user (the admin user or the user himself) to change a password. If the  requesting user does not have the Administrator role, then the old password must be submitted, and rkUserId must be the user&#39;s own ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to change password</param>
        /// <param name="body">Password object to be set/change for user</param>
        /// <returns>Task of Password</returns>
        System.Threading.Tasks.Task<Password> ChangePasswordAsync (string rkUserId, Password body);

        /// <summary>
        /// Set or change a user&#39;s password (since 1.3)
        /// </summary>
        /// <remarks>
        /// The API allows an authorized user (the admin user or the user himself) to change a password. If the  requesting user does not have the Administrator role, then the old password must be submitted, and rkUserId must be the user&#39;s own ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to change password</param>
        /// <param name="body">Password object to be set/change for user</param>
        /// <returns>Task of ApiResponse (Password)</returns>
        System.Threading.Tasks.Task<ApiResponse<Password>> ChangePasswordAsyncWithHttpInfo (string rkUserId, Password body);
        /// <summary>
        /// Create a new user (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns the newly created user. The user has no password, and no role.  A role must be associated before the user logs in.  If using LDAP authentication with Tripwire Enterprise, the password may be left unset.  The TE UI will not support editing a user that does not have a password or role set.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User object to be created in TE</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> CreateUserAsync (User body);

        /// <summary>
        /// Create a new user (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns the newly created user. The user has no password, and no role.  A role must be associated before the user logs in.  If using LDAP authentication with Tripwire Enterprise, the password may be left unset.  The TE UI will not support editing a user that does not have a password or role set.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User object to be created in TE</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> CreateUserAsyncWithHttpInfo (User body);
        /// <summary>
        /// Delete a user (since 1.1)
        /// </summary>
        /// <remarks>
        /// Removes a user from the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to fetch</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserAsync (string rkUserId);

        /// <summary>
        /// Delete a user (since 1.1)
        /// </summary>
        /// <remarks>
        /// Removes a user from the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to fetch</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserAsyncWithHttpInfo (string rkUserId);
        /// <summary>
        /// Delete a homepage from a user&#39;s list of homepages (since 1.1)
        /// </summary>
        /// <remarks>
        /// Removes the homepage from those available to the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">rkUserId</param>
        /// <param name="rkHomePageId">rkHomePageId</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DisassociateHomepageFromUserAsync (string rkUserId, string rkHomePageId);

        /// <summary>
        /// Delete a homepage from a user&#39;s list of homepages (since 1.1)
        /// </summary>
        /// <remarks>
        /// Removes the homepage from those available to the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">rkUserId</param>
        /// <param name="rkHomePageId">rkHomePageId</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DisassociateHomepageFromUserAsyncWithHttpInfo (string rkUserId, string rkHomePageId);
        /// <summary>
        /// Delete a role from a user (since 1.1)
        /// </summary>
        /// <remarks>
        /// Removes a role from those associated with a user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to disassociate</param>
        /// <param name="rkRoleId">ID of role to disassociate</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DisassociateRoleFromUserAsync (string rkUserId, string rkRoleId);

        /// <summary>
        /// Delete a role from a user (since 1.1)
        /// </summary>
        /// <remarks>
        /// Removes a role from those associated with a user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to disassociate</param>
        /// <param name="rkRoleId">ID of role to disassociate</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DisassociateRoleFromUserAsyncWithHttpInfo (string rkUserId, string rkRoleId);
        /// <summary>
        /// List the user groups a user is a member of (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns a list of the user groups that the specified user belongs to.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user</param>
        /// <returns>Task of UserGroup</returns>
        System.Threading.Tasks.Task<UserGroup> GetGroupsOfUserAsync (string rkUserId);

        /// <summary>
        /// List the user groups a user is a member of (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns a list of the user groups that the specified user belongs to.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user</param>
        /// <returns>Task of ApiResponse (UserGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserGroup>> GetGroupsOfUserAsyncWithHttpInfo (string rkUserId);
        /// <summary>
        /// Get the user&#39;s homepages (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns a list of the homepages that have been assigned to, or created by the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user</param>
        /// <returns>Task of Homepage</returns>
        System.Threading.Tasks.Task<Homepage> GetHomepagesByUserIdAsync (string rkUserId);

        /// <summary>
        /// Get the user&#39;s homepages (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns a list of the homepages that have been assigned to, or created by the user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user</param>
        /// <returns>Task of ApiResponse (Homepage)</returns>
        System.Threading.Tasks.Task<ApiResponse<Homepage>> GetHomepagesByUserIdAsyncWithHttpInfo (string rkUserId);
        /// <summary>
        /// Get the roles for a user (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns the roles associated with this user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to fetch</param>
        /// <returns>Task of Role</returns>
        System.Threading.Tasks.Task<Role> GetRolesByUserIdAsync (string rkUserId);

        /// <summary>
        /// Get the roles for a user (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns the roles associated with this user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to fetch</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        System.Threading.Tasks.Task<ApiResponse<Role>> GetRolesByUserIdAsyncWithHttpInfo (string rkUserId);
        /// <summary>
        /// Get a user by ID (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns the details of a single user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to fetch</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetUserByIdAsync (string rkUserId);

        /// <summary>
        /// Get a user by ID (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns the details of a single user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to fetch</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetUserByIdAsyncWithHttpInfo (string rkUserId);
        /// <summary>
        /// Search users (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns a list of all users or those that match the filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="builtin">Fetch users that are builtin to TE deployments or only custom users. (optional)</param>
        /// <param name="description">Descriptions of users to fetch. (optional)</param>
        /// <param name="email">Emails of users to fetch. (optional)</param>
        /// <param name="id">IDs of users to fetch. (optional)</param>
        /// <param name="lastLogin">Last login dates of users to fetch. (optional)</param>
        /// <param name="lastLogout">Last logout dates of users to fetch. (optional)</param>
        /// <param name="name">Names of users to fetch. (optional)</param>
        /// <param name="roleId">The id of the role associated to the user (optional)</param>
        /// <param name="subDescription">Support for substring search for description parameter. (optional)</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetUsersAsync (bool? builtin = null, List<string> description = null, List<string> email = null, List<string> id = null, List<string> lastLogin = null, List<string> lastLogout = null, List<string> name = null, List<string> roleId = null, List<string> subDescription = null);

        /// <summary>
        /// Search users (since 1.1)
        /// </summary>
        /// <remarks>
        /// Returns a list of all users or those that match the filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="builtin">Fetch users that are builtin to TE deployments or only custom users. (optional)</param>
        /// <param name="description">Descriptions of users to fetch. (optional)</param>
        /// <param name="email">Emails of users to fetch. (optional)</param>
        /// <param name="id">IDs of users to fetch. (optional)</param>
        /// <param name="lastLogin">Last login dates of users to fetch. (optional)</param>
        /// <param name="lastLogout">Last logout dates of users to fetch. (optional)</param>
        /// <param name="name">Names of users to fetch. (optional)</param>
        /// <param name="roleId">The id of the role associated to the user (optional)</param>
        /// <param name="subDescription">Support for substring search for description parameter. (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetUsersAsyncWithHttpInfo (bool? builtin = null, List<string> description = null, List<string> email = null, List<string> id = null, List<string> lastLogin = null, List<string> lastLogout = null, List<string> name = null, List<string> roleId = null, List<string> subDescription = null);
        /// <summary>
        /// Update details of a user (since 1.1)
        /// </summary>
        /// <remarks>
        /// Modifies a user updating the user fields with those submitted in the request. Read-only fields should not be submitted.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to be updated</param>
        /// <param name="body">User description to update the existing user</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UpdateUserAsync (string rkUserId, User body);

        /// <summary>
        /// Update details of a user (since 1.1)
        /// </summary>
        /// <remarks>
        /// Modifies a user updating the user fields with those submitted in the request. Read-only fields should not be submitted.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to be updated</param>
        /// <param name="body">User description to update the existing user</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UpdateUserAsyncWithHttpInfo (string rkUserId, User body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add a homepage to a user (since 1.1) Adds a homepage to the set of homepages available to a user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to associate</param>
        /// <param name="rkHomePageId">ID of homepage to associate</param>
        /// <returns></returns>
        public void AssociateHomePageToUser (string rkUserId, string rkHomePageId)
        {
             AssociateHomePageToUserWithHttpInfo(rkUserId, rkHomePageId);
        }

        /// <summary>
        /// Add a homepage to a user (since 1.1) Adds a homepage to the set of homepages available to a user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to associate</param>
        /// <param name="rkHomePageId">ID of homepage to associate</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssociateHomePageToUserWithHttpInfo (string rkUserId, string rkHomePageId)
        {
            // verify the required parameter 'rkUserId' is set
            if (rkUserId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserId' when calling UsersApi->AssociateHomePageToUser");
            // verify the required parameter 'rkHomePageId' is set
            if (rkHomePageId == null)
                throw new ApiException(400, "Missing required parameter 'rkHomePageId' when calling UsersApi->AssociateHomePageToUser");

            var localVarPath = "/users/{rkUserId}/homepages/{rkHomePageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserId != null) localVarPathParams.Add("rkUserId", this.Configuration.ApiClient.ParameterToString(rkUserId)); // path parameter
            if (rkHomePageId != null) localVarPathParams.Add("rkHomePageId", this.Configuration.ApiClient.ParameterToString(rkHomePageId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociateHomePageToUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add a homepage to a user (since 1.1) Adds a homepage to the set of homepages available to a user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to associate</param>
        /// <param name="rkHomePageId">ID of homepage to associate</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssociateHomePageToUserAsync (string rkUserId, string rkHomePageId)
        {
             await AssociateHomePageToUserAsyncWithHttpInfo(rkUserId, rkHomePageId);

        }

        /// <summary>
        /// Add a homepage to a user (since 1.1) Adds a homepage to the set of homepages available to a user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to associate</param>
        /// <param name="rkHomePageId">ID of homepage to associate</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssociateHomePageToUserAsyncWithHttpInfo (string rkUserId, string rkHomePageId)
        {
            // verify the required parameter 'rkUserId' is set
            if (rkUserId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserId' when calling UsersApi->AssociateHomePageToUser");
            // verify the required parameter 'rkHomePageId' is set
            if (rkHomePageId == null)
                throw new ApiException(400, "Missing required parameter 'rkHomePageId' when calling UsersApi->AssociateHomePageToUser");

            var localVarPath = "/users/{rkUserId}/homepages/{rkHomePageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserId != null) localVarPathParams.Add("rkUserId", this.Configuration.ApiClient.ParameterToString(rkUserId)); // path parameter
            if (rkHomePageId != null) localVarPathParams.Add("rkHomePageId", this.Configuration.ApiClient.ParameterToString(rkHomePageId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociateHomePageToUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Associate a role to a user (since 1.1) Associate a role to a user to grant them the permissions associated with that role. The TE user   interface for administering users and roles will not work correctly if multiple roles are applied   to a single user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to associate</param>
        /// <param name="rkRoleId">ID of role to associate</param>
        /// <returns></returns>
        public void AssociateRoleToUser (string rkUserId, string rkRoleId)
        {
             AssociateRoleToUserWithHttpInfo(rkUserId, rkRoleId);
        }

        /// <summary>
        /// Associate a role to a user (since 1.1) Associate a role to a user to grant them the permissions associated with that role. The TE user   interface for administering users and roles will not work correctly if multiple roles are applied   to a single user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to associate</param>
        /// <param name="rkRoleId">ID of role to associate</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssociateRoleToUserWithHttpInfo (string rkUserId, string rkRoleId)
        {
            // verify the required parameter 'rkUserId' is set
            if (rkUserId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserId' when calling UsersApi->AssociateRoleToUser");
            // verify the required parameter 'rkRoleId' is set
            if (rkRoleId == null)
                throw new ApiException(400, "Missing required parameter 'rkRoleId' when calling UsersApi->AssociateRoleToUser");

            var localVarPath = "/users/{rkUserId}/roles/{rkRoleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserId != null) localVarPathParams.Add("rkUserId", this.Configuration.ApiClient.ParameterToString(rkUserId)); // path parameter
            if (rkRoleId != null) localVarPathParams.Add("rkRoleId", this.Configuration.ApiClient.ParameterToString(rkRoleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociateRoleToUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Associate a role to a user (since 1.1) Associate a role to a user to grant them the permissions associated with that role. The TE user   interface for administering users and roles will not work correctly if multiple roles are applied   to a single user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to associate</param>
        /// <param name="rkRoleId">ID of role to associate</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssociateRoleToUserAsync (string rkUserId, string rkRoleId)
        {
             await AssociateRoleToUserAsyncWithHttpInfo(rkUserId, rkRoleId);

        }

        /// <summary>
        /// Associate a role to a user (since 1.1) Associate a role to a user to grant them the permissions associated with that role. The TE user   interface for administering users and roles will not work correctly if multiple roles are applied   to a single user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to associate</param>
        /// <param name="rkRoleId">ID of role to associate</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssociateRoleToUserAsyncWithHttpInfo (string rkUserId, string rkRoleId)
        {
            // verify the required parameter 'rkUserId' is set
            if (rkUserId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserId' when calling UsersApi->AssociateRoleToUser");
            // verify the required parameter 'rkRoleId' is set
            if (rkRoleId == null)
                throw new ApiException(400, "Missing required parameter 'rkRoleId' when calling UsersApi->AssociateRoleToUser");

            var localVarPath = "/users/{rkUserId}/roles/{rkRoleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserId != null) localVarPathParams.Add("rkUserId", this.Configuration.ApiClient.ParameterToString(rkUserId)); // path parameter
            if (rkRoleId != null) localVarPathParams.Add("rkRoleId", this.Configuration.ApiClient.ParameterToString(rkRoleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociateRoleToUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set or change a user&#39;s password (since 1.3) The API allows an authorized user (the admin user or the user himself) to change a password. If the  requesting user does not have the Administrator role, then the old password must be submitted, and rkUserId must be the user&#39;s own ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to change password</param>
        /// <param name="body">Password object to be set/change for user</param>
        /// <returns>Password</returns>
        public Password ChangePassword (string rkUserId, Password body)
        {
             ApiResponse<Password> localVarResponse = ChangePasswordWithHttpInfo(rkUserId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set or change a user&#39;s password (since 1.3) The API allows an authorized user (the admin user or the user himself) to change a password. If the  requesting user does not have the Administrator role, then the old password must be submitted, and rkUserId must be the user&#39;s own ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to change password</param>
        /// <param name="body">Password object to be set/change for user</param>
        /// <returns>ApiResponse of Password</returns>
        public ApiResponse< Password > ChangePasswordWithHttpInfo (string rkUserId, Password body)
        {
            // verify the required parameter 'rkUserId' is set
            if (rkUserId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserId' when calling UsersApi->ChangePassword");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->ChangePassword");

            var localVarPath = "/users/{rkUserId}/password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserId != null) localVarPathParams.Add("rkUserId", this.Configuration.ApiClient.ParameterToString(rkUserId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangePassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Password>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Password) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Password)));
        }

        /// <summary>
        /// Set or change a user&#39;s password (since 1.3) The API allows an authorized user (the admin user or the user himself) to change a password. If the  requesting user does not have the Administrator role, then the old password must be submitted, and rkUserId must be the user&#39;s own ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to change password</param>
        /// <param name="body">Password object to be set/change for user</param>
        /// <returns>Task of Password</returns>
        public async System.Threading.Tasks.Task<Password> ChangePasswordAsync (string rkUserId, Password body)
        {
             ApiResponse<Password> localVarResponse = await ChangePasswordAsyncWithHttpInfo(rkUserId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set or change a user&#39;s password (since 1.3) The API allows an authorized user (the admin user or the user himself) to change a password. If the  requesting user does not have the Administrator role, then the old password must be submitted, and rkUserId must be the user&#39;s own ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to change password</param>
        /// <param name="body">Password object to be set/change for user</param>
        /// <returns>Task of ApiResponse (Password)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Password>> ChangePasswordAsyncWithHttpInfo (string rkUserId, Password body)
        {
            // verify the required parameter 'rkUserId' is set
            if (rkUserId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserId' when calling UsersApi->ChangePassword");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->ChangePassword");

            var localVarPath = "/users/{rkUserId}/password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserId != null) localVarPathParams.Add("rkUserId", this.Configuration.ApiClient.ParameterToString(rkUserId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangePassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Password>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Password) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Password)));
        }

        /// <summary>
        /// Create a new user (since 1.1) Returns the newly created user. The user has no password, and no role.  A role must be associated before the user logs in.  If using LDAP authentication with Tripwire Enterprise, the password may be left unset.  The TE UI will not support editing a user that does not have a password or role set.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User object to be created in TE</param>
        /// <returns>User</returns>
        public User CreateUser (User body)
        {
             ApiResponse<User> localVarResponse = CreateUserWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new user (since 1.1) Returns the newly created user. The user has no password, and no role.  A role must be associated before the user logs in.  If using LDAP authentication with Tripwire Enterprise, the password may be left unset.  The TE UI will not support editing a user that does not have a password or role set.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User object to be created in TE</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > CreateUserWithHttpInfo (User body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->CreateUser");

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Create a new user (since 1.1) Returns the newly created user. The user has no password, and no role.  A role must be associated before the user logs in.  If using LDAP authentication with Tripwire Enterprise, the password may be left unset.  The TE UI will not support editing a user that does not have a password or role set.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User object to be created in TE</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> CreateUserAsync (User body)
        {
             ApiResponse<User> localVarResponse = await CreateUserAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new user (since 1.1) Returns the newly created user. The user has no password, and no role.  A role must be associated before the user logs in.  If using LDAP authentication with Tripwire Enterprise, the password may be left unset.  The TE UI will not support editing a user that does not have a password or role set.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User object to be created in TE</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> CreateUserAsyncWithHttpInfo (User body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->CreateUser");

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Delete a user (since 1.1) Removes a user from the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to fetch</param>
        /// <returns></returns>
        public void DeleteUser (string rkUserId)
        {
             DeleteUserWithHttpInfo(rkUserId);
        }

        /// <summary>
        /// Delete a user (since 1.1) Removes a user from the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to fetch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteUserWithHttpInfo (string rkUserId)
        {
            // verify the required parameter 'rkUserId' is set
            if (rkUserId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserId' when calling UsersApi->DeleteUser");

            var localVarPath = "/users/{rkUserId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserId != null) localVarPathParams.Add("rkUserId", this.Configuration.ApiClient.ParameterToString(rkUserId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a user (since 1.1) Removes a user from the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to fetch</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserAsync (string rkUserId)
        {
             await DeleteUserAsyncWithHttpInfo(rkUserId);

        }

        /// <summary>
        /// Delete a user (since 1.1) Removes a user from the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to fetch</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserAsyncWithHttpInfo (string rkUserId)
        {
            // verify the required parameter 'rkUserId' is set
            if (rkUserId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserId' when calling UsersApi->DeleteUser");

            var localVarPath = "/users/{rkUserId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserId != null) localVarPathParams.Add("rkUserId", this.Configuration.ApiClient.ParameterToString(rkUserId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a homepage from a user&#39;s list of homepages (since 1.1) Removes the homepage from those available to the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">rkUserId</param>
        /// <param name="rkHomePageId">rkHomePageId</param>
        /// <returns></returns>
        public void DisassociateHomepageFromUser (string rkUserId, string rkHomePageId)
        {
             DisassociateHomepageFromUserWithHttpInfo(rkUserId, rkHomePageId);
        }

        /// <summary>
        /// Delete a homepage from a user&#39;s list of homepages (since 1.1) Removes the homepage from those available to the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">rkUserId</param>
        /// <param name="rkHomePageId">rkHomePageId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DisassociateHomepageFromUserWithHttpInfo (string rkUserId, string rkHomePageId)
        {
            // verify the required parameter 'rkUserId' is set
            if (rkUserId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserId' when calling UsersApi->DisassociateHomepageFromUser");
            // verify the required parameter 'rkHomePageId' is set
            if (rkHomePageId == null)
                throw new ApiException(400, "Missing required parameter 'rkHomePageId' when calling UsersApi->DisassociateHomepageFromUser");

            var localVarPath = "/users/{rkUserId}/homepages/{rkHomePageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserId != null) localVarPathParams.Add("rkUserId", this.Configuration.ApiClient.ParameterToString(rkUserId)); // path parameter
            if (rkHomePageId != null) localVarPathParams.Add("rkHomePageId", this.Configuration.ApiClient.ParameterToString(rkHomePageId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisassociateHomepageFromUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a homepage from a user&#39;s list of homepages (since 1.1) Removes the homepage from those available to the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">rkUserId</param>
        /// <param name="rkHomePageId">rkHomePageId</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DisassociateHomepageFromUserAsync (string rkUserId, string rkHomePageId)
        {
             await DisassociateHomepageFromUserAsyncWithHttpInfo(rkUserId, rkHomePageId);

        }

        /// <summary>
        /// Delete a homepage from a user&#39;s list of homepages (since 1.1) Removes the homepage from those available to the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">rkUserId</param>
        /// <param name="rkHomePageId">rkHomePageId</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DisassociateHomepageFromUserAsyncWithHttpInfo (string rkUserId, string rkHomePageId)
        {
            // verify the required parameter 'rkUserId' is set
            if (rkUserId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserId' when calling UsersApi->DisassociateHomepageFromUser");
            // verify the required parameter 'rkHomePageId' is set
            if (rkHomePageId == null)
                throw new ApiException(400, "Missing required parameter 'rkHomePageId' when calling UsersApi->DisassociateHomepageFromUser");

            var localVarPath = "/users/{rkUserId}/homepages/{rkHomePageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserId != null) localVarPathParams.Add("rkUserId", this.Configuration.ApiClient.ParameterToString(rkUserId)); // path parameter
            if (rkHomePageId != null) localVarPathParams.Add("rkHomePageId", this.Configuration.ApiClient.ParameterToString(rkHomePageId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisassociateHomepageFromUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a role from a user (since 1.1) Removes a role from those associated with a user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to disassociate</param>
        /// <param name="rkRoleId">ID of role to disassociate</param>
        /// <returns></returns>
        public void DisassociateRoleFromUser (string rkUserId, string rkRoleId)
        {
             DisassociateRoleFromUserWithHttpInfo(rkUserId, rkRoleId);
        }

        /// <summary>
        /// Delete a role from a user (since 1.1) Removes a role from those associated with a user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to disassociate</param>
        /// <param name="rkRoleId">ID of role to disassociate</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DisassociateRoleFromUserWithHttpInfo (string rkUserId, string rkRoleId)
        {
            // verify the required parameter 'rkUserId' is set
            if (rkUserId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserId' when calling UsersApi->DisassociateRoleFromUser");
            // verify the required parameter 'rkRoleId' is set
            if (rkRoleId == null)
                throw new ApiException(400, "Missing required parameter 'rkRoleId' when calling UsersApi->DisassociateRoleFromUser");

            var localVarPath = "/users/{rkUserId}/roles/{rkRoleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserId != null) localVarPathParams.Add("rkUserId", this.Configuration.ApiClient.ParameterToString(rkUserId)); // path parameter
            if (rkRoleId != null) localVarPathParams.Add("rkRoleId", this.Configuration.ApiClient.ParameterToString(rkRoleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisassociateRoleFromUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a role from a user (since 1.1) Removes a role from those associated with a user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to disassociate</param>
        /// <param name="rkRoleId">ID of role to disassociate</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DisassociateRoleFromUserAsync (string rkUserId, string rkRoleId)
        {
             await DisassociateRoleFromUserAsyncWithHttpInfo(rkUserId, rkRoleId);

        }

        /// <summary>
        /// Delete a role from a user (since 1.1) Removes a role from those associated with a user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to disassociate</param>
        /// <param name="rkRoleId">ID of role to disassociate</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DisassociateRoleFromUserAsyncWithHttpInfo (string rkUserId, string rkRoleId)
        {
            // verify the required parameter 'rkUserId' is set
            if (rkUserId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserId' when calling UsersApi->DisassociateRoleFromUser");
            // verify the required parameter 'rkRoleId' is set
            if (rkRoleId == null)
                throw new ApiException(400, "Missing required parameter 'rkRoleId' when calling UsersApi->DisassociateRoleFromUser");

            var localVarPath = "/users/{rkUserId}/roles/{rkRoleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserId != null) localVarPathParams.Add("rkUserId", this.Configuration.ApiClient.ParameterToString(rkUserId)); // path parameter
            if (rkRoleId != null) localVarPathParams.Add("rkRoleId", this.Configuration.ApiClient.ParameterToString(rkRoleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisassociateRoleFromUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List the user groups a user is a member of (since 1.1) Returns a list of the user groups that the specified user belongs to.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user</param>
        /// <returns>UserGroup</returns>
        public UserGroup GetGroupsOfUser (string rkUserId)
        {
             ApiResponse<UserGroup> localVarResponse = GetGroupsOfUserWithHttpInfo(rkUserId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the user groups a user is a member of (since 1.1) Returns a list of the user groups that the specified user belongs to.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user</param>
        /// <returns>ApiResponse of UserGroup</returns>
        public ApiResponse< UserGroup > GetGroupsOfUserWithHttpInfo (string rkUserId)
        {
            // verify the required parameter 'rkUserId' is set
            if (rkUserId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserId' when calling UsersApi->GetGroupsOfUser");

            var localVarPath = "/users/{rkUserId}/user-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserId != null) localVarPathParams.Add("rkUserId", this.Configuration.ApiClient.ParameterToString(rkUserId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupsOfUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserGroup)));
        }

        /// <summary>
        /// List the user groups a user is a member of (since 1.1) Returns a list of the user groups that the specified user belongs to.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user</param>
        /// <returns>Task of UserGroup</returns>
        public async System.Threading.Tasks.Task<UserGroup> GetGroupsOfUserAsync (string rkUserId)
        {
             ApiResponse<UserGroup> localVarResponse = await GetGroupsOfUserAsyncWithHttpInfo(rkUserId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List the user groups a user is a member of (since 1.1) Returns a list of the user groups that the specified user belongs to.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user</param>
        /// <returns>Task of ApiResponse (UserGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserGroup>> GetGroupsOfUserAsyncWithHttpInfo (string rkUserId)
        {
            // verify the required parameter 'rkUserId' is set
            if (rkUserId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserId' when calling UsersApi->GetGroupsOfUser");

            var localVarPath = "/users/{rkUserId}/user-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserId != null) localVarPathParams.Add("rkUserId", this.Configuration.ApiClient.ParameterToString(rkUserId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupsOfUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserGroup)));
        }

        /// <summary>
        /// Get the user&#39;s homepages (since 1.1) Returns a list of the homepages that have been assigned to, or created by the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user</param>
        /// <returns>Homepage</returns>
        public Homepage GetHomepagesByUserId (string rkUserId)
        {
             ApiResponse<Homepage> localVarResponse = GetHomepagesByUserIdWithHttpInfo(rkUserId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the user&#39;s homepages (since 1.1) Returns a list of the homepages that have been assigned to, or created by the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user</param>
        /// <returns>ApiResponse of Homepage</returns>
        public ApiResponse< Homepage > GetHomepagesByUserIdWithHttpInfo (string rkUserId)
        {
            // verify the required parameter 'rkUserId' is set
            if (rkUserId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserId' when calling UsersApi->GetHomepagesByUserId");

            var localVarPath = "/users/{rkUserId}/homepages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserId != null) localVarPathParams.Add("rkUserId", this.Configuration.ApiClient.ParameterToString(rkUserId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHomepagesByUserId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Homepage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Homepage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Homepage)));
        }

        /// <summary>
        /// Get the user&#39;s homepages (since 1.1) Returns a list of the homepages that have been assigned to, or created by the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user</param>
        /// <returns>Task of Homepage</returns>
        public async System.Threading.Tasks.Task<Homepage> GetHomepagesByUserIdAsync (string rkUserId)
        {
             ApiResponse<Homepage> localVarResponse = await GetHomepagesByUserIdAsyncWithHttpInfo(rkUserId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the user&#39;s homepages (since 1.1) Returns a list of the homepages that have been assigned to, or created by the user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user</param>
        /// <returns>Task of ApiResponse (Homepage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Homepage>> GetHomepagesByUserIdAsyncWithHttpInfo (string rkUserId)
        {
            // verify the required parameter 'rkUserId' is set
            if (rkUserId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserId' when calling UsersApi->GetHomepagesByUserId");

            var localVarPath = "/users/{rkUserId}/homepages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserId != null) localVarPathParams.Add("rkUserId", this.Configuration.ApiClient.ParameterToString(rkUserId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHomepagesByUserId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Homepage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Homepage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Homepage)));
        }

        /// <summary>
        /// Get the roles for a user (since 1.1) Returns the roles associated with this user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to fetch</param>
        /// <returns>Role</returns>
        public Role GetRolesByUserId (string rkUserId)
        {
             ApiResponse<Role> localVarResponse = GetRolesByUserIdWithHttpInfo(rkUserId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the roles for a user (since 1.1) Returns the roles associated with this user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to fetch</param>
        /// <returns>ApiResponse of Role</returns>
        public ApiResponse< Role > GetRolesByUserIdWithHttpInfo (string rkUserId)
        {
            // verify the required parameter 'rkUserId' is set
            if (rkUserId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserId' when calling UsersApi->GetRolesByUserId");

            var localVarPath = "/users/{rkUserId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserId != null) localVarPathParams.Add("rkUserId", this.Configuration.ApiClient.ParameterToString(rkUserId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRolesByUserId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Role>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Role) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
        }

        /// <summary>
        /// Get the roles for a user (since 1.1) Returns the roles associated with this user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to fetch</param>
        /// <returns>Task of Role</returns>
        public async System.Threading.Tasks.Task<Role> GetRolesByUserIdAsync (string rkUserId)
        {
             ApiResponse<Role> localVarResponse = await GetRolesByUserIdAsyncWithHttpInfo(rkUserId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the roles for a user (since 1.1) Returns the roles associated with this user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to fetch</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Role>> GetRolesByUserIdAsyncWithHttpInfo (string rkUserId)
        {
            // verify the required parameter 'rkUserId' is set
            if (rkUserId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserId' when calling UsersApi->GetRolesByUserId");

            var localVarPath = "/users/{rkUserId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserId != null) localVarPathParams.Add("rkUserId", this.Configuration.ApiClient.ParameterToString(rkUserId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRolesByUserId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Role>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Role) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
        }

        /// <summary>
        /// Get a user by ID (since 1.1) Returns the details of a single user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to fetch</param>
        /// <returns>User</returns>
        public User GetUserById (string rkUserId)
        {
             ApiResponse<User> localVarResponse = GetUserByIdWithHttpInfo(rkUserId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user by ID (since 1.1) Returns the details of a single user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to fetch</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > GetUserByIdWithHttpInfo (string rkUserId)
        {
            // verify the required parameter 'rkUserId' is set
            if (rkUserId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserId' when calling UsersApi->GetUserById");

            var localVarPath = "/users/{rkUserId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserId != null) localVarPathParams.Add("rkUserId", this.Configuration.ApiClient.ParameterToString(rkUserId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get a user by ID (since 1.1) Returns the details of a single user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to fetch</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetUserByIdAsync (string rkUserId)
        {
             ApiResponse<User> localVarResponse = await GetUserByIdAsyncWithHttpInfo(rkUserId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a user by ID (since 1.1) Returns the details of a single user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to fetch</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> GetUserByIdAsyncWithHttpInfo (string rkUserId)
        {
            // verify the required parameter 'rkUserId' is set
            if (rkUserId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserId' when calling UsersApi->GetUserById");

            var localVarPath = "/users/{rkUserId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserId != null) localVarPathParams.Add("rkUserId", this.Configuration.ApiClient.ParameterToString(rkUserId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Search users (since 1.1) Returns a list of all users or those that match the filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="builtin">Fetch users that are builtin to TE deployments or only custom users. (optional)</param>
        /// <param name="description">Descriptions of users to fetch. (optional)</param>
        /// <param name="email">Emails of users to fetch. (optional)</param>
        /// <param name="id">IDs of users to fetch. (optional)</param>
        /// <param name="lastLogin">Last login dates of users to fetch. (optional)</param>
        /// <param name="lastLogout">Last logout dates of users to fetch. (optional)</param>
        /// <param name="name">Names of users to fetch. (optional)</param>
        /// <param name="roleId">The id of the role associated to the user (optional)</param>
        /// <param name="subDescription">Support for substring search for description parameter. (optional)</param>
        /// <returns>User</returns>
        public User GetUsers (bool? builtin = null, List<string> description = null, List<string> email = null, List<string> id = null, List<string> lastLogin = null, List<string> lastLogout = null, List<string> name = null, List<string> roleId = null, List<string> subDescription = null)
        {
             ApiResponse<User> localVarResponse = GetUsersWithHttpInfo(builtin, description, email, id, lastLogin, lastLogout, name, roleId, subDescription);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search users (since 1.1) Returns a list of all users or those that match the filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="builtin">Fetch users that are builtin to TE deployments or only custom users. (optional)</param>
        /// <param name="description">Descriptions of users to fetch. (optional)</param>
        /// <param name="email">Emails of users to fetch. (optional)</param>
        /// <param name="id">IDs of users to fetch. (optional)</param>
        /// <param name="lastLogin">Last login dates of users to fetch. (optional)</param>
        /// <param name="lastLogout">Last logout dates of users to fetch. (optional)</param>
        /// <param name="name">Names of users to fetch. (optional)</param>
        /// <param name="roleId">The id of the role associated to the user (optional)</param>
        /// <param name="subDescription">Support for substring search for description parameter. (optional)</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > GetUsersWithHttpInfo (bool? builtin = null, List<string> description = null, List<string> email = null, List<string> id = null, List<string> lastLogin = null, List<string> lastLogout = null, List<string> name = null, List<string> roleId = null, List<string> subDescription = null)
        {

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (builtin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "builtin", builtin)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "description", description)); // query parameter
            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "email", email)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (lastLogin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "lastLogin", lastLogin)); // query parameter
            if (lastLogout != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "lastLogout", lastLogout)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (roleId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "roleId", roleId)); // query parameter
            if (subDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sub_description", subDescription)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Search users (since 1.1) Returns a list of all users or those that match the filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="builtin">Fetch users that are builtin to TE deployments or only custom users. (optional)</param>
        /// <param name="description">Descriptions of users to fetch. (optional)</param>
        /// <param name="email">Emails of users to fetch. (optional)</param>
        /// <param name="id">IDs of users to fetch. (optional)</param>
        /// <param name="lastLogin">Last login dates of users to fetch. (optional)</param>
        /// <param name="lastLogout">Last logout dates of users to fetch. (optional)</param>
        /// <param name="name">Names of users to fetch. (optional)</param>
        /// <param name="roleId">The id of the role associated to the user (optional)</param>
        /// <param name="subDescription">Support for substring search for description parameter. (optional)</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetUsersAsync (bool? builtin = null, List<string> description = null, List<string> email = null, List<string> id = null, List<string> lastLogin = null, List<string> lastLogout = null, List<string> name = null, List<string> roleId = null, List<string> subDescription = null)
        {
             ApiResponse<User> localVarResponse = await GetUsersAsyncWithHttpInfo(builtin, description, email, id, lastLogin, lastLogout, name, roleId, subDescription);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search users (since 1.1) Returns a list of all users or those that match the filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="builtin">Fetch users that are builtin to TE deployments or only custom users. (optional)</param>
        /// <param name="description">Descriptions of users to fetch. (optional)</param>
        /// <param name="email">Emails of users to fetch. (optional)</param>
        /// <param name="id">IDs of users to fetch. (optional)</param>
        /// <param name="lastLogin">Last login dates of users to fetch. (optional)</param>
        /// <param name="lastLogout">Last logout dates of users to fetch. (optional)</param>
        /// <param name="name">Names of users to fetch. (optional)</param>
        /// <param name="roleId">The id of the role associated to the user (optional)</param>
        /// <param name="subDescription">Support for substring search for description parameter. (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> GetUsersAsyncWithHttpInfo (bool? builtin = null, List<string> description = null, List<string> email = null, List<string> id = null, List<string> lastLogin = null, List<string> lastLogout = null, List<string> name = null, List<string> roleId = null, List<string> subDescription = null)
        {

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (builtin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "builtin", builtin)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "description", description)); // query parameter
            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "email", email)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (lastLogin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "lastLogin", lastLogin)); // query parameter
            if (lastLogout != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "lastLogout", lastLogout)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (roleId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "roleId", roleId)); // query parameter
            if (subDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sub_description", subDescription)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Update details of a user (since 1.1) Modifies a user updating the user fields with those submitted in the request. Read-only fields should not be submitted.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to be updated</param>
        /// <param name="body">User description to update the existing user</param>
        /// <returns>User</returns>
        public User UpdateUser (string rkUserId, User body)
        {
             ApiResponse<User> localVarResponse = UpdateUserWithHttpInfo(rkUserId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update details of a user (since 1.1) Modifies a user updating the user fields with those submitted in the request. Read-only fields should not be submitted.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to be updated</param>
        /// <param name="body">User description to update the existing user</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > UpdateUserWithHttpInfo (string rkUserId, User body)
        {
            // verify the required parameter 'rkUserId' is set
            if (rkUserId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserId' when calling UsersApi->UpdateUser");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UpdateUser");

            var localVarPath = "/users/{rkUserId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserId != null) localVarPathParams.Add("rkUserId", this.Configuration.ApiClient.ParameterToString(rkUserId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Update details of a user (since 1.1) Modifies a user updating the user fields with those submitted in the request. Read-only fields should not be submitted.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to be updated</param>
        /// <param name="body">User description to update the existing user</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UpdateUserAsync (string rkUserId, User body)
        {
             ApiResponse<User> localVarResponse = await UpdateUserAsyncWithHttpInfo(rkUserId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update details of a user (since 1.1) Modifies a user updating the user fields with those submitted in the request. Read-only fields should not be submitted.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkUserId">ID of user to be updated</param>
        /// <param name="body">User description to update the existing user</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> UpdateUserAsyncWithHttpInfo (string rkUserId, User body)
        {
            // verify the required parameter 'rkUserId' is set
            if (rkUserId == null)
                throw new ApiException(400, "Missing required parameter 'rkUserId' when calling UsersApi->UpdateUser");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UpdateUser");

            var localVarPath = "/users/{rkUserId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkUserId != null) localVarPathParams.Add("rkUserId", this.Configuration.ApiClient.ParameterToString(rkUserId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

    }
}

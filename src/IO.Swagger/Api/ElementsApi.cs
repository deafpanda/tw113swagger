/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.12.1.bmaster.r20170922182356-4e84151.b1741
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IElementsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an element custom property definition (since 1.8)
        /// </summary>
        /// <remarks>
        /// Allows creating models for custom meta-data that can be later applied to elements.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Custom property type to be created</param>
        /// <returns>CustomPropertyType</returns>
        CustomPropertyType CreateCustomPropertyType (CustomPropertyType body);

        /// <summary>
        /// Create an element custom property definition (since 1.8)
        /// </summary>
        /// <remarks>
        /// Allows creating models for custom meta-data that can be later applied to elements.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Custom property type to be created</param>
        /// <returns>ApiResponse of CustomPropertyType</returns>
        ApiResponse<CustomPropertyType> CreateCustomPropertyTypeWithHttpInfo (CustomPropertyType body);
        /// <summary>
        /// Delete a custom property type (since 1.8)
        /// </summary>
        /// <remarks>
        /// Delete an existing element custom property type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkCustomPropertyTypeId">Removes an element custom property type, and the value assignments to all elements</param>
        /// <returns></returns>
        void DeleteCustomPropertyType (string rkCustomPropertyTypeId);

        /// <summary>
        /// Delete a custom property type (since 1.8)
        /// </summary>
        /// <remarks>
        /// Delete an existing element custom property type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkCustomPropertyTypeId">Removes an element custom property type, and the value assignments to all elements</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCustomPropertyTypeWithHttpInfo (string rkCustomPropertyTypeId);
        /// <summary>
        /// Delete an element (since 1.11)
        /// </summary>
        /// <remarks>
        /// Removes an element and all of the versions of that element
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkElementId">Id of the element</param>
        /// <returns></returns>
        void DeleteElement (string rkElementId);

        /// <summary>
        /// Delete an element (since 1.11)
        /// </summary>
        /// <remarks>
        /// Removes an element and all of the versions of that element
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkElementId">Id of the element</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteElementWithHttpInfo (string rkElementId);
        /// <summary>
        /// Delete a custom property value from an element (since 1.9)
        /// </summary>
        /// <remarks>
        /// Removes the custom property assignment from the element. If the custom property type is configured to inherit default values, then the default for that custom property type will become active on the element. Inherited custom property values cannot be deleted and attempts to do so will result in a 404.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkElementId">Id of element</param>
        /// <param name="propertyName">Name of the element custom property type to unassign from the element.</param>
        /// <returns></returns>
        void DeleteElementCustomProperty (string rkElementId, string propertyName);

        /// <summary>
        /// Delete a custom property value from an element (since 1.9)
        /// </summary>
        /// <remarks>
        /// Removes the custom property assignment from the element. If the custom property type is configured to inherit default values, then the default for that custom property type will become active on the element. Inherited custom property values cannot be deleted and attempts to do so will result in a 404.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkElementId">Id of element</param>
        /// <param name="propertyName">Name of the element custom property type to unassign from the element.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteElementCustomPropertyWithHttpInfo (string rkElementId, string propertyName);
        /// <summary>
        /// Get custom property values for an element (since 1.8)
        /// </summary>
        /// <remarks>
        /// Return the map of custom property names and their assigned value, either assigned directly to an element, or inherited by default.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkElementId">ID of element to fetch</param>
        /// <returns>CustomProperties</returns>
        CustomProperties GetCustomProperties (string rkElementId);

        /// <summary>
        /// Get custom property values for an element (since 1.8)
        /// </summary>
        /// <remarks>
        /// Return the map of custom property names and their assigned value, either assigned directly to an element, or inherited by default.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkElementId">ID of element to fetch</param>
        /// <returns>ApiResponse of CustomProperties</returns>
        ApiResponse<CustomProperties> GetCustomPropertiesWithHttpInfo (string rkElementId);
        /// <summary>
        /// Get a custom property type (since 1.8)
        /// </summary>
        /// <remarks>
        /// Returns the details of a custom property type.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkCustomPropertyTypeId">Id of custom property type to fetch</param>
        /// <returns>CustomPropertyType</returns>
        CustomPropertyType GetCustomPropertyTypeById (string rkCustomPropertyTypeId);

        /// <summary>
        /// Get a custom property type (since 1.8)
        /// </summary>
        /// <remarks>
        /// Returns the details of a custom property type.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkCustomPropertyTypeId">Id of custom property type to fetch</param>
        /// <returns>ApiResponse of CustomPropertyType</returns>
        ApiResponse<CustomPropertyType> GetCustomPropertyTypeByIdWithHttpInfo (string rkCustomPropertyTypeId);
        /// <summary>
        /// Search custom property types (since 1.8)
        /// </summary>
        /// <remarks>
        /// Returns all custom property type definitions that can be applied to element, or those that meet the filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">IDs of custom property types to fetch. (optional)</param>
        /// <param name="type">Types of custom property types to fetch. (optional)</param>
        /// <param name="name">Names of custom property types to fetch. (optional)</param>
        /// <param name="description">Descriptions of custom property types to fetch. (optional)</param>
        /// <param name="subDescription">Substring matching for description. (optional)</param>
        /// <param name="inheritDefault">Inherit default condition of custom property types to fetch. (optional)</param>
        /// <param name="defaultValue">Default values of custom property types to fetch. (optional)</param>
        /// <param name="minValue">Min values of custom property types to fetch. (optional)</param>
        /// <param name="maxValue">Max values of custom property types to fetch. (optional)</param>
        /// <param name="availableValues">Available values of custom property types to fetch. (optional)</param>
        /// <param name="maxCharacters">Max characters conditions of custom property types to fetch. (optional)</param>
        /// <param name="allowMultilineValues">Allow multiline values condition of custom property types to fetch. (optional)</param>
        /// <param name="textEditorWidth">Text editor width conditions of custom property types to fetch. (optional)</param>
        /// <returns>List&lt;CustomPropertyType&gt;</returns>
        List<CustomPropertyType> GetCustomPropertyTypes (List<string> id = null, List<string> type = null, List<string> name = null, List<string> description = null, List<string> subDescription = null, bool? inheritDefault = null, List<string> defaultValue = null, List<string> minValue = null, List<string> maxValue = null, List<string> availableValues = null, List<string> maxCharacters = null, bool? allowMultilineValues = null, List<string> textEditorWidth = null);

        /// <summary>
        /// Search custom property types (since 1.8)
        /// </summary>
        /// <remarks>
        /// Returns all custom property type definitions that can be applied to element, or those that meet the filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">IDs of custom property types to fetch. (optional)</param>
        /// <param name="type">Types of custom property types to fetch. (optional)</param>
        /// <param name="name">Names of custom property types to fetch. (optional)</param>
        /// <param name="description">Descriptions of custom property types to fetch. (optional)</param>
        /// <param name="subDescription">Substring matching for description. (optional)</param>
        /// <param name="inheritDefault">Inherit default condition of custom property types to fetch. (optional)</param>
        /// <param name="defaultValue">Default values of custom property types to fetch. (optional)</param>
        /// <param name="minValue">Min values of custom property types to fetch. (optional)</param>
        /// <param name="maxValue">Max values of custom property types to fetch. (optional)</param>
        /// <param name="availableValues">Available values of custom property types to fetch. (optional)</param>
        /// <param name="maxCharacters">Max characters conditions of custom property types to fetch. (optional)</param>
        /// <param name="allowMultilineValues">Allow multiline values condition of custom property types to fetch. (optional)</param>
        /// <param name="textEditorWidth">Text editor width conditions of custom property types to fetch. (optional)</param>
        /// <returns>ApiResponse of List&lt;CustomPropertyType&gt;</returns>
        ApiResponse<List<CustomPropertyType>> GetCustomPropertyTypesWithHttpInfo (List<string> id = null, List<string> type = null, List<string> name = null, List<string> description = null, List<string> subDescription = null, bool? inheritDefault = null, List<string> defaultValue = null, List<string> minValue = null, List<string> maxValue = null, List<string> availableValues = null, List<string> maxCharacters = null, bool? allowMultilineValues = null, List<string> textEditorWidth = null);
        /// <summary>
        /// Get elements (since 1.8)
        /// </summary>
        /// <remarks>
        /// Returns a list of all elements or those that match the provided criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="id">Id of the element (optional)</param>
        /// <param name="name">Name of the element (optional)</param>
        /// <param name="nodeId">Id of the node for this element (optional)</param>
        /// <param name="ruleId">Id of the rule for this element (optional)</param>
        /// <param name="previousId">When paging, this should be the last element id returned by the previous page. (optional)</param>
        /// <param name="pageStart"> (optional)</param>
        /// <returns>List&lt;Element&gt;</returns>
        List<Element> GetElements (string pageLimit = null, List<string> id = null, List<string> name = null, List<string> nodeId = null, List<string> ruleId = null, string previousId = null, string pageStart = null);

        /// <summary>
        /// Get elements (since 1.8)
        /// </summary>
        /// <remarks>
        /// Returns a list of all elements or those that match the provided criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="id">Id of the element (optional)</param>
        /// <param name="name">Name of the element (optional)</param>
        /// <param name="nodeId">Id of the node for this element (optional)</param>
        /// <param name="ruleId">Id of the rule for this element (optional)</param>
        /// <param name="previousId">When paging, this should be the last element id returned by the previous page. (optional)</param>
        /// <param name="pageStart"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Element&gt;</returns>
        ApiResponse<List<Element>> GetElementsWithHttpInfo (string pageLimit = null, List<string> id = null, List<string> name = null, List<string> nodeId = null, List<string> ruleId = null, string previousId = null, string pageStart = null);
        /// <summary>
        /// Set a custom property value for an element (since 1.8)
        /// </summary>
        /// <remarks>
        /// Assign a custom property value to an element. The value must meet the requirements of the specific custom property type. If a the custom property type is already assigned to the element, this will overwrite the existing value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkElementId">Id of the element.</param>
        /// <param name="propertyName">Name of the element custom property type to assign to the element.</param>
        /// <param name="body">Value to assign to the custom property of the element.</param>
        /// <returns></returns>
        void SetElementCustomProperty (string rkElementId, string propertyName, PropertyValue body);

        /// <summary>
        /// Set a custom property value for an element (since 1.8)
        /// </summary>
        /// <remarks>
        /// Assign a custom property value to an element. The value must meet the requirements of the specific custom property type. If a the custom property type is already assigned to the element, this will overwrite the existing value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkElementId">Id of the element.</param>
        /// <param name="propertyName">Name of the element custom property type to assign to the element.</param>
        /// <param name="body">Value to assign to the custom property of the element.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetElementCustomPropertyWithHttpInfo (string rkElementId, string propertyName, PropertyValue body);
        /// <summary>
        /// Modifies an existing element custom property type (since 1.8)
        /// </summary>
        /// <remarks>
        /// Modifies an element custom property type to update the submitted fields with new values. The &#39;id&#39; and &#39;type&#39; fields can not be updated.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Custom property type to be updated</param>
        /// <param name="rkCustomPropertyTypeId">Id of custom property type be updated</param>
        /// <returns>CustomPropertyType</returns>
        CustomPropertyType UpdateCustomPropertyType (CustomPropertyType body, string rkCustomPropertyTypeId);

        /// <summary>
        /// Modifies an existing element custom property type (since 1.8)
        /// </summary>
        /// <remarks>
        /// Modifies an element custom property type to update the submitted fields with new values. The &#39;id&#39; and &#39;type&#39; fields can not be updated.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Custom property type to be updated</param>
        /// <param name="rkCustomPropertyTypeId">Id of custom property type be updated</param>
        /// <returns>ApiResponse of CustomPropertyType</returns>
        ApiResponse<CustomPropertyType> UpdateCustomPropertyTypeWithHttpInfo (CustomPropertyType body, string rkCustomPropertyTypeId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an element custom property definition (since 1.8)
        /// </summary>
        /// <remarks>
        /// Allows creating models for custom meta-data that can be later applied to elements.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Custom property type to be created</param>
        /// <returns>Task of CustomPropertyType</returns>
        System.Threading.Tasks.Task<CustomPropertyType> CreateCustomPropertyTypeAsync (CustomPropertyType body);

        /// <summary>
        /// Create an element custom property definition (since 1.8)
        /// </summary>
        /// <remarks>
        /// Allows creating models for custom meta-data that can be later applied to elements.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Custom property type to be created</param>
        /// <returns>Task of ApiResponse (CustomPropertyType)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomPropertyType>> CreateCustomPropertyTypeAsyncWithHttpInfo (CustomPropertyType body);
        /// <summary>
        /// Delete a custom property type (since 1.8)
        /// </summary>
        /// <remarks>
        /// Delete an existing element custom property type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkCustomPropertyTypeId">Removes an element custom property type, and the value assignments to all elements</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCustomPropertyTypeAsync (string rkCustomPropertyTypeId);

        /// <summary>
        /// Delete a custom property type (since 1.8)
        /// </summary>
        /// <remarks>
        /// Delete an existing element custom property type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkCustomPropertyTypeId">Removes an element custom property type, and the value assignments to all elements</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomPropertyTypeAsyncWithHttpInfo (string rkCustomPropertyTypeId);
        /// <summary>
        /// Delete an element (since 1.11)
        /// </summary>
        /// <remarks>
        /// Removes an element and all of the versions of that element
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkElementId">Id of the element</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteElementAsync (string rkElementId);

        /// <summary>
        /// Delete an element (since 1.11)
        /// </summary>
        /// <remarks>
        /// Removes an element and all of the versions of that element
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkElementId">Id of the element</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteElementAsyncWithHttpInfo (string rkElementId);
        /// <summary>
        /// Delete a custom property value from an element (since 1.9)
        /// </summary>
        /// <remarks>
        /// Removes the custom property assignment from the element. If the custom property type is configured to inherit default values, then the default for that custom property type will become active on the element. Inherited custom property values cannot be deleted and attempts to do so will result in a 404.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkElementId">Id of element</param>
        /// <param name="propertyName">Name of the element custom property type to unassign from the element.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteElementCustomPropertyAsync (string rkElementId, string propertyName);

        /// <summary>
        /// Delete a custom property value from an element (since 1.9)
        /// </summary>
        /// <remarks>
        /// Removes the custom property assignment from the element. If the custom property type is configured to inherit default values, then the default for that custom property type will become active on the element. Inherited custom property values cannot be deleted and attempts to do so will result in a 404.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkElementId">Id of element</param>
        /// <param name="propertyName">Name of the element custom property type to unassign from the element.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteElementCustomPropertyAsyncWithHttpInfo (string rkElementId, string propertyName);
        /// <summary>
        /// Get custom property values for an element (since 1.8)
        /// </summary>
        /// <remarks>
        /// Return the map of custom property names and their assigned value, either assigned directly to an element, or inherited by default.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkElementId">ID of element to fetch</param>
        /// <returns>Task of CustomProperties</returns>
        System.Threading.Tasks.Task<CustomProperties> GetCustomPropertiesAsync (string rkElementId);

        /// <summary>
        /// Get custom property values for an element (since 1.8)
        /// </summary>
        /// <remarks>
        /// Return the map of custom property names and their assigned value, either assigned directly to an element, or inherited by default.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkElementId">ID of element to fetch</param>
        /// <returns>Task of ApiResponse (CustomProperties)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomProperties>> GetCustomPropertiesAsyncWithHttpInfo (string rkElementId);
        /// <summary>
        /// Get a custom property type (since 1.8)
        /// </summary>
        /// <remarks>
        /// Returns the details of a custom property type.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkCustomPropertyTypeId">Id of custom property type to fetch</param>
        /// <returns>Task of CustomPropertyType</returns>
        System.Threading.Tasks.Task<CustomPropertyType> GetCustomPropertyTypeByIdAsync (string rkCustomPropertyTypeId);

        /// <summary>
        /// Get a custom property type (since 1.8)
        /// </summary>
        /// <remarks>
        /// Returns the details of a custom property type.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkCustomPropertyTypeId">Id of custom property type to fetch</param>
        /// <returns>Task of ApiResponse (CustomPropertyType)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomPropertyType>> GetCustomPropertyTypeByIdAsyncWithHttpInfo (string rkCustomPropertyTypeId);
        /// <summary>
        /// Search custom property types (since 1.8)
        /// </summary>
        /// <remarks>
        /// Returns all custom property type definitions that can be applied to element, or those that meet the filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">IDs of custom property types to fetch. (optional)</param>
        /// <param name="type">Types of custom property types to fetch. (optional)</param>
        /// <param name="name">Names of custom property types to fetch. (optional)</param>
        /// <param name="description">Descriptions of custom property types to fetch. (optional)</param>
        /// <param name="subDescription">Substring matching for description. (optional)</param>
        /// <param name="inheritDefault">Inherit default condition of custom property types to fetch. (optional)</param>
        /// <param name="defaultValue">Default values of custom property types to fetch. (optional)</param>
        /// <param name="minValue">Min values of custom property types to fetch. (optional)</param>
        /// <param name="maxValue">Max values of custom property types to fetch. (optional)</param>
        /// <param name="availableValues">Available values of custom property types to fetch. (optional)</param>
        /// <param name="maxCharacters">Max characters conditions of custom property types to fetch. (optional)</param>
        /// <param name="allowMultilineValues">Allow multiline values condition of custom property types to fetch. (optional)</param>
        /// <param name="textEditorWidth">Text editor width conditions of custom property types to fetch. (optional)</param>
        /// <returns>Task of List&lt;CustomPropertyType&gt;</returns>
        System.Threading.Tasks.Task<List<CustomPropertyType>> GetCustomPropertyTypesAsync (List<string> id = null, List<string> type = null, List<string> name = null, List<string> description = null, List<string> subDescription = null, bool? inheritDefault = null, List<string> defaultValue = null, List<string> minValue = null, List<string> maxValue = null, List<string> availableValues = null, List<string> maxCharacters = null, bool? allowMultilineValues = null, List<string> textEditorWidth = null);

        /// <summary>
        /// Search custom property types (since 1.8)
        /// </summary>
        /// <remarks>
        /// Returns all custom property type definitions that can be applied to element, or those that meet the filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">IDs of custom property types to fetch. (optional)</param>
        /// <param name="type">Types of custom property types to fetch. (optional)</param>
        /// <param name="name">Names of custom property types to fetch. (optional)</param>
        /// <param name="description">Descriptions of custom property types to fetch. (optional)</param>
        /// <param name="subDescription">Substring matching for description. (optional)</param>
        /// <param name="inheritDefault">Inherit default condition of custom property types to fetch. (optional)</param>
        /// <param name="defaultValue">Default values of custom property types to fetch. (optional)</param>
        /// <param name="minValue">Min values of custom property types to fetch. (optional)</param>
        /// <param name="maxValue">Max values of custom property types to fetch. (optional)</param>
        /// <param name="availableValues">Available values of custom property types to fetch. (optional)</param>
        /// <param name="maxCharacters">Max characters conditions of custom property types to fetch. (optional)</param>
        /// <param name="allowMultilineValues">Allow multiline values condition of custom property types to fetch. (optional)</param>
        /// <param name="textEditorWidth">Text editor width conditions of custom property types to fetch. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CustomPropertyType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CustomPropertyType>>> GetCustomPropertyTypesAsyncWithHttpInfo (List<string> id = null, List<string> type = null, List<string> name = null, List<string> description = null, List<string> subDescription = null, bool? inheritDefault = null, List<string> defaultValue = null, List<string> minValue = null, List<string> maxValue = null, List<string> availableValues = null, List<string> maxCharacters = null, bool? allowMultilineValues = null, List<string> textEditorWidth = null);
        /// <summary>
        /// Get elements (since 1.8)
        /// </summary>
        /// <remarks>
        /// Returns a list of all elements or those that match the provided criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="id">Id of the element (optional)</param>
        /// <param name="name">Name of the element (optional)</param>
        /// <param name="nodeId">Id of the node for this element (optional)</param>
        /// <param name="ruleId">Id of the rule for this element (optional)</param>
        /// <param name="previousId">When paging, this should be the last element id returned by the previous page. (optional)</param>
        /// <param name="pageStart"> (optional)</param>
        /// <returns>Task of List&lt;Element&gt;</returns>
        System.Threading.Tasks.Task<List<Element>> GetElementsAsync (string pageLimit = null, List<string> id = null, List<string> name = null, List<string> nodeId = null, List<string> ruleId = null, string previousId = null, string pageStart = null);

        /// <summary>
        /// Get elements (since 1.8)
        /// </summary>
        /// <remarks>
        /// Returns a list of all elements or those that match the provided criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="id">Id of the element (optional)</param>
        /// <param name="name">Name of the element (optional)</param>
        /// <param name="nodeId">Id of the node for this element (optional)</param>
        /// <param name="ruleId">Id of the rule for this element (optional)</param>
        /// <param name="previousId">When paging, this should be the last element id returned by the previous page. (optional)</param>
        /// <param name="pageStart"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Element&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Element>>> GetElementsAsyncWithHttpInfo (string pageLimit = null, List<string> id = null, List<string> name = null, List<string> nodeId = null, List<string> ruleId = null, string previousId = null, string pageStart = null);
        /// <summary>
        /// Set a custom property value for an element (since 1.8)
        /// </summary>
        /// <remarks>
        /// Assign a custom property value to an element. The value must meet the requirements of the specific custom property type. If a the custom property type is already assigned to the element, this will overwrite the existing value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkElementId">Id of the element.</param>
        /// <param name="propertyName">Name of the element custom property type to assign to the element.</param>
        /// <param name="body">Value to assign to the custom property of the element.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetElementCustomPropertyAsync (string rkElementId, string propertyName, PropertyValue body);

        /// <summary>
        /// Set a custom property value for an element (since 1.8)
        /// </summary>
        /// <remarks>
        /// Assign a custom property value to an element. The value must meet the requirements of the specific custom property type. If a the custom property type is already assigned to the element, this will overwrite the existing value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkElementId">Id of the element.</param>
        /// <param name="propertyName">Name of the element custom property type to assign to the element.</param>
        /// <param name="body">Value to assign to the custom property of the element.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetElementCustomPropertyAsyncWithHttpInfo (string rkElementId, string propertyName, PropertyValue body);
        /// <summary>
        /// Modifies an existing element custom property type (since 1.8)
        /// </summary>
        /// <remarks>
        /// Modifies an element custom property type to update the submitted fields with new values. The &#39;id&#39; and &#39;type&#39; fields can not be updated.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Custom property type to be updated</param>
        /// <param name="rkCustomPropertyTypeId">Id of custom property type be updated</param>
        /// <returns>Task of CustomPropertyType</returns>
        System.Threading.Tasks.Task<CustomPropertyType> UpdateCustomPropertyTypeAsync (CustomPropertyType body, string rkCustomPropertyTypeId);

        /// <summary>
        /// Modifies an existing element custom property type (since 1.8)
        /// </summary>
        /// <remarks>
        /// Modifies an element custom property type to update the submitted fields with new values. The &#39;id&#39; and &#39;type&#39; fields can not be updated.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Custom property type to be updated</param>
        /// <param name="rkCustomPropertyTypeId">Id of custom property type be updated</param>
        /// <returns>Task of ApiResponse (CustomPropertyType)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomPropertyType>> UpdateCustomPropertyTypeAsyncWithHttpInfo (CustomPropertyType body, string rkCustomPropertyTypeId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ElementsApi : IElementsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ElementsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ElementsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ElementsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ElementsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create an element custom property definition (since 1.8) Allows creating models for custom meta-data that can be later applied to elements.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Custom property type to be created</param>
        /// <returns>CustomPropertyType</returns>
        public CustomPropertyType CreateCustomPropertyType (CustomPropertyType body)
        {
             ApiResponse<CustomPropertyType> localVarResponse = CreateCustomPropertyTypeWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an element custom property definition (since 1.8) Allows creating models for custom meta-data that can be later applied to elements.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Custom property type to be created</param>
        /// <returns>ApiResponse of CustomPropertyType</returns>
        public ApiResponse< CustomPropertyType > CreateCustomPropertyTypeWithHttpInfo (CustomPropertyType body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ElementsApi->CreateCustomPropertyType");

            var localVarPath = "/elements/customPropertyTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomPropertyType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomPropertyType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomPropertyType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomPropertyType)));
        }

        /// <summary>
        /// Create an element custom property definition (since 1.8) Allows creating models for custom meta-data that can be later applied to elements.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Custom property type to be created</param>
        /// <returns>Task of CustomPropertyType</returns>
        public async System.Threading.Tasks.Task<CustomPropertyType> CreateCustomPropertyTypeAsync (CustomPropertyType body)
        {
             ApiResponse<CustomPropertyType> localVarResponse = await CreateCustomPropertyTypeAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an element custom property definition (since 1.8) Allows creating models for custom meta-data that can be later applied to elements.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Custom property type to be created</param>
        /// <returns>Task of ApiResponse (CustomPropertyType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomPropertyType>> CreateCustomPropertyTypeAsyncWithHttpInfo (CustomPropertyType body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ElementsApi->CreateCustomPropertyType");

            var localVarPath = "/elements/customPropertyTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomPropertyType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomPropertyType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomPropertyType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomPropertyType)));
        }

        /// <summary>
        /// Delete a custom property type (since 1.8) Delete an existing element custom property type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkCustomPropertyTypeId">Removes an element custom property type, and the value assignments to all elements</param>
        /// <returns></returns>
        public void DeleteCustomPropertyType (string rkCustomPropertyTypeId)
        {
             DeleteCustomPropertyTypeWithHttpInfo(rkCustomPropertyTypeId);
        }

        /// <summary>
        /// Delete a custom property type (since 1.8) Delete an existing element custom property type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkCustomPropertyTypeId">Removes an element custom property type, and the value assignments to all elements</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCustomPropertyTypeWithHttpInfo (string rkCustomPropertyTypeId)
        {
            // verify the required parameter 'rkCustomPropertyTypeId' is set
            if (rkCustomPropertyTypeId == null)
                throw new ApiException(400, "Missing required parameter 'rkCustomPropertyTypeId' when calling ElementsApi->DeleteCustomPropertyType");

            var localVarPath = "/elements/customPropertyTypes/{rkCustomPropertyTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkCustomPropertyTypeId != null) localVarPathParams.Add("rkCustomPropertyTypeId", this.Configuration.ApiClient.ParameterToString(rkCustomPropertyTypeId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomPropertyType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a custom property type (since 1.8) Delete an existing element custom property type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkCustomPropertyTypeId">Removes an element custom property type, and the value assignments to all elements</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCustomPropertyTypeAsync (string rkCustomPropertyTypeId)
        {
             await DeleteCustomPropertyTypeAsyncWithHttpInfo(rkCustomPropertyTypeId);

        }

        /// <summary>
        /// Delete a custom property type (since 1.8) Delete an existing element custom property type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkCustomPropertyTypeId">Removes an element custom property type, and the value assignments to all elements</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomPropertyTypeAsyncWithHttpInfo (string rkCustomPropertyTypeId)
        {
            // verify the required parameter 'rkCustomPropertyTypeId' is set
            if (rkCustomPropertyTypeId == null)
                throw new ApiException(400, "Missing required parameter 'rkCustomPropertyTypeId' when calling ElementsApi->DeleteCustomPropertyType");

            var localVarPath = "/elements/customPropertyTypes/{rkCustomPropertyTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkCustomPropertyTypeId != null) localVarPathParams.Add("rkCustomPropertyTypeId", this.Configuration.ApiClient.ParameterToString(rkCustomPropertyTypeId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomPropertyType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an element (since 1.11) Removes an element and all of the versions of that element
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkElementId">Id of the element</param>
        /// <returns></returns>
        public void DeleteElement (string rkElementId)
        {
             DeleteElementWithHttpInfo(rkElementId);
        }

        /// <summary>
        /// Delete an element (since 1.11) Removes an element and all of the versions of that element
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkElementId">Id of the element</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteElementWithHttpInfo (string rkElementId)
        {
            // verify the required parameter 'rkElementId' is set
            if (rkElementId == null)
                throw new ApiException(400, "Missing required parameter 'rkElementId' when calling ElementsApi->DeleteElement");

            var localVarPath = "/elements/{rkElementId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkElementId != null) localVarPathParams.Add("rkElementId", this.Configuration.ApiClient.ParameterToString(rkElementId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteElement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an element (since 1.11) Removes an element and all of the versions of that element
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkElementId">Id of the element</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteElementAsync (string rkElementId)
        {
             await DeleteElementAsyncWithHttpInfo(rkElementId);

        }

        /// <summary>
        /// Delete an element (since 1.11) Removes an element and all of the versions of that element
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkElementId">Id of the element</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteElementAsyncWithHttpInfo (string rkElementId)
        {
            // verify the required parameter 'rkElementId' is set
            if (rkElementId == null)
                throw new ApiException(400, "Missing required parameter 'rkElementId' when calling ElementsApi->DeleteElement");

            var localVarPath = "/elements/{rkElementId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkElementId != null) localVarPathParams.Add("rkElementId", this.Configuration.ApiClient.ParameterToString(rkElementId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteElement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a custom property value from an element (since 1.9) Removes the custom property assignment from the element. If the custom property type is configured to inherit default values, then the default for that custom property type will become active on the element. Inherited custom property values cannot be deleted and attempts to do so will result in a 404.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkElementId">Id of element</param>
        /// <param name="propertyName">Name of the element custom property type to unassign from the element.</param>
        /// <returns></returns>
        public void DeleteElementCustomProperty (string rkElementId, string propertyName)
        {
             DeleteElementCustomPropertyWithHttpInfo(rkElementId, propertyName);
        }

        /// <summary>
        /// Delete a custom property value from an element (since 1.9) Removes the custom property assignment from the element. If the custom property type is configured to inherit default values, then the default for that custom property type will become active on the element. Inherited custom property values cannot be deleted and attempts to do so will result in a 404.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkElementId">Id of element</param>
        /// <param name="propertyName">Name of the element custom property type to unassign from the element.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteElementCustomPropertyWithHttpInfo (string rkElementId, string propertyName)
        {
            // verify the required parameter 'rkElementId' is set
            if (rkElementId == null)
                throw new ApiException(400, "Missing required parameter 'rkElementId' when calling ElementsApi->DeleteElementCustomProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling ElementsApi->DeleteElementCustomProperty");

            var localVarPath = "/elements/{rkElementId}/customProperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkElementId != null) localVarPathParams.Add("rkElementId", this.Configuration.ApiClient.ParameterToString(rkElementId)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", this.Configuration.ApiClient.ParameterToString(propertyName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteElementCustomProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a custom property value from an element (since 1.9) Removes the custom property assignment from the element. If the custom property type is configured to inherit default values, then the default for that custom property type will become active on the element. Inherited custom property values cannot be deleted and attempts to do so will result in a 404.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkElementId">Id of element</param>
        /// <param name="propertyName">Name of the element custom property type to unassign from the element.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteElementCustomPropertyAsync (string rkElementId, string propertyName)
        {
             await DeleteElementCustomPropertyAsyncWithHttpInfo(rkElementId, propertyName);

        }

        /// <summary>
        /// Delete a custom property value from an element (since 1.9) Removes the custom property assignment from the element. If the custom property type is configured to inherit default values, then the default for that custom property type will become active on the element. Inherited custom property values cannot be deleted and attempts to do so will result in a 404.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkElementId">Id of element</param>
        /// <param name="propertyName">Name of the element custom property type to unassign from the element.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteElementCustomPropertyAsyncWithHttpInfo (string rkElementId, string propertyName)
        {
            // verify the required parameter 'rkElementId' is set
            if (rkElementId == null)
                throw new ApiException(400, "Missing required parameter 'rkElementId' when calling ElementsApi->DeleteElementCustomProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling ElementsApi->DeleteElementCustomProperty");

            var localVarPath = "/elements/{rkElementId}/customProperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkElementId != null) localVarPathParams.Add("rkElementId", this.Configuration.ApiClient.ParameterToString(rkElementId)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", this.Configuration.ApiClient.ParameterToString(propertyName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteElementCustomProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get custom property values for an element (since 1.8) Return the map of custom property names and their assigned value, either assigned directly to an element, or inherited by default.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkElementId">ID of element to fetch</param>
        /// <returns>CustomProperties</returns>
        public CustomProperties GetCustomProperties (string rkElementId)
        {
             ApiResponse<CustomProperties> localVarResponse = GetCustomPropertiesWithHttpInfo(rkElementId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get custom property values for an element (since 1.8) Return the map of custom property names and their assigned value, either assigned directly to an element, or inherited by default.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkElementId">ID of element to fetch</param>
        /// <returns>ApiResponse of CustomProperties</returns>
        public ApiResponse< CustomProperties > GetCustomPropertiesWithHttpInfo (string rkElementId)
        {
            // verify the required parameter 'rkElementId' is set
            if (rkElementId == null)
                throw new ApiException(400, "Missing required parameter 'rkElementId' when calling ElementsApi->GetCustomProperties");

            var localVarPath = "/elements/{rkElementId}/customProperties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkElementId != null) localVarPathParams.Add("rkElementId", this.Configuration.ApiClient.ParameterToString(rkElementId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomProperties>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomProperties) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomProperties)));
        }

        /// <summary>
        /// Get custom property values for an element (since 1.8) Return the map of custom property names and their assigned value, either assigned directly to an element, or inherited by default.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkElementId">ID of element to fetch</param>
        /// <returns>Task of CustomProperties</returns>
        public async System.Threading.Tasks.Task<CustomProperties> GetCustomPropertiesAsync (string rkElementId)
        {
             ApiResponse<CustomProperties> localVarResponse = await GetCustomPropertiesAsyncWithHttpInfo(rkElementId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get custom property values for an element (since 1.8) Return the map of custom property names and their assigned value, either assigned directly to an element, or inherited by default.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkElementId">ID of element to fetch</param>
        /// <returns>Task of ApiResponse (CustomProperties)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomProperties>> GetCustomPropertiesAsyncWithHttpInfo (string rkElementId)
        {
            // verify the required parameter 'rkElementId' is set
            if (rkElementId == null)
                throw new ApiException(400, "Missing required parameter 'rkElementId' when calling ElementsApi->GetCustomProperties");

            var localVarPath = "/elements/{rkElementId}/customProperties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkElementId != null) localVarPathParams.Add("rkElementId", this.Configuration.ApiClient.ParameterToString(rkElementId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomProperties>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomProperties) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomProperties)));
        }

        /// <summary>
        /// Get a custom property type (since 1.8) Returns the details of a custom property type.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkCustomPropertyTypeId">Id of custom property type to fetch</param>
        /// <returns>CustomPropertyType</returns>
        public CustomPropertyType GetCustomPropertyTypeById (string rkCustomPropertyTypeId)
        {
             ApiResponse<CustomPropertyType> localVarResponse = GetCustomPropertyTypeByIdWithHttpInfo(rkCustomPropertyTypeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a custom property type (since 1.8) Returns the details of a custom property type.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkCustomPropertyTypeId">Id of custom property type to fetch</param>
        /// <returns>ApiResponse of CustomPropertyType</returns>
        public ApiResponse< CustomPropertyType > GetCustomPropertyTypeByIdWithHttpInfo (string rkCustomPropertyTypeId)
        {
            // verify the required parameter 'rkCustomPropertyTypeId' is set
            if (rkCustomPropertyTypeId == null)
                throw new ApiException(400, "Missing required parameter 'rkCustomPropertyTypeId' when calling ElementsApi->GetCustomPropertyTypeById");

            var localVarPath = "/elements/customPropertyTypes/{rkCustomPropertyTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkCustomPropertyTypeId != null) localVarPathParams.Add("rkCustomPropertyTypeId", this.Configuration.ApiClient.ParameterToString(rkCustomPropertyTypeId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomPropertyTypeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomPropertyType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomPropertyType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomPropertyType)));
        }

        /// <summary>
        /// Get a custom property type (since 1.8) Returns the details of a custom property type.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkCustomPropertyTypeId">Id of custom property type to fetch</param>
        /// <returns>Task of CustomPropertyType</returns>
        public async System.Threading.Tasks.Task<CustomPropertyType> GetCustomPropertyTypeByIdAsync (string rkCustomPropertyTypeId)
        {
             ApiResponse<CustomPropertyType> localVarResponse = await GetCustomPropertyTypeByIdAsyncWithHttpInfo(rkCustomPropertyTypeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a custom property type (since 1.8) Returns the details of a custom property type.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkCustomPropertyTypeId">Id of custom property type to fetch</param>
        /// <returns>Task of ApiResponse (CustomPropertyType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomPropertyType>> GetCustomPropertyTypeByIdAsyncWithHttpInfo (string rkCustomPropertyTypeId)
        {
            // verify the required parameter 'rkCustomPropertyTypeId' is set
            if (rkCustomPropertyTypeId == null)
                throw new ApiException(400, "Missing required parameter 'rkCustomPropertyTypeId' when calling ElementsApi->GetCustomPropertyTypeById");

            var localVarPath = "/elements/customPropertyTypes/{rkCustomPropertyTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkCustomPropertyTypeId != null) localVarPathParams.Add("rkCustomPropertyTypeId", this.Configuration.ApiClient.ParameterToString(rkCustomPropertyTypeId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomPropertyTypeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomPropertyType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomPropertyType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomPropertyType)));
        }

        /// <summary>
        /// Search custom property types (since 1.8) Returns all custom property type definitions that can be applied to element, or those that meet the filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">IDs of custom property types to fetch. (optional)</param>
        /// <param name="type">Types of custom property types to fetch. (optional)</param>
        /// <param name="name">Names of custom property types to fetch. (optional)</param>
        /// <param name="description">Descriptions of custom property types to fetch. (optional)</param>
        /// <param name="subDescription">Substring matching for description. (optional)</param>
        /// <param name="inheritDefault">Inherit default condition of custom property types to fetch. (optional)</param>
        /// <param name="defaultValue">Default values of custom property types to fetch. (optional)</param>
        /// <param name="minValue">Min values of custom property types to fetch. (optional)</param>
        /// <param name="maxValue">Max values of custom property types to fetch. (optional)</param>
        /// <param name="availableValues">Available values of custom property types to fetch. (optional)</param>
        /// <param name="maxCharacters">Max characters conditions of custom property types to fetch. (optional)</param>
        /// <param name="allowMultilineValues">Allow multiline values condition of custom property types to fetch. (optional)</param>
        /// <param name="textEditorWidth">Text editor width conditions of custom property types to fetch. (optional)</param>
        /// <returns>List&lt;CustomPropertyType&gt;</returns>
        public List<CustomPropertyType> GetCustomPropertyTypes (List<string> id = null, List<string> type = null, List<string> name = null, List<string> description = null, List<string> subDescription = null, bool? inheritDefault = null, List<string> defaultValue = null, List<string> minValue = null, List<string> maxValue = null, List<string> availableValues = null, List<string> maxCharacters = null, bool? allowMultilineValues = null, List<string> textEditorWidth = null)
        {
             ApiResponse<List<CustomPropertyType>> localVarResponse = GetCustomPropertyTypesWithHttpInfo(id, type, name, description, subDescription, inheritDefault, defaultValue, minValue, maxValue, availableValues, maxCharacters, allowMultilineValues, textEditorWidth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search custom property types (since 1.8) Returns all custom property type definitions that can be applied to element, or those that meet the filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">IDs of custom property types to fetch. (optional)</param>
        /// <param name="type">Types of custom property types to fetch. (optional)</param>
        /// <param name="name">Names of custom property types to fetch. (optional)</param>
        /// <param name="description">Descriptions of custom property types to fetch. (optional)</param>
        /// <param name="subDescription">Substring matching for description. (optional)</param>
        /// <param name="inheritDefault">Inherit default condition of custom property types to fetch. (optional)</param>
        /// <param name="defaultValue">Default values of custom property types to fetch. (optional)</param>
        /// <param name="minValue">Min values of custom property types to fetch. (optional)</param>
        /// <param name="maxValue">Max values of custom property types to fetch. (optional)</param>
        /// <param name="availableValues">Available values of custom property types to fetch. (optional)</param>
        /// <param name="maxCharacters">Max characters conditions of custom property types to fetch. (optional)</param>
        /// <param name="allowMultilineValues">Allow multiline values condition of custom property types to fetch. (optional)</param>
        /// <param name="textEditorWidth">Text editor width conditions of custom property types to fetch. (optional)</param>
        /// <returns>ApiResponse of List&lt;CustomPropertyType&gt;</returns>
        public ApiResponse< List<CustomPropertyType> > GetCustomPropertyTypesWithHttpInfo (List<string> id = null, List<string> type = null, List<string> name = null, List<string> description = null, List<string> subDescription = null, bool? inheritDefault = null, List<string> defaultValue = null, List<string> minValue = null, List<string> maxValue = null, List<string> availableValues = null, List<string> maxCharacters = null, bool? allowMultilineValues = null, List<string> textEditorWidth = null)
        {

            var localVarPath = "/elements/customPropertyTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "description", description)); // query parameter
            if (subDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sub_description", subDescription)); // query parameter
            if (inheritDefault != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "inheritDefault", inheritDefault)); // query parameter
            if (defaultValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "defaultValue", defaultValue)); // query parameter
            if (minValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "minValue", minValue)); // query parameter
            if (maxValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "maxValue", maxValue)); // query parameter
            if (availableValues != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "availableValues", availableValues)); // query parameter
            if (maxCharacters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "maxCharacters", maxCharacters)); // query parameter
            if (allowMultilineValues != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allowMultilineValues", allowMultilineValues)); // query parameter
            if (textEditorWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "textEditorWidth", textEditorWidth)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomPropertyTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CustomPropertyType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CustomPropertyType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CustomPropertyType>)));
        }

        /// <summary>
        /// Search custom property types (since 1.8) Returns all custom property type definitions that can be applied to element, or those that meet the filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">IDs of custom property types to fetch. (optional)</param>
        /// <param name="type">Types of custom property types to fetch. (optional)</param>
        /// <param name="name">Names of custom property types to fetch. (optional)</param>
        /// <param name="description">Descriptions of custom property types to fetch. (optional)</param>
        /// <param name="subDescription">Substring matching for description. (optional)</param>
        /// <param name="inheritDefault">Inherit default condition of custom property types to fetch. (optional)</param>
        /// <param name="defaultValue">Default values of custom property types to fetch. (optional)</param>
        /// <param name="minValue">Min values of custom property types to fetch. (optional)</param>
        /// <param name="maxValue">Max values of custom property types to fetch. (optional)</param>
        /// <param name="availableValues">Available values of custom property types to fetch. (optional)</param>
        /// <param name="maxCharacters">Max characters conditions of custom property types to fetch. (optional)</param>
        /// <param name="allowMultilineValues">Allow multiline values condition of custom property types to fetch. (optional)</param>
        /// <param name="textEditorWidth">Text editor width conditions of custom property types to fetch. (optional)</param>
        /// <returns>Task of List&lt;CustomPropertyType&gt;</returns>
        public async System.Threading.Tasks.Task<List<CustomPropertyType>> GetCustomPropertyTypesAsync (List<string> id = null, List<string> type = null, List<string> name = null, List<string> description = null, List<string> subDescription = null, bool? inheritDefault = null, List<string> defaultValue = null, List<string> minValue = null, List<string> maxValue = null, List<string> availableValues = null, List<string> maxCharacters = null, bool? allowMultilineValues = null, List<string> textEditorWidth = null)
        {
             ApiResponse<List<CustomPropertyType>> localVarResponse = await GetCustomPropertyTypesAsyncWithHttpInfo(id, type, name, description, subDescription, inheritDefault, defaultValue, minValue, maxValue, availableValues, maxCharacters, allowMultilineValues, textEditorWidth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search custom property types (since 1.8) Returns all custom property type definitions that can be applied to element, or those that meet the filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">IDs of custom property types to fetch. (optional)</param>
        /// <param name="type">Types of custom property types to fetch. (optional)</param>
        /// <param name="name">Names of custom property types to fetch. (optional)</param>
        /// <param name="description">Descriptions of custom property types to fetch. (optional)</param>
        /// <param name="subDescription">Substring matching for description. (optional)</param>
        /// <param name="inheritDefault">Inherit default condition of custom property types to fetch. (optional)</param>
        /// <param name="defaultValue">Default values of custom property types to fetch. (optional)</param>
        /// <param name="minValue">Min values of custom property types to fetch. (optional)</param>
        /// <param name="maxValue">Max values of custom property types to fetch. (optional)</param>
        /// <param name="availableValues">Available values of custom property types to fetch. (optional)</param>
        /// <param name="maxCharacters">Max characters conditions of custom property types to fetch. (optional)</param>
        /// <param name="allowMultilineValues">Allow multiline values condition of custom property types to fetch. (optional)</param>
        /// <param name="textEditorWidth">Text editor width conditions of custom property types to fetch. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CustomPropertyType&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CustomPropertyType>>> GetCustomPropertyTypesAsyncWithHttpInfo (List<string> id = null, List<string> type = null, List<string> name = null, List<string> description = null, List<string> subDescription = null, bool? inheritDefault = null, List<string> defaultValue = null, List<string> minValue = null, List<string> maxValue = null, List<string> availableValues = null, List<string> maxCharacters = null, bool? allowMultilineValues = null, List<string> textEditorWidth = null)
        {

            var localVarPath = "/elements/customPropertyTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "description", description)); // query parameter
            if (subDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sub_description", subDescription)); // query parameter
            if (inheritDefault != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "inheritDefault", inheritDefault)); // query parameter
            if (defaultValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "defaultValue", defaultValue)); // query parameter
            if (minValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "minValue", minValue)); // query parameter
            if (maxValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "maxValue", maxValue)); // query parameter
            if (availableValues != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "availableValues", availableValues)); // query parameter
            if (maxCharacters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "maxCharacters", maxCharacters)); // query parameter
            if (allowMultilineValues != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allowMultilineValues", allowMultilineValues)); // query parameter
            if (textEditorWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "textEditorWidth", textEditorWidth)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomPropertyTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CustomPropertyType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CustomPropertyType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CustomPropertyType>)));
        }

        /// <summary>
        /// Get elements (since 1.8) Returns a list of all elements or those that match the provided criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="id">Id of the element (optional)</param>
        /// <param name="name">Name of the element (optional)</param>
        /// <param name="nodeId">Id of the node for this element (optional)</param>
        /// <param name="ruleId">Id of the rule for this element (optional)</param>
        /// <param name="previousId">When paging, this should be the last element id returned by the previous page. (optional)</param>
        /// <param name="pageStart"> (optional)</param>
        /// <returns>List&lt;Element&gt;</returns>
        public List<Element> GetElements (string pageLimit = null, List<string> id = null, List<string> name = null, List<string> nodeId = null, List<string> ruleId = null, string previousId = null, string pageStart = null)
        {
             ApiResponse<List<Element>> localVarResponse = GetElementsWithHttpInfo(pageLimit, id, name, nodeId, ruleId, previousId, pageStart);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get elements (since 1.8) Returns a list of all elements or those that match the provided criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="id">Id of the element (optional)</param>
        /// <param name="name">Name of the element (optional)</param>
        /// <param name="nodeId">Id of the node for this element (optional)</param>
        /// <param name="ruleId">Id of the rule for this element (optional)</param>
        /// <param name="previousId">When paging, this should be the last element id returned by the previous page. (optional)</param>
        /// <param name="pageStart"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Element&gt;</returns>
        public ApiResponse< List<Element> > GetElementsWithHttpInfo (string pageLimit = null, List<string> id = null, List<string> name = null, List<string> nodeId = null, List<string> ruleId = null, string previousId = null, string pageStart = null)
        {

            var localVarPath = "/elements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageLimit", pageLimit)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "nodeId", nodeId)); // query parameter
            if (ruleId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ruleId", ruleId)); // query parameter
            if (previousId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "previousId", previousId)); // query parameter
            if (pageStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageStart", pageStart)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetElements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Element>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Element>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Element>)));
        }

        /// <summary>
        /// Get elements (since 1.8) Returns a list of all elements or those that match the provided criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="id">Id of the element (optional)</param>
        /// <param name="name">Name of the element (optional)</param>
        /// <param name="nodeId">Id of the node for this element (optional)</param>
        /// <param name="ruleId">Id of the rule for this element (optional)</param>
        /// <param name="previousId">When paging, this should be the last element id returned by the previous page. (optional)</param>
        /// <param name="pageStart"> (optional)</param>
        /// <returns>Task of List&lt;Element&gt;</returns>
        public async System.Threading.Tasks.Task<List<Element>> GetElementsAsync (string pageLimit = null, List<string> id = null, List<string> name = null, List<string> nodeId = null, List<string> ruleId = null, string previousId = null, string pageStart = null)
        {
             ApiResponse<List<Element>> localVarResponse = await GetElementsAsyncWithHttpInfo(pageLimit, id, name, nodeId, ruleId, previousId, pageStart);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get elements (since 1.8) Returns a list of all elements or those that match the provided criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="id">Id of the element (optional)</param>
        /// <param name="name">Name of the element (optional)</param>
        /// <param name="nodeId">Id of the node for this element (optional)</param>
        /// <param name="ruleId">Id of the rule for this element (optional)</param>
        /// <param name="previousId">When paging, this should be the last element id returned by the previous page. (optional)</param>
        /// <param name="pageStart"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Element&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Element>>> GetElementsAsyncWithHttpInfo (string pageLimit = null, List<string> id = null, List<string> name = null, List<string> nodeId = null, List<string> ruleId = null, string previousId = null, string pageStart = null)
        {

            var localVarPath = "/elements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageLimit", pageLimit)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "nodeId", nodeId)); // query parameter
            if (ruleId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ruleId", ruleId)); // query parameter
            if (previousId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "previousId", previousId)); // query parameter
            if (pageStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageStart", pageStart)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetElements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Element>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Element>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Element>)));
        }

        /// <summary>
        /// Set a custom property value for an element (since 1.8) Assign a custom property value to an element. The value must meet the requirements of the specific custom property type. If a the custom property type is already assigned to the element, this will overwrite the existing value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkElementId">Id of the element.</param>
        /// <param name="propertyName">Name of the element custom property type to assign to the element.</param>
        /// <param name="body">Value to assign to the custom property of the element.</param>
        /// <returns></returns>
        public void SetElementCustomProperty (string rkElementId, string propertyName, PropertyValue body)
        {
             SetElementCustomPropertyWithHttpInfo(rkElementId, propertyName, body);
        }

        /// <summary>
        /// Set a custom property value for an element (since 1.8) Assign a custom property value to an element. The value must meet the requirements of the specific custom property type. If a the custom property type is already assigned to the element, this will overwrite the existing value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkElementId">Id of the element.</param>
        /// <param name="propertyName">Name of the element custom property type to assign to the element.</param>
        /// <param name="body">Value to assign to the custom property of the element.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetElementCustomPropertyWithHttpInfo (string rkElementId, string propertyName, PropertyValue body)
        {
            // verify the required parameter 'rkElementId' is set
            if (rkElementId == null)
                throw new ApiException(400, "Missing required parameter 'rkElementId' when calling ElementsApi->SetElementCustomProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling ElementsApi->SetElementCustomProperty");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ElementsApi->SetElementCustomProperty");

            var localVarPath = "/elements/{rkElementId}/customProperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkElementId != null) localVarPathParams.Add("rkElementId", this.Configuration.ApiClient.ParameterToString(rkElementId)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", this.Configuration.ApiClient.ParameterToString(propertyName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetElementCustomProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set a custom property value for an element (since 1.8) Assign a custom property value to an element. The value must meet the requirements of the specific custom property type. If a the custom property type is already assigned to the element, this will overwrite the existing value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkElementId">Id of the element.</param>
        /// <param name="propertyName">Name of the element custom property type to assign to the element.</param>
        /// <param name="body">Value to assign to the custom property of the element.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetElementCustomPropertyAsync (string rkElementId, string propertyName, PropertyValue body)
        {
             await SetElementCustomPropertyAsyncWithHttpInfo(rkElementId, propertyName, body);

        }

        /// <summary>
        /// Set a custom property value for an element (since 1.8) Assign a custom property value to an element. The value must meet the requirements of the specific custom property type. If a the custom property type is already assigned to the element, this will overwrite the existing value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkElementId">Id of the element.</param>
        /// <param name="propertyName">Name of the element custom property type to assign to the element.</param>
        /// <param name="body">Value to assign to the custom property of the element.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetElementCustomPropertyAsyncWithHttpInfo (string rkElementId, string propertyName, PropertyValue body)
        {
            // verify the required parameter 'rkElementId' is set
            if (rkElementId == null)
                throw new ApiException(400, "Missing required parameter 'rkElementId' when calling ElementsApi->SetElementCustomProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling ElementsApi->SetElementCustomProperty");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ElementsApi->SetElementCustomProperty");

            var localVarPath = "/elements/{rkElementId}/customProperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkElementId != null) localVarPathParams.Add("rkElementId", this.Configuration.ApiClient.ParameterToString(rkElementId)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", this.Configuration.ApiClient.ParameterToString(propertyName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetElementCustomProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Modifies an existing element custom property type (since 1.8) Modifies an element custom property type to update the submitted fields with new values. The &#39;id&#39; and &#39;type&#39; fields can not be updated.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Custom property type to be updated</param>
        /// <param name="rkCustomPropertyTypeId">Id of custom property type be updated</param>
        /// <returns>CustomPropertyType</returns>
        public CustomPropertyType UpdateCustomPropertyType (CustomPropertyType body, string rkCustomPropertyTypeId)
        {
             ApiResponse<CustomPropertyType> localVarResponse = UpdateCustomPropertyTypeWithHttpInfo(body, rkCustomPropertyTypeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modifies an existing element custom property type (since 1.8) Modifies an element custom property type to update the submitted fields with new values. The &#39;id&#39; and &#39;type&#39; fields can not be updated.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Custom property type to be updated</param>
        /// <param name="rkCustomPropertyTypeId">Id of custom property type be updated</param>
        /// <returns>ApiResponse of CustomPropertyType</returns>
        public ApiResponse< CustomPropertyType > UpdateCustomPropertyTypeWithHttpInfo (CustomPropertyType body, string rkCustomPropertyTypeId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ElementsApi->UpdateCustomPropertyType");
            // verify the required parameter 'rkCustomPropertyTypeId' is set
            if (rkCustomPropertyTypeId == null)
                throw new ApiException(400, "Missing required parameter 'rkCustomPropertyTypeId' when calling ElementsApi->UpdateCustomPropertyType");

            var localVarPath = "/elements/customPropertyTypes/{rkCustomPropertyTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkCustomPropertyTypeId != null) localVarPathParams.Add("rkCustomPropertyTypeId", this.Configuration.ApiClient.ParameterToString(rkCustomPropertyTypeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomPropertyType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomPropertyType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomPropertyType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomPropertyType)));
        }

        /// <summary>
        /// Modifies an existing element custom property type (since 1.8) Modifies an element custom property type to update the submitted fields with new values. The &#39;id&#39; and &#39;type&#39; fields can not be updated.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Custom property type to be updated</param>
        /// <param name="rkCustomPropertyTypeId">Id of custom property type be updated</param>
        /// <returns>Task of CustomPropertyType</returns>
        public async System.Threading.Tasks.Task<CustomPropertyType> UpdateCustomPropertyTypeAsync (CustomPropertyType body, string rkCustomPropertyTypeId)
        {
             ApiResponse<CustomPropertyType> localVarResponse = await UpdateCustomPropertyTypeAsyncWithHttpInfo(body, rkCustomPropertyTypeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modifies an existing element custom property type (since 1.8) Modifies an element custom property type to update the submitted fields with new values. The &#39;id&#39; and &#39;type&#39; fields can not be updated.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Custom property type to be updated</param>
        /// <param name="rkCustomPropertyTypeId">Id of custom property type be updated</param>
        /// <returns>Task of ApiResponse (CustomPropertyType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomPropertyType>> UpdateCustomPropertyTypeAsyncWithHttpInfo (CustomPropertyType body, string rkCustomPropertyTypeId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ElementsApi->UpdateCustomPropertyType");
            // verify the required parameter 'rkCustomPropertyTypeId' is set
            if (rkCustomPropertyTypeId == null)
                throw new ApiException(400, "Missing required parameter 'rkCustomPropertyTypeId' when calling ElementsApi->UpdateCustomPropertyType");

            var localVarPath = "/elements/customPropertyTypes/{rkCustomPropertyTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkCustomPropertyTypeId != null) localVarPathParams.Add("rkCustomPropertyTypeId", this.Configuration.ApiClient.ParameterToString(rkCustomPropertyTypeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomPropertyType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomPropertyType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomPropertyType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomPropertyType)));
        }

    }
}

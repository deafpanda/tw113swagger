/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.12.1.bmaster.r20170922182356-4e84151.b1741
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a custom node type (since 1.10)
        /// </summary>
        /// <remarks>
        /// Returns a newly created custom node type.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A custom node type with id, name and description</param>
        /// <returns>CustomNodeType</returns>
        CustomNodeType CreateCustomNodeTypes (CustomNodeType body);

        /// <summary>
        /// Create a custom node type (since 1.10)
        /// </summary>
        /// <remarks>
        /// Returns a newly created custom node type.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A custom node type with id, name and description</param>
        /// <returns>ApiResponse of CustomNodeType</returns>
        ApiResponse<CustomNodeType> CreateCustomNodeTypesWithHttpInfo (CustomNodeType body);
        /// <summary>
        /// Create a new global variable (since 1.11)
        /// </summary>
        /// <remarks>
        /// Creates a new global variable. The name must be unique. Variable type can either be &#39;text&#39; or &#39;password&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A global variable definition</param>
        /// <returns>GlobalVariable</returns>
        GlobalVariable CreateGlobalVariables (GlobalVariable body);

        /// <summary>
        /// Create a new global variable (since 1.11)
        /// </summary>
        /// <remarks>
        /// Creates a new global variable. The name must be unique. Variable type can either be &#39;text&#39; or &#39;password&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A global variable definition</param>
        /// <returns>ApiResponse of GlobalVariable</returns>
        ApiResponse<GlobalVariable> CreateGlobalVariablesWithHttpInfo (GlobalVariable body);
        /// <summary>
        /// Delete a custom node type (since 1.11)
        /// </summary>
        /// <remarks>
        /// Removes a custom node type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkCustomNodeTypeId">ID of custom node type to delete</param>
        /// <returns></returns>
        void DeleteCustomNodeType (string rkCustomNodeTypeId);

        /// <summary>
        /// Delete a custom node type (since 1.11)
        /// </summary>
        /// <remarks>
        /// Removes a custom node type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkCustomNodeTypeId">ID of custom node type to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCustomNodeTypeWithHttpInfo (string rkCustomNodeTypeId);
        /// <summary>
        /// Delete global variable (since 1.11)
        /// </summary>
        /// <remarks>
        /// Removes a global variable definition by name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the global variable to delete</param>
        /// <returns></returns>
        void DeleteGlobalVariable (string name);

        /// <summary>
        /// Delete global variable (since 1.11)
        /// </summary>
        /// <remarks>
        /// Removes a global variable definition by name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the global variable to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGlobalVariableWithHttpInfo (string name);
        /// <summary>
        /// Get the set of custom node types (since 1.10)
        /// </summary>
        /// <remarks>
        /// Returns a list of all the custom node types
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of custom node types to fetch (optional)</param>
        /// <param name="name">Name of custom node types to fetch (optional)</param>
        /// <param name="description">Description of custom node types to fetch (optional)</param>
        /// <param name="subDescription">Substring matching for description of custom node types to fetch (optional)</param>
        /// <returns>CustomNodeType</returns>
        CustomNodeType GetCustomNodeTypes (List<string> id = null, List<string> name = null, List<string> description = null, List<string> subDescription = null);

        /// <summary>
        /// Get the set of custom node types (since 1.10)
        /// </summary>
        /// <remarks>
        /// Returns a list of all the custom node types
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of custom node types to fetch (optional)</param>
        /// <param name="name">Name of custom node types to fetch (optional)</param>
        /// <param name="description">Description of custom node types to fetch (optional)</param>
        /// <param name="subDescription">Substring matching for description of custom node types to fetch (optional)</param>
        /// <returns>ApiResponse of CustomNodeType</returns>
        ApiResponse<CustomNodeType> GetCustomNodeTypesWithHttpInfo (List<string> id = null, List<string> name = null, List<string> description = null, List<string> subDescription = null);
        /// <summary>
        /// Get file system monitoring settings (since 1.9)
        /// </summary>
        /// <remarks>
        /// Returns the map of settings specific to file system server settings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>FileSystemSettings</returns>
        FileSystemSettings GetFileSystem ();

        /// <summary>
        /// Get file system monitoring settings (since 1.9)
        /// </summary>
        /// <remarks>
        /// Returns the map of settings specific to file system server settings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of FileSystemSettings</returns>
        ApiResponse<FileSystemSettings> GetFileSystemWithHttpInfo ();
        /// <summary>
        /// Get global variables (since 1.11)
        /// </summary>
        /// <remarks>
        /// List all global variables
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the variables (optional)</param>
        /// <param name="description">Description of the variables (optional)</param>
        /// <param name="subDescription">Substring matching for description of variables to fetch (optional)</param>
        /// <param name="type">Either &#39;text&#39; or &#39;password&#39; indicating display restrictions for the value (optional)</param>
        /// <returns>GlobalVariable</returns>
        GlobalVariable GetGlobalVariables (List<string> name = null, List<string> description = null, List<string> subDescription = null, string type = null);

        /// <summary>
        /// Get global variables (since 1.11)
        /// </summary>
        /// <remarks>
        /// List all global variables
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the variables (optional)</param>
        /// <param name="description">Description of the variables (optional)</param>
        /// <param name="subDescription">Substring matching for description of variables to fetch (optional)</param>
        /// <param name="type">Either &#39;text&#39; or &#39;password&#39; indicating display restrictions for the value (optional)</param>
        /// <returns>ApiResponse of GlobalVariable</returns>
        ApiResponse<GlobalVariable> GetGlobalVariablesWithHttpInfo (List<string> name = null, List<string> description = null, List<string> subDescription = null, string type = null);
        /// <summary>
        /// Get the list of licensed features (since 1.8)
        /// </summary>
        /// <remarks>
        /// Returns a list of all licensed feature in TE including the feature consumption.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;License&gt;</returns>
        List<License> GetLicenses ();

        /// <summary>
        /// Get the list of licensed features (since 1.8)
        /// </summary>
        /// <remarks>
        /// Returns a list of all licensed feature in TE including the feature consumption.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;License&gt;</returns>
        ApiResponse<List<License>> GetLicensesWithHttpInfo ();
        /// <summary>
        /// Get a list of all the SeverityRange definitions (since 1.6)
        /// </summary>
        /// <remarks>
        /// Returns a list of all the severity ranges and their attributes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SeverityRange&gt;</returns>
        List<SeverityRange> GetSeverityRange ();

        /// <summary>
        /// Get a list of all the SeverityRange definitions (since 1.6)
        /// </summary>
        /// <remarks>
        /// Returns a list of all the severity ranges and their attributes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SeverityRange&gt;</returns>
        ApiResponse<List<SeverityRange>> GetSeverityRangeWithHttpInfo ();
        /// <summary>
        /// Get JVM system properties
        /// </summary>
        /// <remarks>
        /// Returns a map of system properties currently active in the JVM
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> GetSystemProperties ();

        /// <summary>
        /// Get JVM system properties
        /// </summary>
        /// <remarks>
        /// Returns a map of system properties currently active in the JVM
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> GetSystemPropertiesWithHttpInfo ();
        /// <summary>
        /// Update a global variable (since 1.11)
        /// </summary>
        /// <remarks>
        /// Modifies an existing global variable based on the name
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the variable</param>
        /// <param name="body">A global variable definition</param>
        /// <returns>GlobalVariable</returns>
        GlobalVariable UpdateGlobalVariables (string name, GlobalVariable body);

        /// <summary>
        /// Update a global variable (since 1.11)
        /// </summary>
        /// <remarks>
        /// Modifies an existing global variable based on the name
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the variable</param>
        /// <param name="body">A global variable definition</param>
        /// <returns>ApiResponse of GlobalVariable</returns>
        ApiResponse<GlobalVariable> UpdateGlobalVariablesWithHttpInfo (string name, GlobalVariable body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a custom node type (since 1.10)
        /// </summary>
        /// <remarks>
        /// Returns a newly created custom node type.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A custom node type with id, name and description</param>
        /// <returns>Task of CustomNodeType</returns>
        System.Threading.Tasks.Task<CustomNodeType> CreateCustomNodeTypesAsync (CustomNodeType body);

        /// <summary>
        /// Create a custom node type (since 1.10)
        /// </summary>
        /// <remarks>
        /// Returns a newly created custom node type.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A custom node type with id, name and description</param>
        /// <returns>Task of ApiResponse (CustomNodeType)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomNodeType>> CreateCustomNodeTypesAsyncWithHttpInfo (CustomNodeType body);
        /// <summary>
        /// Create a new global variable (since 1.11)
        /// </summary>
        /// <remarks>
        /// Creates a new global variable. The name must be unique. Variable type can either be &#39;text&#39; or &#39;password&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A global variable definition</param>
        /// <returns>Task of GlobalVariable</returns>
        System.Threading.Tasks.Task<GlobalVariable> CreateGlobalVariablesAsync (GlobalVariable body);

        /// <summary>
        /// Create a new global variable (since 1.11)
        /// </summary>
        /// <remarks>
        /// Creates a new global variable. The name must be unique. Variable type can either be &#39;text&#39; or &#39;password&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A global variable definition</param>
        /// <returns>Task of ApiResponse (GlobalVariable)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlobalVariable>> CreateGlobalVariablesAsyncWithHttpInfo (GlobalVariable body);
        /// <summary>
        /// Delete a custom node type (since 1.11)
        /// </summary>
        /// <remarks>
        /// Removes a custom node type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkCustomNodeTypeId">ID of custom node type to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCustomNodeTypeAsync (string rkCustomNodeTypeId);

        /// <summary>
        /// Delete a custom node type (since 1.11)
        /// </summary>
        /// <remarks>
        /// Removes a custom node type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkCustomNodeTypeId">ID of custom node type to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomNodeTypeAsyncWithHttpInfo (string rkCustomNodeTypeId);
        /// <summary>
        /// Delete global variable (since 1.11)
        /// </summary>
        /// <remarks>
        /// Removes a global variable definition by name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the global variable to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGlobalVariableAsync (string name);

        /// <summary>
        /// Delete global variable (since 1.11)
        /// </summary>
        /// <remarks>
        /// Removes a global variable definition by name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the global variable to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGlobalVariableAsyncWithHttpInfo (string name);
        /// <summary>
        /// Get the set of custom node types (since 1.10)
        /// </summary>
        /// <remarks>
        /// Returns a list of all the custom node types
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of custom node types to fetch (optional)</param>
        /// <param name="name">Name of custom node types to fetch (optional)</param>
        /// <param name="description">Description of custom node types to fetch (optional)</param>
        /// <param name="subDescription">Substring matching for description of custom node types to fetch (optional)</param>
        /// <returns>Task of CustomNodeType</returns>
        System.Threading.Tasks.Task<CustomNodeType> GetCustomNodeTypesAsync (List<string> id = null, List<string> name = null, List<string> description = null, List<string> subDescription = null);

        /// <summary>
        /// Get the set of custom node types (since 1.10)
        /// </summary>
        /// <remarks>
        /// Returns a list of all the custom node types
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of custom node types to fetch (optional)</param>
        /// <param name="name">Name of custom node types to fetch (optional)</param>
        /// <param name="description">Description of custom node types to fetch (optional)</param>
        /// <param name="subDescription">Substring matching for description of custom node types to fetch (optional)</param>
        /// <returns>Task of ApiResponse (CustomNodeType)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomNodeType>> GetCustomNodeTypesAsyncWithHttpInfo (List<string> id = null, List<string> name = null, List<string> description = null, List<string> subDescription = null);
        /// <summary>
        /// Get file system monitoring settings (since 1.9)
        /// </summary>
        /// <remarks>
        /// Returns the map of settings specific to file system server settings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of FileSystemSettings</returns>
        System.Threading.Tasks.Task<FileSystemSettings> GetFileSystemAsync ();

        /// <summary>
        /// Get file system monitoring settings (since 1.9)
        /// </summary>
        /// <remarks>
        /// Returns the map of settings specific to file system server settings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (FileSystemSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileSystemSettings>> GetFileSystemAsyncWithHttpInfo ();
        /// <summary>
        /// Get global variables (since 1.11)
        /// </summary>
        /// <remarks>
        /// List all global variables
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the variables (optional)</param>
        /// <param name="description">Description of the variables (optional)</param>
        /// <param name="subDescription">Substring matching for description of variables to fetch (optional)</param>
        /// <param name="type">Either &#39;text&#39; or &#39;password&#39; indicating display restrictions for the value (optional)</param>
        /// <returns>Task of GlobalVariable</returns>
        System.Threading.Tasks.Task<GlobalVariable> GetGlobalVariablesAsync (List<string> name = null, List<string> description = null, List<string> subDescription = null, string type = null);

        /// <summary>
        /// Get global variables (since 1.11)
        /// </summary>
        /// <remarks>
        /// List all global variables
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the variables (optional)</param>
        /// <param name="description">Description of the variables (optional)</param>
        /// <param name="subDescription">Substring matching for description of variables to fetch (optional)</param>
        /// <param name="type">Either &#39;text&#39; or &#39;password&#39; indicating display restrictions for the value (optional)</param>
        /// <returns>Task of ApiResponse (GlobalVariable)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlobalVariable>> GetGlobalVariablesAsyncWithHttpInfo (List<string> name = null, List<string> description = null, List<string> subDescription = null, string type = null);
        /// <summary>
        /// Get the list of licensed features (since 1.8)
        /// </summary>
        /// <remarks>
        /// Returns a list of all licensed feature in TE including the feature consumption.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;License&gt;</returns>
        System.Threading.Tasks.Task<List<License>> GetLicensesAsync ();

        /// <summary>
        /// Get the list of licensed features (since 1.8)
        /// </summary>
        /// <remarks>
        /// Returns a list of all licensed feature in TE including the feature consumption.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;License&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<License>>> GetLicensesAsyncWithHttpInfo ();
        /// <summary>
        /// Get a list of all the SeverityRange definitions (since 1.6)
        /// </summary>
        /// <remarks>
        /// Returns a list of all the severity ranges and their attributes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SeverityRange&gt;</returns>
        System.Threading.Tasks.Task<List<SeverityRange>> GetSeverityRangeAsync ();

        /// <summary>
        /// Get a list of all the SeverityRange definitions (since 1.6)
        /// </summary>
        /// <remarks>
        /// Returns a list of all the severity ranges and their attributes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SeverityRange&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SeverityRange>>> GetSeverityRangeAsyncWithHttpInfo ();
        /// <summary>
        /// Get JVM system properties
        /// </summary>
        /// <remarks>
        /// Returns a map of system properties currently active in the JVM
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> GetSystemPropertiesAsync ();

        /// <summary>
        /// Get JVM system properties
        /// </summary>
        /// <remarks>
        /// Returns a map of system properties currently active in the JVM
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> GetSystemPropertiesAsyncWithHttpInfo ();
        /// <summary>
        /// Update a global variable (since 1.11)
        /// </summary>
        /// <remarks>
        /// Modifies an existing global variable based on the name
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the variable</param>
        /// <param name="body">A global variable definition</param>
        /// <returns>Task of GlobalVariable</returns>
        System.Threading.Tasks.Task<GlobalVariable> UpdateGlobalVariablesAsync (string name, GlobalVariable body);

        /// <summary>
        /// Update a global variable (since 1.11)
        /// </summary>
        /// <remarks>
        /// Modifies an existing global variable based on the name
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the variable</param>
        /// <param name="body">A global variable definition</param>
        /// <returns>Task of ApiResponse (GlobalVariable)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlobalVariable>> UpdateGlobalVariablesAsyncWithHttpInfo (string name, GlobalVariable body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SettingsApi : ISettingsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SettingsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SettingsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a custom node type (since 1.10) Returns a newly created custom node type.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A custom node type with id, name and description</param>
        /// <returns>CustomNodeType</returns>
        public CustomNodeType CreateCustomNodeTypes (CustomNodeType body)
        {
             ApiResponse<CustomNodeType> localVarResponse = CreateCustomNodeTypesWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a custom node type (since 1.10) Returns a newly created custom node type.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A custom node type with id, name and description</param>
        /// <returns>ApiResponse of CustomNodeType</returns>
        public ApiResponse< CustomNodeType > CreateCustomNodeTypesWithHttpInfo (CustomNodeType body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SettingsApi->CreateCustomNodeTypes");

            var localVarPath = "/settings/customNodeTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomNodeTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomNodeType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomNodeType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomNodeType)));
        }

        /// <summary>
        /// Create a custom node type (since 1.10) Returns a newly created custom node type.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A custom node type with id, name and description</param>
        /// <returns>Task of CustomNodeType</returns>
        public async System.Threading.Tasks.Task<CustomNodeType> CreateCustomNodeTypesAsync (CustomNodeType body)
        {
             ApiResponse<CustomNodeType> localVarResponse = await CreateCustomNodeTypesAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a custom node type (since 1.10) Returns a newly created custom node type.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A custom node type with id, name and description</param>
        /// <returns>Task of ApiResponse (CustomNodeType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomNodeType>> CreateCustomNodeTypesAsyncWithHttpInfo (CustomNodeType body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SettingsApi->CreateCustomNodeTypes");

            var localVarPath = "/settings/customNodeTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomNodeTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomNodeType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomNodeType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomNodeType)));
        }

        /// <summary>
        /// Create a new global variable (since 1.11) Creates a new global variable. The name must be unique. Variable type can either be &#39;text&#39; or &#39;password&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A global variable definition</param>
        /// <returns>GlobalVariable</returns>
        public GlobalVariable CreateGlobalVariables (GlobalVariable body)
        {
             ApiResponse<GlobalVariable> localVarResponse = CreateGlobalVariablesWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new global variable (since 1.11) Creates a new global variable. The name must be unique. Variable type can either be &#39;text&#39; or &#39;password&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A global variable definition</param>
        /// <returns>ApiResponse of GlobalVariable</returns>
        public ApiResponse< GlobalVariable > CreateGlobalVariablesWithHttpInfo (GlobalVariable body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SettingsApi->CreateGlobalVariables");

            var localVarPath = "/settings/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGlobalVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlobalVariable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GlobalVariable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlobalVariable)));
        }

        /// <summary>
        /// Create a new global variable (since 1.11) Creates a new global variable. The name must be unique. Variable type can either be &#39;text&#39; or &#39;password&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A global variable definition</param>
        /// <returns>Task of GlobalVariable</returns>
        public async System.Threading.Tasks.Task<GlobalVariable> CreateGlobalVariablesAsync (GlobalVariable body)
        {
             ApiResponse<GlobalVariable> localVarResponse = await CreateGlobalVariablesAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new global variable (since 1.11) Creates a new global variable. The name must be unique. Variable type can either be &#39;text&#39; or &#39;password&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A global variable definition</param>
        /// <returns>Task of ApiResponse (GlobalVariable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlobalVariable>> CreateGlobalVariablesAsyncWithHttpInfo (GlobalVariable body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SettingsApi->CreateGlobalVariables");

            var localVarPath = "/settings/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGlobalVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlobalVariable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GlobalVariable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlobalVariable)));
        }

        /// <summary>
        /// Delete a custom node type (since 1.11) Removes a custom node type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkCustomNodeTypeId">ID of custom node type to delete</param>
        /// <returns></returns>
        public void DeleteCustomNodeType (string rkCustomNodeTypeId)
        {
             DeleteCustomNodeTypeWithHttpInfo(rkCustomNodeTypeId);
        }

        /// <summary>
        /// Delete a custom node type (since 1.11) Removes a custom node type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkCustomNodeTypeId">ID of custom node type to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCustomNodeTypeWithHttpInfo (string rkCustomNodeTypeId)
        {
            // verify the required parameter 'rkCustomNodeTypeId' is set
            if (rkCustomNodeTypeId == null)
                throw new ApiException(400, "Missing required parameter 'rkCustomNodeTypeId' when calling SettingsApi->DeleteCustomNodeType");

            var localVarPath = "/settings/customNodeTypes/{rkCustomNodeTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkCustomNodeTypeId != null) localVarPathParams.Add("rkCustomNodeTypeId", this.Configuration.ApiClient.ParameterToString(rkCustomNodeTypeId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomNodeType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a custom node type (since 1.11) Removes a custom node type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkCustomNodeTypeId">ID of custom node type to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCustomNodeTypeAsync (string rkCustomNodeTypeId)
        {
             await DeleteCustomNodeTypeAsyncWithHttpInfo(rkCustomNodeTypeId);

        }

        /// <summary>
        /// Delete a custom node type (since 1.11) Removes a custom node type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkCustomNodeTypeId">ID of custom node type to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomNodeTypeAsyncWithHttpInfo (string rkCustomNodeTypeId)
        {
            // verify the required parameter 'rkCustomNodeTypeId' is set
            if (rkCustomNodeTypeId == null)
                throw new ApiException(400, "Missing required parameter 'rkCustomNodeTypeId' when calling SettingsApi->DeleteCustomNodeType");

            var localVarPath = "/settings/customNodeTypes/{rkCustomNodeTypeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkCustomNodeTypeId != null) localVarPathParams.Add("rkCustomNodeTypeId", this.Configuration.ApiClient.ParameterToString(rkCustomNodeTypeId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomNodeType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete global variable (since 1.11) Removes a global variable definition by name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the global variable to delete</param>
        /// <returns></returns>
        public void DeleteGlobalVariable (string name)
        {
             DeleteGlobalVariableWithHttpInfo(name);
        }

        /// <summary>
        /// Delete global variable (since 1.11) Removes a global variable definition by name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the global variable to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteGlobalVariableWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SettingsApi->DeleteGlobalVariable");

            var localVarPath = "/settings/variables/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGlobalVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete global variable (since 1.11) Removes a global variable definition by name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the global variable to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGlobalVariableAsync (string name)
        {
             await DeleteGlobalVariableAsyncWithHttpInfo(name);

        }

        /// <summary>
        /// Delete global variable (since 1.11) Removes a global variable definition by name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the global variable to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGlobalVariableAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SettingsApi->DeleteGlobalVariable");

            var localVarPath = "/settings/variables/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGlobalVariable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the set of custom node types (since 1.10) Returns a list of all the custom node types
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of custom node types to fetch (optional)</param>
        /// <param name="name">Name of custom node types to fetch (optional)</param>
        /// <param name="description">Description of custom node types to fetch (optional)</param>
        /// <param name="subDescription">Substring matching for description of custom node types to fetch (optional)</param>
        /// <returns>CustomNodeType</returns>
        public CustomNodeType GetCustomNodeTypes (List<string> id = null, List<string> name = null, List<string> description = null, List<string> subDescription = null)
        {
             ApiResponse<CustomNodeType> localVarResponse = GetCustomNodeTypesWithHttpInfo(id, name, description, subDescription);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the set of custom node types (since 1.10) Returns a list of all the custom node types
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of custom node types to fetch (optional)</param>
        /// <param name="name">Name of custom node types to fetch (optional)</param>
        /// <param name="description">Description of custom node types to fetch (optional)</param>
        /// <param name="subDescription">Substring matching for description of custom node types to fetch (optional)</param>
        /// <returns>ApiResponse of CustomNodeType</returns>
        public ApiResponse< CustomNodeType > GetCustomNodeTypesWithHttpInfo (List<string> id = null, List<string> name = null, List<string> description = null, List<string> subDescription = null)
        {

            var localVarPath = "/settings/customNodeTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "description", description)); // query parameter
            if (subDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sub_description", subDescription)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomNodeTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomNodeType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomNodeType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomNodeType)));
        }

        /// <summary>
        /// Get the set of custom node types (since 1.10) Returns a list of all the custom node types
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of custom node types to fetch (optional)</param>
        /// <param name="name">Name of custom node types to fetch (optional)</param>
        /// <param name="description">Description of custom node types to fetch (optional)</param>
        /// <param name="subDescription">Substring matching for description of custom node types to fetch (optional)</param>
        /// <returns>Task of CustomNodeType</returns>
        public async System.Threading.Tasks.Task<CustomNodeType> GetCustomNodeTypesAsync (List<string> id = null, List<string> name = null, List<string> description = null, List<string> subDescription = null)
        {
             ApiResponse<CustomNodeType> localVarResponse = await GetCustomNodeTypesAsyncWithHttpInfo(id, name, description, subDescription);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the set of custom node types (since 1.10) Returns a list of all the custom node types
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of custom node types to fetch (optional)</param>
        /// <param name="name">Name of custom node types to fetch (optional)</param>
        /// <param name="description">Description of custom node types to fetch (optional)</param>
        /// <param name="subDescription">Substring matching for description of custom node types to fetch (optional)</param>
        /// <returns>Task of ApiResponse (CustomNodeType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomNodeType>> GetCustomNodeTypesAsyncWithHttpInfo (List<string> id = null, List<string> name = null, List<string> description = null, List<string> subDescription = null)
        {

            var localVarPath = "/settings/customNodeTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "description", description)); // query parameter
            if (subDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sub_description", subDescription)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomNodeTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomNodeType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomNodeType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomNodeType)));
        }

        /// <summary>
        /// Get file system monitoring settings (since 1.9) Returns the map of settings specific to file system server settings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>FileSystemSettings</returns>
        public FileSystemSettings GetFileSystem ()
        {
             ApiResponse<FileSystemSettings> localVarResponse = GetFileSystemWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get file system monitoring settings (since 1.9) Returns the map of settings specific to file system server settings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of FileSystemSettings</returns>
        public ApiResponse< FileSystemSettings > GetFileSystemWithHttpInfo ()
        {

            var localVarPath = "/settings/filesystems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFileSystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileSystemSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileSystemSettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileSystemSettings)));
        }

        /// <summary>
        /// Get file system monitoring settings (since 1.9) Returns the map of settings specific to file system server settings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of FileSystemSettings</returns>
        public async System.Threading.Tasks.Task<FileSystemSettings> GetFileSystemAsync ()
        {
             ApiResponse<FileSystemSettings> localVarResponse = await GetFileSystemAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get file system monitoring settings (since 1.9) Returns the map of settings specific to file system server settings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (FileSystemSettings)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileSystemSettings>> GetFileSystemAsyncWithHttpInfo ()
        {

            var localVarPath = "/settings/filesystems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFileSystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileSystemSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileSystemSettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileSystemSettings)));
        }

        /// <summary>
        /// Get global variables (since 1.11) List all global variables
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the variables (optional)</param>
        /// <param name="description">Description of the variables (optional)</param>
        /// <param name="subDescription">Substring matching for description of variables to fetch (optional)</param>
        /// <param name="type">Either &#39;text&#39; or &#39;password&#39; indicating display restrictions for the value (optional)</param>
        /// <returns>GlobalVariable</returns>
        public GlobalVariable GetGlobalVariables (List<string> name = null, List<string> description = null, List<string> subDescription = null, string type = null)
        {
             ApiResponse<GlobalVariable> localVarResponse = GetGlobalVariablesWithHttpInfo(name, description, subDescription, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get global variables (since 1.11) List all global variables
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the variables (optional)</param>
        /// <param name="description">Description of the variables (optional)</param>
        /// <param name="subDescription">Substring matching for description of variables to fetch (optional)</param>
        /// <param name="type">Either &#39;text&#39; or &#39;password&#39; indicating display restrictions for the value (optional)</param>
        /// <returns>ApiResponse of GlobalVariable</returns>
        public ApiResponse< GlobalVariable > GetGlobalVariablesWithHttpInfo (List<string> name = null, List<string> description = null, List<string> subDescription = null, string type = null)
        {

            var localVarPath = "/settings/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "description", description)); // query parameter
            if (subDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sub_description", subDescription)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGlobalVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlobalVariable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GlobalVariable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlobalVariable)));
        }

        /// <summary>
        /// Get global variables (since 1.11) List all global variables
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the variables (optional)</param>
        /// <param name="description">Description of the variables (optional)</param>
        /// <param name="subDescription">Substring matching for description of variables to fetch (optional)</param>
        /// <param name="type">Either &#39;text&#39; or &#39;password&#39; indicating display restrictions for the value (optional)</param>
        /// <returns>Task of GlobalVariable</returns>
        public async System.Threading.Tasks.Task<GlobalVariable> GetGlobalVariablesAsync (List<string> name = null, List<string> description = null, List<string> subDescription = null, string type = null)
        {
             ApiResponse<GlobalVariable> localVarResponse = await GetGlobalVariablesAsyncWithHttpInfo(name, description, subDescription, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get global variables (since 1.11) List all global variables
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the variables (optional)</param>
        /// <param name="description">Description of the variables (optional)</param>
        /// <param name="subDescription">Substring matching for description of variables to fetch (optional)</param>
        /// <param name="type">Either &#39;text&#39; or &#39;password&#39; indicating display restrictions for the value (optional)</param>
        /// <returns>Task of ApiResponse (GlobalVariable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlobalVariable>> GetGlobalVariablesAsyncWithHttpInfo (List<string> name = null, List<string> description = null, List<string> subDescription = null, string type = null)
        {

            var localVarPath = "/settings/variables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "description", description)); // query parameter
            if (subDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sub_description", subDescription)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGlobalVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlobalVariable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GlobalVariable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlobalVariable)));
        }

        /// <summary>
        /// Get the list of licensed features (since 1.8) Returns a list of all licensed feature in TE including the feature consumption.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;License&gt;</returns>
        public List<License> GetLicenses ()
        {
             ApiResponse<List<License>> localVarResponse = GetLicensesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of licensed features (since 1.8) Returns a list of all licensed feature in TE including the feature consumption.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;License&gt;</returns>
        public ApiResponse< List<License> > GetLicensesWithHttpInfo ()
        {

            var localVarPath = "/settings/licenses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLicenses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<License>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<License>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<License>)));
        }

        /// <summary>
        /// Get the list of licensed features (since 1.8) Returns a list of all licensed feature in TE including the feature consumption.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;License&gt;</returns>
        public async System.Threading.Tasks.Task<List<License>> GetLicensesAsync ()
        {
             ApiResponse<List<License>> localVarResponse = await GetLicensesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the list of licensed features (since 1.8) Returns a list of all licensed feature in TE including the feature consumption.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;License&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<License>>> GetLicensesAsyncWithHttpInfo ()
        {

            var localVarPath = "/settings/licenses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLicenses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<License>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<License>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<License>)));
        }

        /// <summary>
        /// Get a list of all the SeverityRange definitions (since 1.6) Returns a list of all the severity ranges and their attributes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SeverityRange&gt;</returns>
        public List<SeverityRange> GetSeverityRange ()
        {
             ApiResponse<List<SeverityRange>> localVarResponse = GetSeverityRangeWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all the SeverityRange definitions (since 1.6) Returns a list of all the severity ranges and their attributes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SeverityRange&gt;</returns>
        public ApiResponse< List<SeverityRange> > GetSeverityRangeWithHttpInfo ()
        {

            var localVarPath = "/settings/system/severityRange";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSeverityRange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SeverityRange>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SeverityRange>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SeverityRange>)));
        }

        /// <summary>
        /// Get a list of all the SeverityRange definitions (since 1.6) Returns a list of all the severity ranges and their attributes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SeverityRange&gt;</returns>
        public async System.Threading.Tasks.Task<List<SeverityRange>> GetSeverityRangeAsync ()
        {
             ApiResponse<List<SeverityRange>> localVarResponse = await GetSeverityRangeAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of all the SeverityRange definitions (since 1.6) Returns a list of all the severity ranges and their attributes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SeverityRange&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SeverityRange>>> GetSeverityRangeAsyncWithHttpInfo ()
        {

            var localVarPath = "/settings/system/severityRange";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSeverityRange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SeverityRange>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SeverityRange>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SeverityRange>)));
        }

        /// <summary>
        /// Get JVM system properties Returns a map of system properties currently active in the JVM
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> GetSystemProperties ()
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = GetSystemPropertiesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get JVM system properties Returns a map of system properties currently active in the JVM
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > GetSystemPropertiesWithHttpInfo ()
        {

            var localVarPath = "/settings/systemProperties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSystemProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Get JVM system properties Returns a map of system properties currently active in the JVM
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> GetSystemPropertiesAsync ()
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await GetSystemPropertiesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get JVM system properties Returns a map of system properties currently active in the JVM
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> GetSystemPropertiesAsyncWithHttpInfo ()
        {

            var localVarPath = "/settings/systemProperties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSystemProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Update a global variable (since 1.11) Modifies an existing global variable based on the name
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the variable</param>
        /// <param name="body">A global variable definition</param>
        /// <returns>GlobalVariable</returns>
        public GlobalVariable UpdateGlobalVariables (string name, GlobalVariable body)
        {
             ApiResponse<GlobalVariable> localVarResponse = UpdateGlobalVariablesWithHttpInfo(name, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a global variable (since 1.11) Modifies an existing global variable based on the name
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the variable</param>
        /// <param name="body">A global variable definition</param>
        /// <returns>ApiResponse of GlobalVariable</returns>
        public ApiResponse< GlobalVariable > UpdateGlobalVariablesWithHttpInfo (string name, GlobalVariable body)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SettingsApi->UpdateGlobalVariables");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SettingsApi->UpdateGlobalVariables");

            var localVarPath = "/settings/variables/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGlobalVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlobalVariable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GlobalVariable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlobalVariable)));
        }

        /// <summary>
        /// Update a global variable (since 1.11) Modifies an existing global variable based on the name
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the variable</param>
        /// <param name="body">A global variable definition</param>
        /// <returns>Task of GlobalVariable</returns>
        public async System.Threading.Tasks.Task<GlobalVariable> UpdateGlobalVariablesAsync (string name, GlobalVariable body)
        {
             ApiResponse<GlobalVariable> localVarResponse = await UpdateGlobalVariablesAsyncWithHttpInfo(name, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a global variable (since 1.11) Modifies an existing global variable based on the name
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the variable</param>
        /// <param name="body">A global variable definition</param>
        /// <returns>Task of ApiResponse (GlobalVariable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlobalVariable>> UpdateGlobalVariablesAsyncWithHttpInfo (string name, GlobalVariable body)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling SettingsApi->UpdateGlobalVariables");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SettingsApi->UpdateGlobalVariables");

            var localVarPath = "/settings/variables/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGlobalVariables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlobalVariable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GlobalVariable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlobalVariable)));
        }

    }
}

/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.12.1.bmaster.r20170922182356-4e84151.b1741
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRulegroupsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a rule group link
        /// </summary>
        /// <remarks>
        /// Links a rule or rule group as a child in another rule group. Rules and rule groups may be linked into many rule groups.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleGroupId">Id of parent rule group</param>
        /// <param name="rkRuleGroupableId">ID of child rule or rule group</param>
        /// <returns></returns>
        void AssociateRuleGroupableToRuleGroup (string rkRuleGroupId, string rkRuleGroupableId);

        /// <summary>
        /// Add a rule group link
        /// </summary>
        /// <remarks>
        /// Links a rule or rule group as a child in another rule group. Rules and rule groups may be linked into many rule groups.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleGroupId">Id of parent rule group</param>
        /// <param name="rkRuleGroupableId">ID of child rule or rule group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssociateRuleGroupableToRuleGroupWithHttpInfo (string rkRuleGroupId, string rkRuleGroupableId);
        /// <summary>
        /// Create a new rule group
        /// </summary>
        /// <remarks>
        /// Returns the newly created rule group. New rule groups are in the unlinked group until linked with another rule group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Rule Group object to be created in TE</param>
        /// <returns>RuleGroup</returns>
        RuleGroup CreateRuleGroup (RuleGroup body);

        /// <summary>
        /// Create a new rule group
        /// </summary>
        /// <remarks>
        /// Returns the newly created rule group. New rule groups are in the unlinked group until linked with another rule group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Rule Group object to be created in TE</param>
        /// <returns>ApiResponse of RuleGroup</returns>
        ApiResponse<RuleGroup> CreateRuleGroupWithHttpInfo (RuleGroup body);
        /// <summary>
        /// Delete a rule group
        /// </summary>
        /// <remarks>
        /// Removes a rule group from TE. Child rules and rule groups with no other links will be move to the unlinked group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleGroupId">ID of Rule Group to delete</param>
        /// <returns></returns>
        void DeleteRuleGroup (string rkRuleGroupId);

        /// <summary>
        /// Delete a rule group
        /// </summary>
        /// <remarks>
        /// Removes a rule group from TE. Child rules and rule groups with no other links will be move to the unlinked group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleGroupId">ID of Rule Group to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRuleGroupWithHttpInfo (string rkRuleGroupId);
        /// <summary>
        /// Delete a rule group link
        /// </summary>
        /// <remarks>
        /// Removes a child rule or rule group from a parent rule group. If the child is no longer linked to any other rule groups, then it is moved to the unlinked group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleGroupId">Id of parent rule group</param>
        /// <param name="rkRuleGroupableId">ID of child rule or rule group</param>
        /// <returns></returns>
        void DisassociateRuleGroupableFromRuleGroup (string rkRuleGroupId, string rkRuleGroupableId);

        /// <summary>
        /// Delete a rule group link
        /// </summary>
        /// <remarks>
        /// Removes a child rule or rule group from a parent rule group. If the child is no longer linked to any other rule groups, then it is moved to the unlinked group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleGroupId">Id of parent rule group</param>
        /// <param name="rkRuleGroupableId">ID of child rule or rule group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DisassociateRuleGroupableFromRuleGroupWithHttpInfo (string rkRuleGroupId, string rkRuleGroupableId);
        /// <summary>
        /// Get root rule group
        /// </summary>
        /// <remarks>
        /// Returns the rule group resource for the &#39;Root Rule Group&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RuleGroup</returns>
        RuleGroup GetRootRuleGroup ();

        /// <summary>
        /// Get root rule group
        /// </summary>
        /// <remarks>
        /// Returns the rule group resource for the &#39;Root Rule Group&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RuleGroup</returns>
        ApiResponse<RuleGroup> GetRootRuleGroupWithHttpInfo ();
        /// <summary>
        /// Get the details of a single RuleGroup
        /// </summary>
        /// <remarks>
        /// Permissions needed: &#39;tool.rule.load&#39;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleGroupId">ID of Rule Group to fetch</param>
        /// <returns>RuleGroup</returns>
        RuleGroup GetRuleGroupById (string rkRuleGroupId);

        /// <summary>
        /// Get the details of a single RuleGroup
        /// </summary>
        /// <remarks>
        /// Permissions needed: &#39;tool.rule.load&#39;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleGroupId">ID of Rule Group to fetch</param>
        /// <returns>ApiResponse of RuleGroup</returns>
        ApiResponse<RuleGroup> GetRuleGroupByIdWithHttpInfo (string rkRuleGroupId);
        /// <summary>
        /// Search all RuleGroups
        /// </summary>
        /// <remarks>
        /// Return a list of all RuleGroups or only those RuleGroups that match the provided filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="id">IDs of Rule Groups to fetch. (optional)</param>
        /// <param name="name">Names of Rule Groups to fetch. (optional)</param>
        /// <param name="description">Descriptions of Rule Groups to fetch. (optional)</param>
        /// <param name="subDescription">Support for like search for description parameter. (optional)</param>
        /// <param name="modifiedTime">Modified times of Rule Groups to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of Rule Groups to fetch. (optional)</param>
        /// <param name="trackingId">Tracking ids of Rule Groups to fetch. (optional)</param>
        /// <returns>List&lt;RuleGroup&gt;</returns>
        List<RuleGroup> GetRuleGroups (string pageLimit = null, string pageStart = null, List<string> id = null, List<string> name = null, List<string> description = null, List<string> subDescription = null, List<string> modifiedTime = null, List<string> importedTime = null, List<string> trackingId = null);

        /// <summary>
        /// Search all RuleGroups
        /// </summary>
        /// <remarks>
        /// Return a list of all RuleGroups or only those RuleGroups that match the provided filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="id">IDs of Rule Groups to fetch. (optional)</param>
        /// <param name="name">Names of Rule Groups to fetch. (optional)</param>
        /// <param name="description">Descriptions of Rule Groups to fetch. (optional)</param>
        /// <param name="subDescription">Support for like search for description parameter. (optional)</param>
        /// <param name="modifiedTime">Modified times of Rule Groups to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of Rule Groups to fetch. (optional)</param>
        /// <param name="trackingId">Tracking ids of Rule Groups to fetch. (optional)</param>
        /// <returns>ApiResponse of List&lt;RuleGroup&gt;</returns>
        ApiResponse<List<RuleGroup>> GetRuleGroupsWithHttpInfo (string pageLimit = null, string pageStart = null, List<string> id = null, List<string> name = null, List<string> description = null, List<string> subDescription = null, List<string> modifiedTime = null, List<string> importedTime = null, List<string> trackingId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add a rule group link
        /// </summary>
        /// <remarks>
        /// Links a rule or rule group as a child in another rule group. Rules and rule groups may be linked into many rule groups.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleGroupId">Id of parent rule group</param>
        /// <param name="rkRuleGroupableId">ID of child rule or rule group</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssociateRuleGroupableToRuleGroupAsync (string rkRuleGroupId, string rkRuleGroupableId);

        /// <summary>
        /// Add a rule group link
        /// </summary>
        /// <remarks>
        /// Links a rule or rule group as a child in another rule group. Rules and rule groups may be linked into many rule groups.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleGroupId">Id of parent rule group</param>
        /// <param name="rkRuleGroupableId">ID of child rule or rule group</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssociateRuleGroupableToRuleGroupAsyncWithHttpInfo (string rkRuleGroupId, string rkRuleGroupableId);
        /// <summary>
        /// Create a new rule group
        /// </summary>
        /// <remarks>
        /// Returns the newly created rule group. New rule groups are in the unlinked group until linked with another rule group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Rule Group object to be created in TE</param>
        /// <returns>Task of RuleGroup</returns>
        System.Threading.Tasks.Task<RuleGroup> CreateRuleGroupAsync (RuleGroup body);

        /// <summary>
        /// Create a new rule group
        /// </summary>
        /// <remarks>
        /// Returns the newly created rule group. New rule groups are in the unlinked group until linked with another rule group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Rule Group object to be created in TE</param>
        /// <returns>Task of ApiResponse (RuleGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<RuleGroup>> CreateRuleGroupAsyncWithHttpInfo (RuleGroup body);
        /// <summary>
        /// Delete a rule group
        /// </summary>
        /// <remarks>
        /// Removes a rule group from TE. Child rules and rule groups with no other links will be move to the unlinked group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleGroupId">ID of Rule Group to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRuleGroupAsync (string rkRuleGroupId);

        /// <summary>
        /// Delete a rule group
        /// </summary>
        /// <remarks>
        /// Removes a rule group from TE. Child rules and rule groups with no other links will be move to the unlinked group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleGroupId">ID of Rule Group to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRuleGroupAsyncWithHttpInfo (string rkRuleGroupId);
        /// <summary>
        /// Delete a rule group link
        /// </summary>
        /// <remarks>
        /// Removes a child rule or rule group from a parent rule group. If the child is no longer linked to any other rule groups, then it is moved to the unlinked group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleGroupId">Id of parent rule group</param>
        /// <param name="rkRuleGroupableId">ID of child rule or rule group</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DisassociateRuleGroupableFromRuleGroupAsync (string rkRuleGroupId, string rkRuleGroupableId);

        /// <summary>
        /// Delete a rule group link
        /// </summary>
        /// <remarks>
        /// Removes a child rule or rule group from a parent rule group. If the child is no longer linked to any other rule groups, then it is moved to the unlinked group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleGroupId">Id of parent rule group</param>
        /// <param name="rkRuleGroupableId">ID of child rule or rule group</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DisassociateRuleGroupableFromRuleGroupAsyncWithHttpInfo (string rkRuleGroupId, string rkRuleGroupableId);
        /// <summary>
        /// Get root rule group
        /// </summary>
        /// <remarks>
        /// Returns the rule group resource for the &#39;Root Rule Group&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of RuleGroup</returns>
        System.Threading.Tasks.Task<RuleGroup> GetRootRuleGroupAsync ();

        /// <summary>
        /// Get root rule group
        /// </summary>
        /// <remarks>
        /// Returns the rule group resource for the &#39;Root Rule Group&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (RuleGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<RuleGroup>> GetRootRuleGroupAsyncWithHttpInfo ();
        /// <summary>
        /// Get the details of a single RuleGroup
        /// </summary>
        /// <remarks>
        /// Permissions needed: &#39;tool.rule.load&#39;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleGroupId">ID of Rule Group to fetch</param>
        /// <returns>Task of RuleGroup</returns>
        System.Threading.Tasks.Task<RuleGroup> GetRuleGroupByIdAsync (string rkRuleGroupId);

        /// <summary>
        /// Get the details of a single RuleGroup
        /// </summary>
        /// <remarks>
        /// Permissions needed: &#39;tool.rule.load&#39;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleGroupId">ID of Rule Group to fetch</param>
        /// <returns>Task of ApiResponse (RuleGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<RuleGroup>> GetRuleGroupByIdAsyncWithHttpInfo (string rkRuleGroupId);
        /// <summary>
        /// Search all RuleGroups
        /// </summary>
        /// <remarks>
        /// Return a list of all RuleGroups or only those RuleGroups that match the provided filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="id">IDs of Rule Groups to fetch. (optional)</param>
        /// <param name="name">Names of Rule Groups to fetch. (optional)</param>
        /// <param name="description">Descriptions of Rule Groups to fetch. (optional)</param>
        /// <param name="subDescription">Support for like search for description parameter. (optional)</param>
        /// <param name="modifiedTime">Modified times of Rule Groups to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of Rule Groups to fetch. (optional)</param>
        /// <param name="trackingId">Tracking ids of Rule Groups to fetch. (optional)</param>
        /// <returns>Task of List&lt;RuleGroup&gt;</returns>
        System.Threading.Tasks.Task<List<RuleGroup>> GetRuleGroupsAsync (string pageLimit = null, string pageStart = null, List<string> id = null, List<string> name = null, List<string> description = null, List<string> subDescription = null, List<string> modifiedTime = null, List<string> importedTime = null, List<string> trackingId = null);

        /// <summary>
        /// Search all RuleGroups
        /// </summary>
        /// <remarks>
        /// Return a list of all RuleGroups or only those RuleGroups that match the provided filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="id">IDs of Rule Groups to fetch. (optional)</param>
        /// <param name="name">Names of Rule Groups to fetch. (optional)</param>
        /// <param name="description">Descriptions of Rule Groups to fetch. (optional)</param>
        /// <param name="subDescription">Support for like search for description parameter. (optional)</param>
        /// <param name="modifiedTime">Modified times of Rule Groups to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of Rule Groups to fetch. (optional)</param>
        /// <param name="trackingId">Tracking ids of Rule Groups to fetch. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RuleGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RuleGroup>>> GetRuleGroupsAsyncWithHttpInfo (string pageLimit = null, string pageStart = null, List<string> id = null, List<string> name = null, List<string> description = null, List<string> subDescription = null, List<string> modifiedTime = null, List<string> importedTime = null, List<string> trackingId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RulegroupsApi : IRulegroupsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RulegroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RulegroupsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RulegroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RulegroupsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add a rule group link Links a rule or rule group as a child in another rule group. Rules and rule groups may be linked into many rule groups.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleGroupId">Id of parent rule group</param>
        /// <param name="rkRuleGroupableId">ID of child rule or rule group</param>
        /// <returns></returns>
        public void AssociateRuleGroupableToRuleGroup (string rkRuleGroupId, string rkRuleGroupableId)
        {
             AssociateRuleGroupableToRuleGroupWithHttpInfo(rkRuleGroupId, rkRuleGroupableId);
        }

        /// <summary>
        /// Add a rule group link Links a rule or rule group as a child in another rule group. Rules and rule groups may be linked into many rule groups.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleGroupId">Id of parent rule group</param>
        /// <param name="rkRuleGroupableId">ID of child rule or rule group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssociateRuleGroupableToRuleGroupWithHttpInfo (string rkRuleGroupId, string rkRuleGroupableId)
        {
            // verify the required parameter 'rkRuleGroupId' is set
            if (rkRuleGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkRuleGroupId' when calling RulegroupsApi->AssociateRuleGroupableToRuleGroup");
            // verify the required parameter 'rkRuleGroupableId' is set
            if (rkRuleGroupableId == null)
                throw new ApiException(400, "Missing required parameter 'rkRuleGroupableId' when calling RulegroupsApi->AssociateRuleGroupableToRuleGroup");

            var localVarPath = "/rulegroups/{rkRuleGroupId}/links/{rkRuleGroupableId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkRuleGroupId != null) localVarPathParams.Add("rkRuleGroupId", this.Configuration.ApiClient.ParameterToString(rkRuleGroupId)); // path parameter
            if (rkRuleGroupableId != null) localVarPathParams.Add("rkRuleGroupableId", this.Configuration.ApiClient.ParameterToString(rkRuleGroupableId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociateRuleGroupableToRuleGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add a rule group link Links a rule or rule group as a child in another rule group. Rules and rule groups may be linked into many rule groups.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleGroupId">Id of parent rule group</param>
        /// <param name="rkRuleGroupableId">ID of child rule or rule group</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssociateRuleGroupableToRuleGroupAsync (string rkRuleGroupId, string rkRuleGroupableId)
        {
             await AssociateRuleGroupableToRuleGroupAsyncWithHttpInfo(rkRuleGroupId, rkRuleGroupableId);

        }

        /// <summary>
        /// Add a rule group link Links a rule or rule group as a child in another rule group. Rules and rule groups may be linked into many rule groups.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleGroupId">Id of parent rule group</param>
        /// <param name="rkRuleGroupableId">ID of child rule or rule group</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssociateRuleGroupableToRuleGroupAsyncWithHttpInfo (string rkRuleGroupId, string rkRuleGroupableId)
        {
            // verify the required parameter 'rkRuleGroupId' is set
            if (rkRuleGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkRuleGroupId' when calling RulegroupsApi->AssociateRuleGroupableToRuleGroup");
            // verify the required parameter 'rkRuleGroupableId' is set
            if (rkRuleGroupableId == null)
                throw new ApiException(400, "Missing required parameter 'rkRuleGroupableId' when calling RulegroupsApi->AssociateRuleGroupableToRuleGroup");

            var localVarPath = "/rulegroups/{rkRuleGroupId}/links/{rkRuleGroupableId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkRuleGroupId != null) localVarPathParams.Add("rkRuleGroupId", this.Configuration.ApiClient.ParameterToString(rkRuleGroupId)); // path parameter
            if (rkRuleGroupableId != null) localVarPathParams.Add("rkRuleGroupableId", this.Configuration.ApiClient.ParameterToString(rkRuleGroupableId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociateRuleGroupableToRuleGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a new rule group Returns the newly created rule group. New rule groups are in the unlinked group until linked with another rule group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Rule Group object to be created in TE</param>
        /// <returns>RuleGroup</returns>
        public RuleGroup CreateRuleGroup (RuleGroup body)
        {
             ApiResponse<RuleGroup> localVarResponse = CreateRuleGroupWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new rule group Returns the newly created rule group. New rule groups are in the unlinked group until linked with another rule group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Rule Group object to be created in TE</param>
        /// <returns>ApiResponse of RuleGroup</returns>
        public ApiResponse< RuleGroup > CreateRuleGroupWithHttpInfo (RuleGroup body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RulegroupsApi->CreateRuleGroup");

            var localVarPath = "/rulegroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRuleGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RuleGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RuleGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RuleGroup)));
        }

        /// <summary>
        /// Create a new rule group Returns the newly created rule group. New rule groups are in the unlinked group until linked with another rule group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Rule Group object to be created in TE</param>
        /// <returns>Task of RuleGroup</returns>
        public async System.Threading.Tasks.Task<RuleGroup> CreateRuleGroupAsync (RuleGroup body)
        {
             ApiResponse<RuleGroup> localVarResponse = await CreateRuleGroupAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new rule group Returns the newly created rule group. New rule groups are in the unlinked group until linked with another rule group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Rule Group object to be created in TE</param>
        /// <returns>Task of ApiResponse (RuleGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RuleGroup>> CreateRuleGroupAsyncWithHttpInfo (RuleGroup body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RulegroupsApi->CreateRuleGroup");

            var localVarPath = "/rulegroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRuleGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RuleGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RuleGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RuleGroup)));
        }

        /// <summary>
        /// Delete a rule group Removes a rule group from TE. Child rules and rule groups with no other links will be move to the unlinked group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleGroupId">ID of Rule Group to delete</param>
        /// <returns></returns>
        public void DeleteRuleGroup (string rkRuleGroupId)
        {
             DeleteRuleGroupWithHttpInfo(rkRuleGroupId);
        }

        /// <summary>
        /// Delete a rule group Removes a rule group from TE. Child rules and rule groups with no other links will be move to the unlinked group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleGroupId">ID of Rule Group to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRuleGroupWithHttpInfo (string rkRuleGroupId)
        {
            // verify the required parameter 'rkRuleGroupId' is set
            if (rkRuleGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkRuleGroupId' when calling RulegroupsApi->DeleteRuleGroup");

            var localVarPath = "/rulegroups/{rkRuleGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkRuleGroupId != null) localVarPathParams.Add("rkRuleGroupId", this.Configuration.ApiClient.ParameterToString(rkRuleGroupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRuleGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a rule group Removes a rule group from TE. Child rules and rule groups with no other links will be move to the unlinked group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleGroupId">ID of Rule Group to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRuleGroupAsync (string rkRuleGroupId)
        {
             await DeleteRuleGroupAsyncWithHttpInfo(rkRuleGroupId);

        }

        /// <summary>
        /// Delete a rule group Removes a rule group from TE. Child rules and rule groups with no other links will be move to the unlinked group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleGroupId">ID of Rule Group to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRuleGroupAsyncWithHttpInfo (string rkRuleGroupId)
        {
            // verify the required parameter 'rkRuleGroupId' is set
            if (rkRuleGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkRuleGroupId' when calling RulegroupsApi->DeleteRuleGroup");

            var localVarPath = "/rulegroups/{rkRuleGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkRuleGroupId != null) localVarPathParams.Add("rkRuleGroupId", this.Configuration.ApiClient.ParameterToString(rkRuleGroupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRuleGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a rule group link Removes a child rule or rule group from a parent rule group. If the child is no longer linked to any other rule groups, then it is moved to the unlinked group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleGroupId">Id of parent rule group</param>
        /// <param name="rkRuleGroupableId">ID of child rule or rule group</param>
        /// <returns></returns>
        public void DisassociateRuleGroupableFromRuleGroup (string rkRuleGroupId, string rkRuleGroupableId)
        {
             DisassociateRuleGroupableFromRuleGroupWithHttpInfo(rkRuleGroupId, rkRuleGroupableId);
        }

        /// <summary>
        /// Delete a rule group link Removes a child rule or rule group from a parent rule group. If the child is no longer linked to any other rule groups, then it is moved to the unlinked group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleGroupId">Id of parent rule group</param>
        /// <param name="rkRuleGroupableId">ID of child rule or rule group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DisassociateRuleGroupableFromRuleGroupWithHttpInfo (string rkRuleGroupId, string rkRuleGroupableId)
        {
            // verify the required parameter 'rkRuleGroupId' is set
            if (rkRuleGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkRuleGroupId' when calling RulegroupsApi->DisassociateRuleGroupableFromRuleGroup");
            // verify the required parameter 'rkRuleGroupableId' is set
            if (rkRuleGroupableId == null)
                throw new ApiException(400, "Missing required parameter 'rkRuleGroupableId' when calling RulegroupsApi->DisassociateRuleGroupableFromRuleGroup");

            var localVarPath = "/rulegroups/{rkRuleGroupId}/links/{rkRuleGroupableId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkRuleGroupId != null) localVarPathParams.Add("rkRuleGroupId", this.Configuration.ApiClient.ParameterToString(rkRuleGroupId)); // path parameter
            if (rkRuleGroupableId != null) localVarPathParams.Add("rkRuleGroupableId", this.Configuration.ApiClient.ParameterToString(rkRuleGroupableId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisassociateRuleGroupableFromRuleGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a rule group link Removes a child rule or rule group from a parent rule group. If the child is no longer linked to any other rule groups, then it is moved to the unlinked group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleGroupId">Id of parent rule group</param>
        /// <param name="rkRuleGroupableId">ID of child rule or rule group</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DisassociateRuleGroupableFromRuleGroupAsync (string rkRuleGroupId, string rkRuleGroupableId)
        {
             await DisassociateRuleGroupableFromRuleGroupAsyncWithHttpInfo(rkRuleGroupId, rkRuleGroupableId);

        }

        /// <summary>
        /// Delete a rule group link Removes a child rule or rule group from a parent rule group. If the child is no longer linked to any other rule groups, then it is moved to the unlinked group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleGroupId">Id of parent rule group</param>
        /// <param name="rkRuleGroupableId">ID of child rule or rule group</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DisassociateRuleGroupableFromRuleGroupAsyncWithHttpInfo (string rkRuleGroupId, string rkRuleGroupableId)
        {
            // verify the required parameter 'rkRuleGroupId' is set
            if (rkRuleGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkRuleGroupId' when calling RulegroupsApi->DisassociateRuleGroupableFromRuleGroup");
            // verify the required parameter 'rkRuleGroupableId' is set
            if (rkRuleGroupableId == null)
                throw new ApiException(400, "Missing required parameter 'rkRuleGroupableId' when calling RulegroupsApi->DisassociateRuleGroupableFromRuleGroup");

            var localVarPath = "/rulegroups/{rkRuleGroupId}/links/{rkRuleGroupableId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkRuleGroupId != null) localVarPathParams.Add("rkRuleGroupId", this.Configuration.ApiClient.ParameterToString(rkRuleGroupId)); // path parameter
            if (rkRuleGroupableId != null) localVarPathParams.Add("rkRuleGroupableId", this.Configuration.ApiClient.ParameterToString(rkRuleGroupableId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisassociateRuleGroupableFromRuleGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get root rule group Returns the rule group resource for the &#39;Root Rule Group&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RuleGroup</returns>
        public RuleGroup GetRootRuleGroup ()
        {
             ApiResponse<RuleGroup> localVarResponse = GetRootRuleGroupWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get root rule group Returns the rule group resource for the &#39;Root Rule Group&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RuleGroup</returns>
        public ApiResponse< RuleGroup > GetRootRuleGroupWithHttpInfo ()
        {

            var localVarPath = "/rulegroups/root";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRootRuleGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RuleGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RuleGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RuleGroup)));
        }

        /// <summary>
        /// Get root rule group Returns the rule group resource for the &#39;Root Rule Group&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of RuleGroup</returns>
        public async System.Threading.Tasks.Task<RuleGroup> GetRootRuleGroupAsync ()
        {
             ApiResponse<RuleGroup> localVarResponse = await GetRootRuleGroupAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get root rule group Returns the rule group resource for the &#39;Root Rule Group&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (RuleGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RuleGroup>> GetRootRuleGroupAsyncWithHttpInfo ()
        {

            var localVarPath = "/rulegroups/root";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRootRuleGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RuleGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RuleGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RuleGroup)));
        }

        /// <summary>
        /// Get the details of a single RuleGroup Permissions needed: &#39;tool.rule.load&#39;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleGroupId">ID of Rule Group to fetch</param>
        /// <returns>RuleGroup</returns>
        public RuleGroup GetRuleGroupById (string rkRuleGroupId)
        {
             ApiResponse<RuleGroup> localVarResponse = GetRuleGroupByIdWithHttpInfo(rkRuleGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details of a single RuleGroup Permissions needed: &#39;tool.rule.load&#39;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleGroupId">ID of Rule Group to fetch</param>
        /// <returns>ApiResponse of RuleGroup</returns>
        public ApiResponse< RuleGroup > GetRuleGroupByIdWithHttpInfo (string rkRuleGroupId)
        {
            // verify the required parameter 'rkRuleGroupId' is set
            if (rkRuleGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkRuleGroupId' when calling RulegroupsApi->GetRuleGroupById");

            var localVarPath = "/rulegroups/{rkRuleGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkRuleGroupId != null) localVarPathParams.Add("rkRuleGroupId", this.Configuration.ApiClient.ParameterToString(rkRuleGroupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRuleGroupById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RuleGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RuleGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RuleGroup)));
        }

        /// <summary>
        /// Get the details of a single RuleGroup Permissions needed: &#39;tool.rule.load&#39;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleGroupId">ID of Rule Group to fetch</param>
        /// <returns>Task of RuleGroup</returns>
        public async System.Threading.Tasks.Task<RuleGroup> GetRuleGroupByIdAsync (string rkRuleGroupId)
        {
             ApiResponse<RuleGroup> localVarResponse = await GetRuleGroupByIdAsyncWithHttpInfo(rkRuleGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the details of a single RuleGroup Permissions needed: &#39;tool.rule.load&#39;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rkRuleGroupId">ID of Rule Group to fetch</param>
        /// <returns>Task of ApiResponse (RuleGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RuleGroup>> GetRuleGroupByIdAsyncWithHttpInfo (string rkRuleGroupId)
        {
            // verify the required parameter 'rkRuleGroupId' is set
            if (rkRuleGroupId == null)
                throw new ApiException(400, "Missing required parameter 'rkRuleGroupId' when calling RulegroupsApi->GetRuleGroupById");

            var localVarPath = "/rulegroups/{rkRuleGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rkRuleGroupId != null) localVarPathParams.Add("rkRuleGroupId", this.Configuration.ApiClient.ParameterToString(rkRuleGroupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRuleGroupById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RuleGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RuleGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RuleGroup)));
        }

        /// <summary>
        /// Search all RuleGroups Return a list of all RuleGroups or only those RuleGroups that match the provided filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="id">IDs of Rule Groups to fetch. (optional)</param>
        /// <param name="name">Names of Rule Groups to fetch. (optional)</param>
        /// <param name="description">Descriptions of Rule Groups to fetch. (optional)</param>
        /// <param name="subDescription">Support for like search for description parameter. (optional)</param>
        /// <param name="modifiedTime">Modified times of Rule Groups to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of Rule Groups to fetch. (optional)</param>
        /// <param name="trackingId">Tracking ids of Rule Groups to fetch. (optional)</param>
        /// <returns>List&lt;RuleGroup&gt;</returns>
        public List<RuleGroup> GetRuleGroups (string pageLimit = null, string pageStart = null, List<string> id = null, List<string> name = null, List<string> description = null, List<string> subDescription = null, List<string> modifiedTime = null, List<string> importedTime = null, List<string> trackingId = null)
        {
             ApiResponse<List<RuleGroup>> localVarResponse = GetRuleGroupsWithHttpInfo(pageLimit, pageStart, id, name, description, subDescription, modifiedTime, importedTime, trackingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search all RuleGroups Return a list of all RuleGroups or only those RuleGroups that match the provided filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="id">IDs of Rule Groups to fetch. (optional)</param>
        /// <param name="name">Names of Rule Groups to fetch. (optional)</param>
        /// <param name="description">Descriptions of Rule Groups to fetch. (optional)</param>
        /// <param name="subDescription">Support for like search for description parameter. (optional)</param>
        /// <param name="modifiedTime">Modified times of Rule Groups to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of Rule Groups to fetch. (optional)</param>
        /// <param name="trackingId">Tracking ids of Rule Groups to fetch. (optional)</param>
        /// <returns>ApiResponse of List&lt;RuleGroup&gt;</returns>
        public ApiResponse< List<RuleGroup> > GetRuleGroupsWithHttpInfo (string pageLimit = null, string pageStart = null, List<string> id = null, List<string> name = null, List<string> description = null, List<string> subDescription = null, List<string> modifiedTime = null, List<string> importedTime = null, List<string> trackingId = null)
        {

            var localVarPath = "/rulegroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageLimit", pageLimit)); // query parameter
            if (pageStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageStart", pageStart)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "description", description)); // query parameter
            if (subDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sub_description", subDescription)); // query parameter
            if (modifiedTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "modifiedTime", modifiedTime)); // query parameter
            if (importedTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "importedTime", importedTime)); // query parameter
            if (trackingId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "trackingId", trackingId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRuleGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RuleGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RuleGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RuleGroup>)));
        }

        /// <summary>
        /// Search all RuleGroups Return a list of all RuleGroups or only those RuleGroups that match the provided filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="id">IDs of Rule Groups to fetch. (optional)</param>
        /// <param name="name">Names of Rule Groups to fetch. (optional)</param>
        /// <param name="description">Descriptions of Rule Groups to fetch. (optional)</param>
        /// <param name="subDescription">Support for like search for description parameter. (optional)</param>
        /// <param name="modifiedTime">Modified times of Rule Groups to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of Rule Groups to fetch. (optional)</param>
        /// <param name="trackingId">Tracking ids of Rule Groups to fetch. (optional)</param>
        /// <returns>Task of List&lt;RuleGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<RuleGroup>> GetRuleGroupsAsync (string pageLimit = null, string pageStart = null, List<string> id = null, List<string> name = null, List<string> description = null, List<string> subDescription = null, List<string> modifiedTime = null, List<string> importedTime = null, List<string> trackingId = null)
        {
             ApiResponse<List<RuleGroup>> localVarResponse = await GetRuleGroupsAsyncWithHttpInfo(pageLimit, pageStart, id, name, description, subDescription, modifiedTime, importedTime, trackingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search all RuleGroups Return a list of all RuleGroups or only those RuleGroups that match the provided filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageLimit">Page limit for paging support (optional)</param>
        /// <param name="pageStart">Page start for paging support (optional)</param>
        /// <param name="id">IDs of Rule Groups to fetch. (optional)</param>
        /// <param name="name">Names of Rule Groups to fetch. (optional)</param>
        /// <param name="description">Descriptions of Rule Groups to fetch. (optional)</param>
        /// <param name="subDescription">Support for like search for description parameter. (optional)</param>
        /// <param name="modifiedTime">Modified times of Rule Groups to fetch. (optional)</param>
        /// <param name="importedTime">Imported times of Rule Groups to fetch. (optional)</param>
        /// <param name="trackingId">Tracking ids of Rule Groups to fetch. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RuleGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RuleGroup>>> GetRuleGroupsAsyncWithHttpInfo (string pageLimit = null, string pageStart = null, List<string> id = null, List<string> name = null, List<string> description = null, List<string> subDescription = null, List<string> modifiedTime = null, List<string> importedTime = null, List<string> trackingId = null)
        {

            var localVarPath = "/rulegroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageLimit", pageLimit)); // query parameter
            if (pageStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageStart", pageStart)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "description", description)); // query parameter
            if (subDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sub_description", subDescription)); // query parameter
            if (modifiedTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "modifiedTime", modifiedTime)); // query parameter
            if (importedTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "importedTime", importedTime)); // query parameter
            if (trackingId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "trackingId", trackingId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRuleGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RuleGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RuleGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RuleGroup>)));
        }

    }
}

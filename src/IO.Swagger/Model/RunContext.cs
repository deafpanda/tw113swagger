/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.13.0.bmaster.r20180119190259-8b60eaa.b1753
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Task Run Context
    /// </summary>
    [DataContract]
    public partial class RunContext :  IEquatable<RunContext>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RunContext" /> class.
        /// </summary>
        /// <param name="endTime">Time at which the task completed or was cancelled.</param>
        /// <param name="hasErrors">True if any of the nodes in scope had a problem executing any of the rules (default to false).</param>
        /// <param name="id">ID of Run Context.</param>
        /// <param name="runType">One of BASELINE_NEW, CHECK or BASELINE_ALL indicating rule run type of the task..</param>
        /// <param name="startTime">Time at which the task began executing.</param>
        /// <param name="stopType">One of MANUAL, TIMEOUT, or NORMAL, indicating if the task was cancelled by the user, exceeded allowed duration, or finished as expected.</param>
        /// <param name="taskId">ID of Task.</param>
        public RunContext(string endTime = default(string), bool? hasErrors = false, string id = default(string), string runType = default(string), string startTime = default(string), string stopType = default(string), string taskId = default(string))
        {
            this.EndTime = endTime;
            // use default value if no "hasErrors" provided
            if (hasErrors == null)
            {
                this.HasErrors = false;
            }
            else
            {
                this.HasErrors = hasErrors;
            }
            this.Id = id;
            this.RunType = runType;
            this.StartTime = startTime;
            this.StopType = stopType;
            this.TaskId = taskId;
        }
        
        /// <summary>
        /// Time at which the task completed or was cancelled
        /// </summary>
        /// <value>Time at which the task completed or was cancelled</value>
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public string EndTime { get; set; }

        /// <summary>
        /// True if any of the nodes in scope had a problem executing any of the rules
        /// </summary>
        /// <value>True if any of the nodes in scope had a problem executing any of the rules</value>
        [DataMember(Name="hasErrors", EmitDefaultValue=false)]
        public bool? HasErrors { get; set; }

        /// <summary>
        /// ID of Run Context
        /// </summary>
        /// <value>ID of Run Context</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// One of BASELINE_NEW, CHECK or BASELINE_ALL indicating rule run type of the task.
        /// </summary>
        /// <value>One of BASELINE_NEW, CHECK or BASELINE_ALL indicating rule run type of the task.</value>
        [DataMember(Name="runType", EmitDefaultValue=false)]
        public string RunType { get; set; }

        /// <summary>
        /// Time at which the task began executing
        /// </summary>
        /// <value>Time at which the task began executing</value>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public string StartTime { get; set; }

        /// <summary>
        /// One of MANUAL, TIMEOUT, or NORMAL, indicating if the task was cancelled by the user, exceeded allowed duration, or finished as expected
        /// </summary>
        /// <value>One of MANUAL, TIMEOUT, or NORMAL, indicating if the task was cancelled by the user, exceeded allowed duration, or finished as expected</value>
        [DataMember(Name="stopType", EmitDefaultValue=false)]
        public string StopType { get; set; }

        /// <summary>
        /// ID of Task
        /// </summary>
        /// <value>ID of Task</value>
        [DataMember(Name="taskId", EmitDefaultValue=false)]
        public string TaskId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RunContext {\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  HasErrors: ").Append(HasErrors).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RunType: ").Append(RunType).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  StopType: ").Append(StopType).Append("\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RunContext);
        }

        /// <summary>
        /// Returns true if RunContext instances are equal
        /// </summary>
        /// <param name="input">Instance of RunContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RunContext input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.HasErrors == input.HasErrors ||
                    (this.HasErrors != null &&
                    this.HasErrors.Equals(input.HasErrors))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.RunType == input.RunType ||
                    (this.RunType != null &&
                    this.RunType.Equals(input.RunType))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.StopType == input.StopType ||
                    (this.StopType != null &&
                    this.StopType.Equals(input.StopType))
                ) && 
                (
                    this.TaskId == input.TaskId ||
                    (this.TaskId != null &&
                    this.TaskId.Equals(input.TaskId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.HasErrors != null)
                    hashCode = hashCode * 59 + this.HasErrors.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.RunType != null)
                    hashCode = hashCode * 59 + this.RunType.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.StopType != null)
                    hashCode = hashCode * 59 + this.StopType.GetHashCode();
                if (this.TaskId != null)
                    hashCode = hashCode * 59 + this.TaskId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

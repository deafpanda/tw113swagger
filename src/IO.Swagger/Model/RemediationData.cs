/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.13.0.bmaster.r20180119190259-8b60eaa.b1753
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// policy_tests_results_remediation_request.resource.description
    /// </summary>
    [DataContract]
    public partial class RemediationData :  IEquatable<RemediationData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RemediationData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RemediationData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RemediationData" /> class.
        /// </summary>
        /// <param name="approvalComment">Additional meta-data for work order approvals.</param>
        /// <param name="approvalId">Correlation ID for tracking approval of the work order (required).</param>
        /// <param name="deleteWhenComplete">if true, after the work order has finished execution and been closed, it will also be deleted from Tripwire Enterprise (default to false).</param>
        /// <param name="policyTestResultIds">The list of policy test results to remediate (required).</param>
        public RemediationData(string approvalComment = default(string), string approvalId = default(string), bool? deleteWhenComplete = false, List<string> policyTestResultIds = default(List<string>))
        {
            // to ensure "approvalId" is required (not null)
            if (approvalId == null)
            {
                throw new InvalidDataException("approvalId is a required property for RemediationData and cannot be null");
            }
            else
            {
                this.ApprovalId = approvalId;
            }
            // to ensure "policyTestResultIds" is required (not null)
            if (policyTestResultIds == null)
            {
                throw new InvalidDataException("policyTestResultIds is a required property for RemediationData and cannot be null");
            }
            else
            {
                this.PolicyTestResultIds = policyTestResultIds;
            }
            this.ApprovalComment = approvalComment;
            // use default value if no "deleteWhenComplete" provided
            if (deleteWhenComplete == null)
            {
                this.DeleteWhenComplete = false;
            }
            else
            {
                this.DeleteWhenComplete = deleteWhenComplete;
            }
        }
        
        /// <summary>
        /// Additional meta-data for work order approvals
        /// </summary>
        /// <value>Additional meta-data for work order approvals</value>
        [DataMember(Name="approvalComment", EmitDefaultValue=false)]
        public string ApprovalComment { get; set; }

        /// <summary>
        /// Correlation ID for tracking approval of the work order
        /// </summary>
        /// <value>Correlation ID for tracking approval of the work order</value>
        [DataMember(Name="approvalId", EmitDefaultValue=false)]
        public string ApprovalId { get; set; }

        /// <summary>
        /// if true, after the work order has finished execution and been closed, it will also be deleted from Tripwire Enterprise
        /// </summary>
        /// <value>if true, after the work order has finished execution and been closed, it will also be deleted from Tripwire Enterprise</value>
        [DataMember(Name="deleteWhenComplete", EmitDefaultValue=false)]
        public bool? DeleteWhenComplete { get; set; }

        /// <summary>
        /// The list of policy test results to remediate
        /// </summary>
        /// <value>The list of policy test results to remediate</value>
        [DataMember(Name="policyTestResultIds", EmitDefaultValue=false)]
        public List<string> PolicyTestResultIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RemediationData {\n");
            sb.Append("  ApprovalComment: ").Append(ApprovalComment).Append("\n");
            sb.Append("  ApprovalId: ").Append(ApprovalId).Append("\n");
            sb.Append("  DeleteWhenComplete: ").Append(DeleteWhenComplete).Append("\n");
            sb.Append("  PolicyTestResultIds: ").Append(PolicyTestResultIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RemediationData);
        }

        /// <summary>
        /// Returns true if RemediationData instances are equal
        /// </summary>
        /// <param name="input">Instance of RemediationData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RemediationData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApprovalComment == input.ApprovalComment ||
                    (this.ApprovalComment != null &&
                    this.ApprovalComment.Equals(input.ApprovalComment))
                ) && 
                (
                    this.ApprovalId == input.ApprovalId ||
                    (this.ApprovalId != null &&
                    this.ApprovalId.Equals(input.ApprovalId))
                ) && 
                (
                    this.DeleteWhenComplete == input.DeleteWhenComplete ||
                    (this.DeleteWhenComplete != null &&
                    this.DeleteWhenComplete.Equals(input.DeleteWhenComplete))
                ) && 
                (
                    this.PolicyTestResultIds == input.PolicyTestResultIds ||
                    this.PolicyTestResultIds != null &&
                    this.PolicyTestResultIds.SequenceEqual(input.PolicyTestResultIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApprovalComment != null)
                    hashCode = hashCode * 59 + this.ApprovalComment.GetHashCode();
                if (this.ApprovalId != null)
                    hashCode = hashCode * 59 + this.ApprovalId.GetHashCode();
                if (this.DeleteWhenComplete != null)
                    hashCode = hashCode * 59 + this.DeleteWhenComplete.GetHashCode();
                if (this.PolicyTestResultIds != null)
                    hashCode = hashCode * 59 + this.PolicyTestResultIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

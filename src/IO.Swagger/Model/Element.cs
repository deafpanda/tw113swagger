/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.12.1.bmaster.r20170922182356-4e84151.b1741
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// An element version describes a change detected by Tripwire Enterprise.
    /// </summary>
    [DataContract]
    public partial class Element :  IEquatable<Element>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Element" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Element() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Element" /> class.
        /// </summary>
        /// <param name="id">Readable-Key identity of the element (required).</param>
        /// <param name="name">element.resource.parameters.elementName.description (required).</param>
        /// <param name="nodeId">Readable-Key identity of the node (required).</param>
        /// <param name="ruleId">Readable-Key identity of the rule (required).</param>
        public Element(string id = default(string), string name = default(string), string nodeId = default(string), string ruleId = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Element and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Element and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "nodeId" is required (not null)
            if (nodeId == null)
            {
                throw new InvalidDataException("nodeId is a required property for Element and cannot be null");
            }
            else
            {
                this.NodeId = nodeId;
            }
            // to ensure "ruleId" is required (not null)
            if (ruleId == null)
            {
                throw new InvalidDataException("ruleId is a required property for Element and cannot be null");
            }
            else
            {
                this.RuleId = ruleId;
            }
        }
        
        /// <summary>
        /// Readable-Key identity of the element
        /// </summary>
        /// <value>Readable-Key identity of the element</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// element.resource.parameters.elementName.description
        /// </summary>
        /// <value>element.resource.parameters.elementName.description</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Readable-Key identity of the node
        /// </summary>
        /// <value>Readable-Key identity of the node</value>
        [DataMember(Name="nodeId", EmitDefaultValue=false)]
        public string NodeId { get; set; }

        /// <summary>
        /// Readable-Key identity of the rule
        /// </summary>
        /// <value>Readable-Key identity of the rule</value>
        [DataMember(Name="ruleId", EmitDefaultValue=false)]
        public string RuleId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Element {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NodeId: ").Append(NodeId).Append("\n");
            sb.Append("  RuleId: ").Append(RuleId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Element);
        }

        /// <summary>
        /// Returns true if Element instances are equal
        /// </summary>
        /// <param name="input">Instance of Element to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Element input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NodeId == input.NodeId ||
                    (this.NodeId != null &&
                    this.NodeId.Equals(input.NodeId))
                ) && 
                (
                    this.RuleId == input.RuleId ||
                    (this.RuleId != null &&
                    this.RuleId.Equals(input.RuleId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.NodeId != null)
                    hashCode = hashCode * 59 + this.NodeId.GetHashCode();
                if (this.RuleId != null)
                    hashCode = hashCode * 59 + this.RuleId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

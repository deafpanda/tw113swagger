/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.13.0.bmaster.r20180119190259-8b60eaa.b1753
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Policy tests describe mechanisms and criteria for evaluating detected changes for policy compliance.
    /// </summary>
    [DataContract]
    public partial class PolicyTest :  IEquatable<PolicyTest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PolicyTest" /> class.
        /// </summary>
        /// <param name="description">Description of the policy test.</param>
        /// <param name="elementNameConditions">Element name conditions of the version test.</param>
        /// <param name="id">Readable-key identity of the policy test.</param>
        /// <param name="importedTime">Timestamp indicating the last time this policy test was imported.</param>
        /// <param name="modifiedTime">Timestamp indicating the last time this policy test was modified.</param>
        /// <param name="name">Name of the policy test.</param>
        /// <param name="rules">List of rules of the version test.</param>
        /// <param name="severity">Unsigned integer that indicates the severity level of the policy test.</param>
        /// <param name="trackingId">An ID for the policy test that is tracked across exports and imports.</param>
        /// <param name="type">Type of version test.</param>
        /// <param name="versionConditions">Version conditions of the version test.</param>
        public PolicyTest(string description = default(string), string elementNameConditions = default(string), string id = default(string), string importedTime = default(string), string modifiedTime = default(string), string name = default(string), List<string> rules = default(List<string>), int? severity = default(int?), string trackingId = default(string), string type = default(string), string versionConditions = default(string))
        {
            this.Description = description;
            this.ElementNameConditions = elementNameConditions;
            this.Id = id;
            this.ImportedTime = importedTime;
            this.ModifiedTime = modifiedTime;
            this.Name = name;
            this.Rules = rules;
            this.Severity = severity;
            this.TrackingId = trackingId;
            this.Type = type;
            this.VersionConditions = versionConditions;
        }
        
        /// <summary>
        /// Description of the policy test
        /// </summary>
        /// <value>Description of the policy test</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Element name conditions of the version test
        /// </summary>
        /// <value>Element name conditions of the version test</value>
        [DataMember(Name="elementNameConditions", EmitDefaultValue=false)]
        public string ElementNameConditions { get; set; }

        /// <summary>
        /// Readable-key identity of the policy test
        /// </summary>
        /// <value>Readable-key identity of the policy test</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Timestamp indicating the last time this policy test was imported
        /// </summary>
        /// <value>Timestamp indicating the last time this policy test was imported</value>
        [DataMember(Name="importedTime", EmitDefaultValue=false)]
        public string ImportedTime { get; set; }

        /// <summary>
        /// Timestamp indicating the last time this policy test was modified
        /// </summary>
        /// <value>Timestamp indicating the last time this policy test was modified</value>
        [DataMember(Name="modifiedTime", EmitDefaultValue=false)]
        public string ModifiedTime { get; set; }

        /// <summary>
        /// Name of the policy test
        /// </summary>
        /// <value>Name of the policy test</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// List of rules of the version test
        /// </summary>
        /// <value>List of rules of the version test</value>
        [DataMember(Name="rules", EmitDefaultValue=false)]
        public List<string> Rules { get; set; }

        /// <summary>
        /// Unsigned integer that indicates the severity level of the policy test
        /// </summary>
        /// <value>Unsigned integer that indicates the severity level of the policy test</value>
        [DataMember(Name="severity", EmitDefaultValue=false)]
        public int? Severity { get; set; }

        /// <summary>
        /// An ID for the policy test that is tracked across exports and imports
        /// </summary>
        /// <value>An ID for the policy test that is tracked across exports and imports</value>
        [DataMember(Name="trackingId", EmitDefaultValue=false)]
        public string TrackingId { get; set; }

        /// <summary>
        /// Type of version test
        /// </summary>
        /// <value>Type of version test</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Version conditions of the version test
        /// </summary>
        /// <value>Version conditions of the version test</value>
        [DataMember(Name="versionConditions", EmitDefaultValue=false)]
        public string VersionConditions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PolicyTest {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ElementNameConditions: ").Append(ElementNameConditions).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImportedTime: ").Append(ImportedTime).Append("\n");
            sb.Append("  ModifiedTime: ").Append(ModifiedTime).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Rules: ").Append(Rules).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  TrackingId: ").Append(TrackingId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  VersionConditions: ").Append(VersionConditions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PolicyTest);
        }

        /// <summary>
        /// Returns true if PolicyTest instances are equal
        /// </summary>
        /// <param name="input">Instance of PolicyTest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PolicyTest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ElementNameConditions == input.ElementNameConditions ||
                    (this.ElementNameConditions != null &&
                    this.ElementNameConditions.Equals(input.ElementNameConditions))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ImportedTime == input.ImportedTime ||
                    (this.ImportedTime != null &&
                    this.ImportedTime.Equals(input.ImportedTime))
                ) && 
                (
                    this.ModifiedTime == input.ModifiedTime ||
                    (this.ModifiedTime != null &&
                    this.ModifiedTime.Equals(input.ModifiedTime))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Rules == input.Rules ||
                    this.Rules != null &&
                    this.Rules.SequenceEqual(input.Rules)
                ) && 
                (
                    this.Severity == input.Severity ||
                    (this.Severity != null &&
                    this.Severity.Equals(input.Severity))
                ) && 
                (
                    this.TrackingId == input.TrackingId ||
                    (this.TrackingId != null &&
                    this.TrackingId.Equals(input.TrackingId))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.VersionConditions == input.VersionConditions ||
                    (this.VersionConditions != null &&
                    this.VersionConditions.Equals(input.VersionConditions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ElementNameConditions != null)
                    hashCode = hashCode * 59 + this.ElementNameConditions.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ImportedTime != null)
                    hashCode = hashCode * 59 + this.ImportedTime.GetHashCode();
                if (this.ModifiedTime != null)
                    hashCode = hashCode * 59 + this.ModifiedTime.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Rules != null)
                    hashCode = hashCode * 59 + this.Rules.GetHashCode();
                if (this.Severity != null)
                    hashCode = hashCode * 59 + this.Severity.GetHashCode();
                if (this.TrackingId != null)
                    hashCode = hashCode * 59 + this.TrackingId.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.VersionConditions != null)
                    hashCode = hashCode * 59 + this.VersionConditions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.13.0.bmaster.r20180119190259-8b60eaa.b1753
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Task run context node rule
    /// </summary>
    [DataContract]
    public partial class RunContextNodeRule :  IEquatable<RunContextNodeRule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RunContextNodeRule" /> class.
        /// </summary>
        /// <param name="agentType">One of CAP, JAVA, or NDI.</param>
        /// <param name="contextId">Id of rule run context.</param>
        /// <param name="endTime">Time at which the task completed or was cancelled.</param>
        /// <param name="hasErrors">True if rule execution encountered an error (default to false).</param>
        /// <param name="hasTimeout">True if rule timed out executing on node (default to false).</param>
        /// <param name="lastUpdated">Time the status record was last updated.</param>
        /// <param name="nodeId">Id of the node.</param>
        /// <param name="receivedEnd">True if status of rule execution on the node is complete (default to false).</param>
        /// <param name="ruleId">Id of the rule.</param>
        /// <param name="runType">One of BASELINE_NEW, CHECK or BASELINE_ALL indicating actual rule run type of the task..</param>
        /// <param name="startTime">Time at which the task began executing.</param>
        /// <param name="wasCancelled">True if task was cancelled before rule completed on the node (default to false).</param>
        public RunContextNodeRule(string agentType = default(string), string contextId = default(string), string endTime = default(string), bool? hasErrors = false, bool? hasTimeout = false, string lastUpdated = default(string), string nodeId = default(string), bool? receivedEnd = false, string ruleId = default(string), string runType = default(string), string startTime = default(string), bool? wasCancelled = false)
        {
            this.AgentType = agentType;
            this.ContextId = contextId;
            this.EndTime = endTime;
            // use default value if no "hasErrors" provided
            if (hasErrors == null)
            {
                this.HasErrors = false;
            }
            else
            {
                this.HasErrors = hasErrors;
            }
            // use default value if no "hasTimeout" provided
            if (hasTimeout == null)
            {
                this.HasTimeout = false;
            }
            else
            {
                this.HasTimeout = hasTimeout;
            }
            this.LastUpdated = lastUpdated;
            this.NodeId = nodeId;
            // use default value if no "receivedEnd" provided
            if (receivedEnd == null)
            {
                this.ReceivedEnd = false;
            }
            else
            {
                this.ReceivedEnd = receivedEnd;
            }
            this.RuleId = ruleId;
            this.RunType = runType;
            this.StartTime = startTime;
            // use default value if no "wasCancelled" provided
            if (wasCancelled == null)
            {
                this.WasCancelled = false;
            }
            else
            {
                this.WasCancelled = wasCancelled;
            }
        }
        
        /// <summary>
        /// One of CAP, JAVA, or NDI
        /// </summary>
        /// <value>One of CAP, JAVA, or NDI</value>
        [DataMember(Name="agentType", EmitDefaultValue=false)]
        public string AgentType { get; set; }

        /// <summary>
        /// Id of rule run context
        /// </summary>
        /// <value>Id of rule run context</value>
        [DataMember(Name="contextId", EmitDefaultValue=false)]
        public string ContextId { get; set; }

        /// <summary>
        /// Time at which the task completed or was cancelled
        /// </summary>
        /// <value>Time at which the task completed or was cancelled</value>
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public string EndTime { get; set; }

        /// <summary>
        /// True if rule execution encountered an error
        /// </summary>
        /// <value>True if rule execution encountered an error</value>
        [DataMember(Name="hasErrors", EmitDefaultValue=false)]
        public bool? HasErrors { get; set; }

        /// <summary>
        /// True if rule timed out executing on node
        /// </summary>
        /// <value>True if rule timed out executing on node</value>
        [DataMember(Name="hasTimeout", EmitDefaultValue=false)]
        public bool? HasTimeout { get; set; }

        /// <summary>
        /// Time the status record was last updated
        /// </summary>
        /// <value>Time the status record was last updated</value>
        [DataMember(Name="lastUpdated", EmitDefaultValue=false)]
        public string LastUpdated { get; set; }

        /// <summary>
        /// Id of the node
        /// </summary>
        /// <value>Id of the node</value>
        [DataMember(Name="nodeId", EmitDefaultValue=false)]
        public string NodeId { get; set; }

        /// <summary>
        /// True if status of rule execution on the node is complete
        /// </summary>
        /// <value>True if status of rule execution on the node is complete</value>
        [DataMember(Name="receivedEnd", EmitDefaultValue=false)]
        public bool? ReceivedEnd { get; set; }

        /// <summary>
        /// Id of the rule
        /// </summary>
        /// <value>Id of the rule</value>
        [DataMember(Name="ruleId", EmitDefaultValue=false)]
        public string RuleId { get; set; }

        /// <summary>
        /// One of BASELINE_NEW, CHECK or BASELINE_ALL indicating actual rule run type of the task.
        /// </summary>
        /// <value>One of BASELINE_NEW, CHECK or BASELINE_ALL indicating actual rule run type of the task.</value>
        [DataMember(Name="runType", EmitDefaultValue=false)]
        public string RunType { get; set; }

        /// <summary>
        /// Time at which the task began executing
        /// </summary>
        /// <value>Time at which the task began executing</value>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public string StartTime { get; set; }

        /// <summary>
        /// True if task was cancelled before rule completed on the node
        /// </summary>
        /// <value>True if task was cancelled before rule completed on the node</value>
        [DataMember(Name="wasCancelled", EmitDefaultValue=false)]
        public bool? WasCancelled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RunContextNodeRule {\n");
            sb.Append("  AgentType: ").Append(AgentType).Append("\n");
            sb.Append("  ContextId: ").Append(ContextId).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  HasErrors: ").Append(HasErrors).Append("\n");
            sb.Append("  HasTimeout: ").Append(HasTimeout).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("  NodeId: ").Append(NodeId).Append("\n");
            sb.Append("  ReceivedEnd: ").Append(ReceivedEnd).Append("\n");
            sb.Append("  RuleId: ").Append(RuleId).Append("\n");
            sb.Append("  RunType: ").Append(RunType).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  WasCancelled: ").Append(WasCancelled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RunContextNodeRule);
        }

        /// <summary>
        /// Returns true if RunContextNodeRule instances are equal
        /// </summary>
        /// <param name="input">Instance of RunContextNodeRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RunContextNodeRule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AgentType == input.AgentType ||
                    (this.AgentType != null &&
                    this.AgentType.Equals(input.AgentType))
                ) && 
                (
                    this.ContextId == input.ContextId ||
                    (this.ContextId != null &&
                    this.ContextId.Equals(input.ContextId))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.HasErrors == input.HasErrors ||
                    (this.HasErrors != null &&
                    this.HasErrors.Equals(input.HasErrors))
                ) && 
                (
                    this.HasTimeout == input.HasTimeout ||
                    (this.HasTimeout != null &&
                    this.HasTimeout.Equals(input.HasTimeout))
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                ) && 
                (
                    this.NodeId == input.NodeId ||
                    (this.NodeId != null &&
                    this.NodeId.Equals(input.NodeId))
                ) && 
                (
                    this.ReceivedEnd == input.ReceivedEnd ||
                    (this.ReceivedEnd != null &&
                    this.ReceivedEnd.Equals(input.ReceivedEnd))
                ) && 
                (
                    this.RuleId == input.RuleId ||
                    (this.RuleId != null &&
                    this.RuleId.Equals(input.RuleId))
                ) && 
                (
                    this.RunType == input.RunType ||
                    (this.RunType != null &&
                    this.RunType.Equals(input.RunType))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.WasCancelled == input.WasCancelled ||
                    (this.WasCancelled != null &&
                    this.WasCancelled.Equals(input.WasCancelled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AgentType != null)
                    hashCode = hashCode * 59 + this.AgentType.GetHashCode();
                if (this.ContextId != null)
                    hashCode = hashCode * 59 + this.ContextId.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.HasErrors != null)
                    hashCode = hashCode * 59 + this.HasErrors.GetHashCode();
                if (this.HasTimeout != null)
                    hashCode = hashCode * 59 + this.HasTimeout.GetHashCode();
                if (this.LastUpdated != null)
                    hashCode = hashCode * 59 + this.LastUpdated.GetHashCode();
                if (this.NodeId != null)
                    hashCode = hashCode * 59 + this.NodeId.GetHashCode();
                if (this.ReceivedEnd != null)
                    hashCode = hashCode * 59 + this.ReceivedEnd.GetHashCode();
                if (this.RuleId != null)
                    hashCode = hashCode * 59 + this.RuleId.GetHashCode();
                if (this.RunType != null)
                    hashCode = hashCode * 59 + this.RunType.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.WasCancelled != null)
                    hashCode = hashCode * 59 + this.WasCancelled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

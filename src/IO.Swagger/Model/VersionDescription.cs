/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.13.0.bmaster.r20180119190259-8b60eaa.b1753
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The description of an element version
    /// </summary>
    [DataContract]
    public partial class VersionDescription :  IEquatable<VersionDescription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VersionDescription" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VersionDescription() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VersionDescription" /> class.
        /// </summary>
        /// <param name="attributes">The optional attributes map of an element version.</param>
        /// <param name="changeType">The change type for this version: BASELINE, ADDED, MODIFIED, REMOVED. Default is MODIFIED.</param>
        /// <param name="content">The optional content aspect of an element version.</param>
        /// <param name="contentBase64">The API will decode this field and use the result as the element version content.</param>
        /// <param name="elementName">The name of the element (required).</param>
        /// <param name="exists">If false, indicates that the element represents something that was expected but missing. Default is true (default to false).</param>
        /// <param name="severity">A required value from 0 to 10000, indicating the severity of the change. 0 indicates no severity (required).</param>
        /// <param name="timeDetected">The timestamp indicating when the data was harvested (required).</param>
        public VersionDescription(Object attributes = default(Object), string changeType = default(string), string content = default(string), string contentBase64 = default(string), string elementName = default(string), bool? exists = false, int? severity = default(int?), string timeDetected = default(string))
        {
            // to ensure "elementName" is required (not null)
            if (elementName == null)
            {
                throw new InvalidDataException("elementName is a required property for VersionDescription and cannot be null");
            }
            else
            {
                this.ElementName = elementName;
            }
            // to ensure "severity" is required (not null)
            if (severity == null)
            {
                throw new InvalidDataException("severity is a required property for VersionDescription and cannot be null");
            }
            else
            {
                this.Severity = severity;
            }
            // to ensure "timeDetected" is required (not null)
            if (timeDetected == null)
            {
                throw new InvalidDataException("timeDetected is a required property for VersionDescription and cannot be null");
            }
            else
            {
                this.TimeDetected = timeDetected;
            }
            this.Attributes = attributes;
            this.ChangeType = changeType;
            this.Content = content;
            this.ContentBase64 = contentBase64;
            // use default value if no "exists" provided
            if (exists == null)
            {
                this.Exists = false;
            }
            else
            {
                this.Exists = exists;
            }
        }
        
        /// <summary>
        /// The optional attributes map of an element version
        /// </summary>
        /// <value>The optional attributes map of an element version</value>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public Object Attributes { get; set; }

        /// <summary>
        /// The change type for this version: BASELINE, ADDED, MODIFIED, REMOVED. Default is MODIFIED
        /// </summary>
        /// <value>The change type for this version: BASELINE, ADDED, MODIFIED, REMOVED. Default is MODIFIED</value>
        [DataMember(Name="changeType", EmitDefaultValue=false)]
        public string ChangeType { get; set; }

        /// <summary>
        /// The optional content aspect of an element version
        /// </summary>
        /// <value>The optional content aspect of an element version</value>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public string Content { get; set; }

        /// <summary>
        /// The API will decode this field and use the result as the element version content
        /// </summary>
        /// <value>The API will decode this field and use the result as the element version content</value>
        [DataMember(Name="contentBase64", EmitDefaultValue=false)]
        public string ContentBase64 { get; set; }

        /// <summary>
        /// The name of the element
        /// </summary>
        /// <value>The name of the element</value>
        [DataMember(Name="elementName", EmitDefaultValue=false)]
        public string ElementName { get; set; }

        /// <summary>
        /// If false, indicates that the element represents something that was expected but missing. Default is true
        /// </summary>
        /// <value>If false, indicates that the element represents something that was expected but missing. Default is true</value>
        [DataMember(Name="exists", EmitDefaultValue=false)]
        public bool? Exists { get; set; }

        /// <summary>
        /// A required value from 0 to 10000, indicating the severity of the change. 0 indicates no severity
        /// </summary>
        /// <value>A required value from 0 to 10000, indicating the severity of the change. 0 indicates no severity</value>
        [DataMember(Name="severity", EmitDefaultValue=false)]
        public int? Severity { get; set; }

        /// <summary>
        /// The timestamp indicating when the data was harvested
        /// </summary>
        /// <value>The timestamp indicating when the data was harvested</value>
        [DataMember(Name="timeDetected", EmitDefaultValue=false)]
        public string TimeDetected { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VersionDescription {\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  ChangeType: ").Append(ChangeType).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  ContentBase64: ").Append(ContentBase64).Append("\n");
            sb.Append("  ElementName: ").Append(ElementName).Append("\n");
            sb.Append("  Exists: ").Append(Exists).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  TimeDetected: ").Append(TimeDetected).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VersionDescription);
        }

        /// <summary>
        /// Returns true if VersionDescription instances are equal
        /// </summary>
        /// <param name="input">Instance of VersionDescription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VersionDescription input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Attributes == input.Attributes ||
                    (this.Attributes != null &&
                    this.Attributes.Equals(input.Attributes))
                ) && 
                (
                    this.ChangeType == input.ChangeType ||
                    (this.ChangeType != null &&
                    this.ChangeType.Equals(input.ChangeType))
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.ContentBase64 == input.ContentBase64 ||
                    (this.ContentBase64 != null &&
                    this.ContentBase64.Equals(input.ContentBase64))
                ) && 
                (
                    this.ElementName == input.ElementName ||
                    (this.ElementName != null &&
                    this.ElementName.Equals(input.ElementName))
                ) && 
                (
                    this.Exists == input.Exists ||
                    (this.Exists != null &&
                    this.Exists.Equals(input.Exists))
                ) && 
                (
                    this.Severity == input.Severity ||
                    (this.Severity != null &&
                    this.Severity.Equals(input.Severity))
                ) && 
                (
                    this.TimeDetected == input.TimeDetected ||
                    (this.TimeDetected != null &&
                    this.TimeDetected.Equals(input.TimeDetected))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.ChangeType != null)
                    hashCode = hashCode * 59 + this.ChangeType.GetHashCode();
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                if (this.ContentBase64 != null)
                    hashCode = hashCode * 59 + this.ContentBase64.GetHashCode();
                if (this.ElementName != null)
                    hashCode = hashCode * 59 + this.ElementName.GetHashCode();
                if (this.Exists != null)
                    hashCode = hashCode * 59 + this.Exists.GetHashCode();
                if (this.Severity != null)
                    hashCode = hashCode * 59 + this.Severity.GetHashCode();
                if (this.TimeDetected != null)
                    hashCode = hashCode * 59 + this.TimeDetected.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

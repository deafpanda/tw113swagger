/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.13.0.bmaster.r20180119190259-8b60eaa.b1753
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Identifies a single node and policy test that should be waived.
    /// </summary>
    [DataContract]
    public partial class PolicyTestNodeWaiver :  IEquatable<PolicyTestNodeWaiver>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PolicyTestNodeWaiver" /> class.
        /// </summary>
        /// <param name="nodeId">Identity of the waived node..</param>
        /// <param name="policyTestId">Identity of the waived policy test..</param>
        public PolicyTestNodeWaiver(string nodeId = default(string), string policyTestId = default(string))
        {
            this.NodeId = nodeId;
            this.PolicyTestId = policyTestId;
        }
        
        /// <summary>
        /// Identity of the waived node.
        /// </summary>
        /// <value>Identity of the waived node.</value>
        [DataMember(Name="nodeId", EmitDefaultValue=false)]
        public string NodeId { get; set; }

        /// <summary>
        /// Identity of the waived policy test.
        /// </summary>
        /// <value>Identity of the waived policy test.</value>
        [DataMember(Name="policyTestId", EmitDefaultValue=false)]
        public string PolicyTestId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PolicyTestNodeWaiver {\n");
            sb.Append("  NodeId: ").Append(NodeId).Append("\n");
            sb.Append("  PolicyTestId: ").Append(PolicyTestId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PolicyTestNodeWaiver);
        }

        /// <summary>
        /// Returns true if PolicyTestNodeWaiver instances are equal
        /// </summary>
        /// <param name="input">Instance of PolicyTestNodeWaiver to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PolicyTestNodeWaiver input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NodeId == input.NodeId ||
                    (this.NodeId != null &&
                    this.NodeId.Equals(input.NodeId))
                ) && 
                (
                    this.PolicyTestId == input.PolicyTestId ||
                    (this.PolicyTestId != null &&
                    this.PolicyTestId.Equals(input.PolicyTestId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NodeId != null)
                    hashCode = hashCode * 59 + this.NodeId.GetHashCode();
                if (this.PolicyTestId != null)
                    hashCode = hashCode * 59 + this.PolicyTestId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

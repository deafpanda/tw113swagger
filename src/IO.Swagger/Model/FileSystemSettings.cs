/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.12.1.bmaster.r20170922182356-4e84151.b1741
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Settings controlling how file systems are monitored
    /// </summary>
    [DataContract]
    public partial class FileSystemSettings :  IEquatable<FileSystemSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileSystemSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FileSystemSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FileSystemSettings" /> class.
        /// </summary>
        /// <param name="enablePackageAssociation">if true, enables collection of installed software packages for association to elements (required) (default to false).</param>
        /// <param name="resetWindowsAccessTime">If true, suppress windows update of file system access times as the Tripwire agent scans the files for change. (required) (default to false).</param>
        /// <param name="maxArchivedContentSize">Size in Kbytes limiting archived element version content harvesting. Valid range: 1 - 99999 (required).</param>
        public FileSystemSettings(bool? enablePackageAssociation = false, bool? resetWindowsAccessTime = false, long? maxArchivedContentSize = default(long?))
        {
            // to ensure "enablePackageAssociation" is required (not null)
            if (enablePackageAssociation == null)
            {
                throw new InvalidDataException("enablePackageAssociation is a required property for FileSystemSettings and cannot be null");
            }
            else
            {
                this.EnablePackageAssociation = enablePackageAssociation;
            }
            // to ensure "resetWindowsAccessTime" is required (not null)
            if (resetWindowsAccessTime == null)
            {
                throw new InvalidDataException("resetWindowsAccessTime is a required property for FileSystemSettings and cannot be null");
            }
            else
            {
                this.ResetWindowsAccessTime = resetWindowsAccessTime;
            }
            // to ensure "maxArchivedContentSize" is required (not null)
            if (maxArchivedContentSize == null)
            {
                throw new InvalidDataException("maxArchivedContentSize is a required property for FileSystemSettings and cannot be null");
            }
            else
            {
                this.MaxArchivedContentSize = maxArchivedContentSize;
            }
        }
        
        /// <summary>
        /// if true, enables collection of installed software packages for association to elements
        /// </summary>
        /// <value>if true, enables collection of installed software packages for association to elements</value>
        [DataMember(Name="enablePackageAssociation", EmitDefaultValue=false)]
        public bool? EnablePackageAssociation { get; set; }

        /// <summary>
        /// If true, suppress windows update of file system access times as the Tripwire agent scans the files for change.
        /// </summary>
        /// <value>If true, suppress windows update of file system access times as the Tripwire agent scans the files for change.</value>
        [DataMember(Name="resetWindowsAccessTime", EmitDefaultValue=false)]
        public bool? ResetWindowsAccessTime { get; set; }

        /// <summary>
        /// Size in Kbytes limiting archived element version content harvesting. Valid range: 1 - 99999
        /// </summary>
        /// <value>Size in Kbytes limiting archived element version content harvesting. Valid range: 1 - 99999</value>
        [DataMember(Name="maxArchivedContentSize", EmitDefaultValue=false)]
        public long? MaxArchivedContentSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileSystemSettings {\n");
            sb.Append("  EnablePackageAssociation: ").Append(EnablePackageAssociation).Append("\n");
            sb.Append("  ResetWindowsAccessTime: ").Append(ResetWindowsAccessTime).Append("\n");
            sb.Append("  MaxArchivedContentSize: ").Append(MaxArchivedContentSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileSystemSettings);
        }

        /// <summary>
        /// Returns true if FileSystemSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of FileSystemSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileSystemSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EnablePackageAssociation == input.EnablePackageAssociation ||
                    (this.EnablePackageAssociation != null &&
                    this.EnablePackageAssociation.Equals(input.EnablePackageAssociation))
                ) && 
                (
                    this.ResetWindowsAccessTime == input.ResetWindowsAccessTime ||
                    (this.ResetWindowsAccessTime != null &&
                    this.ResetWindowsAccessTime.Equals(input.ResetWindowsAccessTime))
                ) && 
                (
                    this.MaxArchivedContentSize == input.MaxArchivedContentSize ||
                    (this.MaxArchivedContentSize != null &&
                    this.MaxArchivedContentSize.Equals(input.MaxArchivedContentSize))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EnablePackageAssociation != null)
                    hashCode = hashCode * 59 + this.EnablePackageAssociation.GetHashCode();
                if (this.ResetWindowsAccessTime != null)
                    hashCode = hashCode * 59 + this.ResetWindowsAccessTime.GetHashCode();
                if (this.MaxArchivedContentSize != null)
                    hashCode = hashCode * 59 + this.MaxArchivedContentSize.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

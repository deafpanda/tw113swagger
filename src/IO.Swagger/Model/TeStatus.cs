/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.13.0.bmaster.r20180119190259-8b60eaa.b1753
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TE status describes the identifying information for the TE system that the API client is connecting to.
    /// </summary>
    [DataContract]
    public partial class TeStatus :  IEquatable<TeStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TeStatus" /> class.
        /// </summary>
        /// <param name="apiVersion">The version of this API module.</param>
        /// <param name="hostname">Host name of the Tripwire Enterprise server.</param>
        /// <param name="interfaces">The list of network interfaces of the Tripwire Enterprise server.</param>
        /// <param name="serverAddress">The ip address of the Tripwire Enterprise server.</param>
        /// <param name="teUuid">The UUID for this installation of Tripwire Enterprise.</param>
        /// <param name="teVersion">The version of this installation of Tripwire Enterprise.</param>
        public TeStatus(string apiVersion = default(string), string hostname = default(string), List<NetworkInterface> interfaces = default(List<NetworkInterface>), string serverAddress = default(string), string teUuid = default(string), string teVersion = default(string))
        {
            this.ApiVersion = apiVersion;
            this.Hostname = hostname;
            this.Interfaces = interfaces;
            this.ServerAddress = serverAddress;
            this.TeUuid = teUuid;
            this.TeVersion = teVersion;
        }
        
        /// <summary>
        /// The version of this API module
        /// </summary>
        /// <value>The version of this API module</value>
        [DataMember(Name="apiVersion", EmitDefaultValue=false)]
        public string ApiVersion { get; set; }

        /// <summary>
        /// Host name of the Tripwire Enterprise server
        /// </summary>
        /// <value>Host name of the Tripwire Enterprise server</value>
        [DataMember(Name="hostname", EmitDefaultValue=false)]
        public string Hostname { get; set; }

        /// <summary>
        /// The list of network interfaces of the Tripwire Enterprise server
        /// </summary>
        /// <value>The list of network interfaces of the Tripwire Enterprise server</value>
        [DataMember(Name="interfaces", EmitDefaultValue=false)]
        public List<NetworkInterface> Interfaces { get; set; }

        /// <summary>
        /// The ip address of the Tripwire Enterprise server
        /// </summary>
        /// <value>The ip address of the Tripwire Enterprise server</value>
        [DataMember(Name="serverAddress", EmitDefaultValue=false)]
        public string ServerAddress { get; set; }

        /// <summary>
        /// The UUID for this installation of Tripwire Enterprise
        /// </summary>
        /// <value>The UUID for this installation of Tripwire Enterprise</value>
        [DataMember(Name="teUuid", EmitDefaultValue=false)]
        public string TeUuid { get; set; }

        /// <summary>
        /// The version of this installation of Tripwire Enterprise
        /// </summary>
        /// <value>The version of this installation of Tripwire Enterprise</value>
        [DataMember(Name="teVersion", EmitDefaultValue=false)]
        public string TeVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TeStatus {\n");
            sb.Append("  ApiVersion: ").Append(ApiVersion).Append("\n");
            sb.Append("  Hostname: ").Append(Hostname).Append("\n");
            sb.Append("  Interfaces: ").Append(Interfaces).Append("\n");
            sb.Append("  ServerAddress: ").Append(ServerAddress).Append("\n");
            sb.Append("  TeUuid: ").Append(TeUuid).Append("\n");
            sb.Append("  TeVersion: ").Append(TeVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TeStatus);
        }

        /// <summary>
        /// Returns true if TeStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of TeStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TeStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApiVersion == input.ApiVersion ||
                    (this.ApiVersion != null &&
                    this.ApiVersion.Equals(input.ApiVersion))
                ) && 
                (
                    this.Hostname == input.Hostname ||
                    (this.Hostname != null &&
                    this.Hostname.Equals(input.Hostname))
                ) && 
                (
                    this.Interfaces == input.Interfaces ||
                    this.Interfaces != null &&
                    this.Interfaces.SequenceEqual(input.Interfaces)
                ) && 
                (
                    this.ServerAddress == input.ServerAddress ||
                    (this.ServerAddress != null &&
                    this.ServerAddress.Equals(input.ServerAddress))
                ) && 
                (
                    this.TeUuid == input.TeUuid ||
                    (this.TeUuid != null &&
                    this.TeUuid.Equals(input.TeUuid))
                ) && 
                (
                    this.TeVersion == input.TeVersion ||
                    (this.TeVersion != null &&
                    this.TeVersion.Equals(input.TeVersion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApiVersion != null)
                    hashCode = hashCode * 59 + this.ApiVersion.GetHashCode();
                if (this.Hostname != null)
                    hashCode = hashCode * 59 + this.Hostname.GetHashCode();
                if (this.Interfaces != null)
                    hashCode = hashCode * 59 + this.Interfaces.GetHashCode();
                if (this.ServerAddress != null)
                    hashCode = hashCode * 59 + this.ServerAddress.GetHashCode();
                if (this.TeUuid != null)
                    hashCode = hashCode * 59 + this.TeUuid.GetHashCode();
                if (this.TeVersion != null)
                    hashCode = hashCode * 59 + this.TeVersion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

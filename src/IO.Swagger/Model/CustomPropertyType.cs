/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.13.0.bmaster.r20180119190259-8b60eaa.b1753
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The definition of user defined meta-data that can be attached to select objects in TE. These are appropriate for more detailed meta-data than TE tags and tagsets.
    /// </summary>
    [DataContract]
    public partial class CustomPropertyType :  IEquatable<CustomPropertyType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomPropertyType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomPropertyType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomPropertyType" /> class.
        /// </summary>
        /// <param name="allowMultilineValues">If type is Text, allows multiple lines in value (modifiable). (default to false).</param>
        /// <param name="availableValues">If type is Select, the set of allowable values for the property (modifiable)..</param>
        /// <param name="defaultValue">The default value for inherited properties. For Numeric types, the value must be a number, for date types, the value must be an ISO8601 formatted date, for Select and YesNo types the value must be in the possible values (modifiable). (required).</param>
        /// <param name="description">The description of the property (modifiable)..</param>
        /// <param name="inheritDefault">If true, the default value is considered active when objects are queried by custom properties (modifiable). (required) (default to false).</param>
        /// <param name="maxCharacters">If type is Text, limits the number of characters for the value of the property (modifiable)..</param>
        /// <param name="maxValue">If type is Numeric, the maximum allowed value for the property (modifiable)..</param>
        /// <param name="minValue">If type is Numeric, the minimum allowed value for the property (modifiable)..</param>
        /// <param name="name">The name of the property (modifiable). (required).</param>
        /// <param name="textEditorWidth">If type is Text, provides a UI hint as to the desired width of edit boxes (modifiable)..</param>
        /// <param name="type">One of \&quot;Date\&quot;, \&quot;Numeric\&quot;, \&quot;Select\&quot;, \&quot;Text\&quot;, \&quot;YesNo\&quot;. (required).</param>
        public CustomPropertyType(bool? allowMultilineValues = false, List<string> availableValues = default(List<string>), string defaultValue = default(string), string description = default(string), bool? inheritDefault = false, int? maxCharacters = default(int?), long? maxValue = default(long?), long? minValue = default(long?), string name = default(string), int? textEditorWidth = default(int?), string type = default(string))
        {
            // to ensure "defaultValue" is required (not null)
            if (defaultValue == null)
            {
                throw new InvalidDataException("defaultValue is a required property for CustomPropertyType and cannot be null");
            }
            else
            {
                this.DefaultValue = defaultValue;
            }
            // to ensure "inheritDefault" is required (not null)
            if (inheritDefault == null)
            {
                throw new InvalidDataException("inheritDefault is a required property for CustomPropertyType and cannot be null");
            }
            else
            {
                this.InheritDefault = inheritDefault;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for CustomPropertyType and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for CustomPropertyType and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // use default value if no "allowMultilineValues" provided
            if (allowMultilineValues == null)
            {
                this.AllowMultilineValues = false;
            }
            else
            {
                this.AllowMultilineValues = allowMultilineValues;
            }
            this.AvailableValues = availableValues;
            this.Description = description;
            this.MaxCharacters = maxCharacters;
            this.MaxValue = maxValue;
            this.MinValue = minValue;
            this.TextEditorWidth = textEditorWidth;
        }
        
        /// <summary>
        /// If type is Text, allows multiple lines in value (modifiable).
        /// </summary>
        /// <value>If type is Text, allows multiple lines in value (modifiable).</value>
        [DataMember(Name="allowMultilineValues", EmitDefaultValue=false)]
        public bool? AllowMultilineValues { get; set; }

        /// <summary>
        /// If type is Select, the set of allowable values for the property (modifiable).
        /// </summary>
        /// <value>If type is Select, the set of allowable values for the property (modifiable).</value>
        [DataMember(Name="availableValues", EmitDefaultValue=false)]
        public List<string> AvailableValues { get; set; }

        /// <summary>
        /// The default value for inherited properties. For Numeric types, the value must be a number, for date types, the value must be an ISO8601 formatted date, for Select and YesNo types the value must be in the possible values (modifiable).
        /// </summary>
        /// <value>The default value for inherited properties. For Numeric types, the value must be a number, for date types, the value must be an ISO8601 formatted date, for Select and YesNo types the value must be in the possible values (modifiable).</value>
        [DataMember(Name="defaultValue", EmitDefaultValue=false)]
        public string DefaultValue { get; set; }

        /// <summary>
        /// The description of the property (modifiable).
        /// </summary>
        /// <value>The description of the property (modifiable).</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Readable key of custom property type.
        /// </summary>
        /// <value>Readable key of custom property type.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// If true, the default value is considered active when objects are queried by custom properties (modifiable).
        /// </summary>
        /// <value>If true, the default value is considered active when objects are queried by custom properties (modifiable).</value>
        [DataMember(Name="inheritDefault", EmitDefaultValue=false)]
        public bool? InheritDefault { get; set; }

        /// <summary>
        /// If type is Text, limits the number of characters for the value of the property (modifiable).
        /// </summary>
        /// <value>If type is Text, limits the number of characters for the value of the property (modifiable).</value>
        [DataMember(Name="maxCharacters", EmitDefaultValue=false)]
        public int? MaxCharacters { get; set; }

        /// <summary>
        /// If type is Numeric, the maximum allowed value for the property (modifiable).
        /// </summary>
        /// <value>If type is Numeric, the maximum allowed value for the property (modifiable).</value>
        [DataMember(Name="maxValue", EmitDefaultValue=false)]
        public long? MaxValue { get; set; }

        /// <summary>
        /// If type is Numeric, the minimum allowed value for the property (modifiable).
        /// </summary>
        /// <value>If type is Numeric, the minimum allowed value for the property (modifiable).</value>
        [DataMember(Name="minValue", EmitDefaultValue=false)]
        public long? MinValue { get; set; }

        /// <summary>
        /// The name of the property (modifiable).
        /// </summary>
        /// <value>The name of the property (modifiable).</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// If type is Text, provides a UI hint as to the desired width of edit boxes (modifiable).
        /// </summary>
        /// <value>If type is Text, provides a UI hint as to the desired width of edit boxes (modifiable).</value>
        [DataMember(Name="textEditorWidth", EmitDefaultValue=false)]
        public int? TextEditorWidth { get; set; }

        /// <summary>
        /// One of \&quot;Date\&quot;, \&quot;Numeric\&quot;, \&quot;Select\&quot;, \&quot;Text\&quot;, \&quot;YesNo\&quot;.
        /// </summary>
        /// <value>One of \&quot;Date\&quot;, \&quot;Numeric\&quot;, \&quot;Select\&quot;, \&quot;Text\&quot;, \&quot;YesNo\&quot;.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomPropertyType {\n");
            sb.Append("  AllowMultilineValues: ").Append(AllowMultilineValues).Append("\n");
            sb.Append("  AvailableValues: ").Append(AvailableValues).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InheritDefault: ").Append(InheritDefault).Append("\n");
            sb.Append("  MaxCharacters: ").Append(MaxCharacters).Append("\n");
            sb.Append("  MaxValue: ").Append(MaxValue).Append("\n");
            sb.Append("  MinValue: ").Append(MinValue).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TextEditorWidth: ").Append(TextEditorWidth).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomPropertyType);
        }

        /// <summary>
        /// Returns true if CustomPropertyType instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomPropertyType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomPropertyType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowMultilineValues == input.AllowMultilineValues ||
                    (this.AllowMultilineValues != null &&
                    this.AllowMultilineValues.Equals(input.AllowMultilineValues))
                ) && 
                (
                    this.AvailableValues == input.AvailableValues ||
                    this.AvailableValues != null &&
                    this.AvailableValues.SequenceEqual(input.AvailableValues)
                ) && 
                (
                    this.DefaultValue == input.DefaultValue ||
                    (this.DefaultValue != null &&
                    this.DefaultValue.Equals(input.DefaultValue))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InheritDefault == input.InheritDefault ||
                    (this.InheritDefault != null &&
                    this.InheritDefault.Equals(input.InheritDefault))
                ) && 
                (
                    this.MaxCharacters == input.MaxCharacters ||
                    (this.MaxCharacters != null &&
                    this.MaxCharacters.Equals(input.MaxCharacters))
                ) && 
                (
                    this.MaxValue == input.MaxValue ||
                    (this.MaxValue != null &&
                    this.MaxValue.Equals(input.MaxValue))
                ) && 
                (
                    this.MinValue == input.MinValue ||
                    (this.MinValue != null &&
                    this.MinValue.Equals(input.MinValue))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.TextEditorWidth == input.TextEditorWidth ||
                    (this.TextEditorWidth != null &&
                    this.TextEditorWidth.Equals(input.TextEditorWidth))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllowMultilineValues != null)
                    hashCode = hashCode * 59 + this.AllowMultilineValues.GetHashCode();
                if (this.AvailableValues != null)
                    hashCode = hashCode * 59 + this.AvailableValues.GetHashCode();
                if (this.DefaultValue != null)
                    hashCode = hashCode * 59 + this.DefaultValue.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InheritDefault != null)
                    hashCode = hashCode * 59 + this.InheritDefault.GetHashCode();
                if (this.MaxCharacters != null)
                    hashCode = hashCode * 59 + this.MaxCharacters.GetHashCode();
                if (this.MaxValue != null)
                    hashCode = hashCode * 59 + this.MaxValue.GetHashCode();
                if (this.MinValue != null)
                    hashCode = hashCode * 59 + this.MinValue.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.TextEditorWidth != null)
                    hashCode = hashCode * 59 + this.TextEditorWidth.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.12.1.bmaster.r20170922182356-4e84151.b1741
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Result of Nodes Restart
    /// </summary>
    [DataContract]
    public partial class NodeRestartResult :  IEquatable<NodeRestartResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NodeRestartResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NodeRestartResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NodeRestartResult" /> class.
        /// </summary>
        /// <param name="restarted">The set of nodes that successfully restarted (required).</param>
        /// <param name="failed">The set of nodes that failed to restart (required).</param>
        public NodeRestartResult(List<string> restarted = default(List<string>), List<string> failed = default(List<string>))
        {
            // to ensure "restarted" is required (not null)
            if (restarted == null)
            {
                throw new InvalidDataException("restarted is a required property for NodeRestartResult and cannot be null");
            }
            else
            {
                this.Restarted = restarted;
            }
            // to ensure "failed" is required (not null)
            if (failed == null)
            {
                throw new InvalidDataException("failed is a required property for NodeRestartResult and cannot be null");
            }
            else
            {
                this.Failed = failed;
            }
        }
        
        /// <summary>
        /// The set of nodes that successfully restarted
        /// </summary>
        /// <value>The set of nodes that successfully restarted</value>
        [DataMember(Name="restarted", EmitDefaultValue=false)]
        public List<string> Restarted { get; set; }

        /// <summary>
        /// The set of nodes that failed to restart
        /// </summary>
        /// <value>The set of nodes that failed to restart</value>
        [DataMember(Name="failed", EmitDefaultValue=false)]
        public List<string> Failed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NodeRestartResult {\n");
            sb.Append("  Restarted: ").Append(Restarted).Append("\n");
            sb.Append("  Failed: ").Append(Failed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NodeRestartResult);
        }

        /// <summary>
        /// Returns true if NodeRestartResult instances are equal
        /// </summary>
        /// <param name="input">Instance of NodeRestartResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NodeRestartResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Restarted == input.Restarted ||
                    this.Restarted != null &&
                    this.Restarted.SequenceEqual(input.Restarted)
                ) && 
                (
                    this.Failed == input.Failed ||
                    this.Failed != null &&
                    this.Failed.SequenceEqual(input.Failed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Restarted != null)
                    hashCode = hashCode * 59 + this.Restarted.GetHashCode();
                if (this.Failed != null)
                    hashCode = hashCode * 59 + this.Failed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

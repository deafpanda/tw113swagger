/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.13.0.bmaster.r20180119190259-8b60eaa.b1753
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A severity range that stores name, color, description and severity level
    /// </summary>
    [DataContract]
    public partial class SeverityRange :  IEquatable<SeverityRange>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SeverityRange" /> class.
        /// </summary>
        /// <param name="color">Color of the Severity Range.</param>
        /// <param name="description">Description of the Severity Range.</param>
        /// <param name="maxSeverity">Maximum level of the Severity Range.</param>
        /// <param name="minSeverity">Minimum level of the severity Range.</param>
        /// <param name="name">Name of the Severity Range.</param>
        public SeverityRange(string color = default(string), string description = default(string), int? maxSeverity = default(int?), int? minSeverity = default(int?), string name = default(string))
        {
            this.Color = color;
            this.Description = description;
            this.MaxSeverity = maxSeverity;
            this.MinSeverity = minSeverity;
            this.Name = name;
        }
        
        /// <summary>
        /// Color of the Severity Range
        /// </summary>
        /// <value>Color of the Severity Range</value>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public string Color { get; set; }

        /// <summary>
        /// Description of the Severity Range
        /// </summary>
        /// <value>Description of the Severity Range</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Maximum level of the Severity Range
        /// </summary>
        /// <value>Maximum level of the Severity Range</value>
        [DataMember(Name="maxSeverity", EmitDefaultValue=false)]
        public int? MaxSeverity { get; set; }

        /// <summary>
        /// Minimum level of the severity Range
        /// </summary>
        /// <value>Minimum level of the severity Range</value>
        [DataMember(Name="minSeverity", EmitDefaultValue=false)]
        public int? MinSeverity { get; set; }

        /// <summary>
        /// Name of the Severity Range
        /// </summary>
        /// <value>Name of the Severity Range</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SeverityRange {\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  MaxSeverity: ").Append(MaxSeverity).Append("\n");
            sb.Append("  MinSeverity: ").Append(MinSeverity).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SeverityRange);
        }

        /// <summary>
        /// Returns true if SeverityRange instances are equal
        /// </summary>
        /// <param name="input">Instance of SeverityRange to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SeverityRange input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.MaxSeverity == input.MaxSeverity ||
                    (this.MaxSeverity != null &&
                    this.MaxSeverity.Equals(input.MaxSeverity))
                ) && 
                (
                    this.MinSeverity == input.MinSeverity ||
                    (this.MinSeverity != null &&
                    this.MinSeverity.Equals(input.MinSeverity))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Color != null)
                    hashCode = hashCode * 59 + this.Color.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.MaxSeverity != null)
                    hashCode = hashCode * 59 + this.MaxSeverity.GetHashCode();
                if (this.MinSeverity != null)
                    hashCode = hashCode * 59 + this.MinSeverity.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.12.1.bmaster.r20170922182356-4e84151.b1741
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Provides details about who changed an element resulting in a new element version. There may be many for a given element version.
    /// </summary>
    [DataContract]
    public partial class AuditInfo :  IEquatable<AuditInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuditInfo" /> class.
        /// </summary>
        /// <param name="username">The name of the user running the process that changed the element.</param>
        /// <param name="processName">The name of the process running that changed the element.</param>
        /// <param name="accessType">Audit Access Type.</param>
        /// <param name="eventType">Audit Event Type.</param>
        /// <param name="timestamp">Timestamp indicating when the event occurred..</param>
        /// <param name="detail">Text description of the audit event..</param>
        public AuditInfo(string username = default(string), string processName = default(string), string accessType = default(string), string eventType = default(string), string timestamp = default(string), string detail = default(string))
        {
            this.Username = username;
            this.ProcessName = processName;
            this.AccessType = accessType;
            this.EventType = eventType;
            this.Timestamp = timestamp;
            this.Detail = detail;
        }
        
        /// <summary>
        /// The name of the user running the process that changed the element
        /// </summary>
        /// <value>The name of the user running the process that changed the element</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// The name of the process running that changed the element
        /// </summary>
        /// <value>The name of the process running that changed the element</value>
        [DataMember(Name="process_name", EmitDefaultValue=false)]
        public string ProcessName { get; set; }

        /// <summary>
        /// Audit Access Type
        /// </summary>
        /// <value>Audit Access Type</value>
        [DataMember(Name="accessType", EmitDefaultValue=false)]
        public string AccessType { get; set; }

        /// <summary>
        /// Audit Event Type
        /// </summary>
        /// <value>Audit Event Type</value>
        [DataMember(Name="eventType", EmitDefaultValue=false)]
        public string EventType { get; set; }

        /// <summary>
        /// Timestamp indicating when the event occurred.
        /// </summary>
        /// <value>Timestamp indicating when the event occurred.</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Text description of the audit event.
        /// </summary>
        /// <value>Text description of the audit event.</value>
        [DataMember(Name="detail", EmitDefaultValue=false)]
        public string Detail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuditInfo {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  ProcessName: ").Append(ProcessName).Append("\n");
            sb.Append("  AccessType: ").Append(AccessType).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuditInfo);
        }

        /// <summary>
        /// Returns true if AuditInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of AuditInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuditInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.ProcessName == input.ProcessName ||
                    (this.ProcessName != null &&
                    this.ProcessName.Equals(input.ProcessName))
                ) && 
                (
                    this.AccessType == input.AccessType ||
                    (this.AccessType != null &&
                    this.AccessType.Equals(input.AccessType))
                ) && 
                (
                    this.EventType == input.EventType ||
                    (this.EventType != null &&
                    this.EventType.Equals(input.EventType))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Detail == input.Detail ||
                    (this.Detail != null &&
                    this.Detail.Equals(input.Detail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.ProcessName != null)
                    hashCode = hashCode * 59 + this.ProcessName.GetHashCode();
                if (this.AccessType != null)
                    hashCode = hashCode * 59 + this.AccessType.GetHashCode();
                if (this.EventType != null)
                    hashCode = hashCode * 59 + this.EventType.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Detail != null)
                    hashCode = hashCode * 59 + this.Detail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

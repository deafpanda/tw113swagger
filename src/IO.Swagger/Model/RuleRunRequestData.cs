/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.12.1.bmaster.r20170922182356-4e84151.b1741
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The data required for the run rule request
    /// </summary>
    [DataContract]
    public partial class RuleRunRequestData :  IEquatable<RuleRunRequestData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RuleRunRequestData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RuleRunRequestData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RuleRunRequestData" /> class.
        /// </summary>
        /// <param name="nodeIds">List of nodes or node groups to scan (required).</param>
        /// <param name="ruleIds">List of rules or rule groups to include in the scan (required).</param>
        /// <param name="baseline">If baseline is set to new, only new elements will create baseline versions, if set to &#39;all&#39;, then a full baseline scan will occur. Otherwise, a &#39;check&#39; for changes will be performed..</param>
        public RuleRunRequestData(List<string> nodeIds = default(List<string>), List<string> ruleIds = default(List<string>), string baseline = default(string))
        {
            // to ensure "nodeIds" is required (not null)
            if (nodeIds == null)
            {
                throw new InvalidDataException("nodeIds is a required property for RuleRunRequestData and cannot be null");
            }
            else
            {
                this.NodeIds = nodeIds;
            }
            // to ensure "ruleIds" is required (not null)
            if (ruleIds == null)
            {
                throw new InvalidDataException("ruleIds is a required property for RuleRunRequestData and cannot be null");
            }
            else
            {
                this.RuleIds = ruleIds;
            }
            this.Baseline = baseline;
        }
        
        /// <summary>
        /// List of nodes or node groups to scan
        /// </summary>
        /// <value>List of nodes or node groups to scan</value>
        [DataMember(Name="nodeIds", EmitDefaultValue=false)]
        public List<string> NodeIds { get; set; }

        /// <summary>
        /// List of rules or rule groups to include in the scan
        /// </summary>
        /// <value>List of rules or rule groups to include in the scan</value>
        [DataMember(Name="ruleIds", EmitDefaultValue=false)]
        public List<string> RuleIds { get; set; }

        /// <summary>
        /// If baseline is set to new, only new elements will create baseline versions, if set to &#39;all&#39;, then a full baseline scan will occur. Otherwise, a &#39;check&#39; for changes will be performed.
        /// </summary>
        /// <value>If baseline is set to new, only new elements will create baseline versions, if set to &#39;all&#39;, then a full baseline scan will occur. Otherwise, a &#39;check&#39; for changes will be performed.</value>
        [DataMember(Name="baseline", EmitDefaultValue=false)]
        public string Baseline { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RuleRunRequestData {\n");
            sb.Append("  NodeIds: ").Append(NodeIds).Append("\n");
            sb.Append("  RuleIds: ").Append(RuleIds).Append("\n");
            sb.Append("  Baseline: ").Append(Baseline).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RuleRunRequestData);
        }

        /// <summary>
        /// Returns true if RuleRunRequestData instances are equal
        /// </summary>
        /// <param name="input">Instance of RuleRunRequestData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RuleRunRequestData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NodeIds == input.NodeIds ||
                    this.NodeIds != null &&
                    this.NodeIds.SequenceEqual(input.NodeIds)
                ) && 
                (
                    this.RuleIds == input.RuleIds ||
                    this.RuleIds != null &&
                    this.RuleIds.SequenceEqual(input.RuleIds)
                ) && 
                (
                    this.Baseline == input.Baseline ||
                    (this.Baseline != null &&
                    this.Baseline.Equals(input.Baseline))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NodeIds != null)
                    hashCode = hashCode * 59 + this.NodeIds.GetHashCode();
                if (this.RuleIds != null)
                    hashCode = hashCode * 59 + this.RuleIds.GetHashCode();
                if (this.Baseline != null)
                    hashCode = hashCode * 59 + this.Baseline.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

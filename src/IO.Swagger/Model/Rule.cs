/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.13.0.bmaster.r20180119190259-8b60eaa.b1753
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Rules provide details about what resources and attributes should be monitored for change.
    /// </summary>
    [DataContract]
    public partial class Rule :  IEquatable<Rule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Rule" /> class.
        /// </summary>
        /// <param name="command">Command line to execute.</param>
        /// <param name="description">A description of the rule (modifiable)..</param>
        /// <param name="elementName">Name of element to create.</param>
        /// <param name="excludePattern">Regex pattern. If content in output of command match this pattern, the matched string is replaced with the value of replaceString.</param>
        /// <param name="name">The name of the rule (modifiable)..</param>
        /// <param name="replaceString">New value for excludePattern matches.</param>
        /// <param name="startPoints">A list of locations to beginning scanning for elements.</param>
        /// <param name="stopPoints">A list of locations to stop scanning for elements.</param>
        /// <param name="timeoutMillis">Maximum time to wait for command to execute.</param>
        /// <param name="trackingId">An ID for the rule that is tracked across exports and imports (modifiable)..</param>
        /// <param name="type">The type of the rule.</param>
        public Rule(string command = default(string), string description = default(string), string elementName = default(string), string excludePattern = default(string), string name = default(string), string replaceString = default(string), List<StartPoint> startPoints = default(List<StartPoint>), List<StopPoint> stopPoints = default(List<StopPoint>), long? timeoutMillis = default(long?), string trackingId = default(string), string type = default(string))
        {
            this.Command = command;
            this.Description = description;
            this.ElementName = elementName;
            this.ExcludePattern = excludePattern;
            this.Name = name;
            this.ReplaceString = replaceString;
            this.StartPoints = startPoints;
            this.StopPoints = stopPoints;
            this.TimeoutMillis = timeoutMillis;
            this.TrackingId = trackingId;
            this.Type = type;
        }
        
        /// <summary>
        /// Command line to execute
        /// </summary>
        /// <value>Command line to execute</value>
        [DataMember(Name="command", EmitDefaultValue=false)]
        public string Command { get; set; }

        /// <summary>
        /// A description of the rule (modifiable).
        /// </summary>
        /// <value>A description of the rule (modifiable).</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Name of element to create
        /// </summary>
        /// <value>Name of element to create</value>
        [DataMember(Name="elementName", EmitDefaultValue=false)]
        public string ElementName { get; set; }

        /// <summary>
        /// Regex pattern. If content in output of command match this pattern, the matched string is replaced with the value of replaceString
        /// </summary>
        /// <value>Regex pattern. If content in output of command match this pattern, the matched string is replaced with the value of replaceString</value>
        [DataMember(Name="excludePattern", EmitDefaultValue=false)]
        public string ExcludePattern { get; set; }

        /// <summary>
        /// Readable-key identity of this rule (read only)
        /// </summary>
        /// <value>Readable-key identity of this rule (read only)</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// Timestamp indicating when the rule definition was imported from xml (read only)
        /// </summary>
        /// <value>Timestamp indicating when the rule definition was imported from xml (read only)</value>
        [DataMember(Name="importedTime", EmitDefaultValue=false)]
        public string ImportedTime { get; private set; }

        /// <summary>
        /// Timestamp indicating when the rule definition was last modified (read only)
        /// </summary>
        /// <value>Timestamp indicating when the rule definition was last modified (read only)</value>
        [DataMember(Name="modifiedTime", EmitDefaultValue=false)]
        public string ModifiedTime { get; private set; }

        /// <summary>
        /// The name of the rule (modifiable).
        /// </summary>
        /// <value>The name of the rule (modifiable).</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// New value for excludePattern matches
        /// </summary>
        /// <value>New value for excludePattern matches</value>
        [DataMember(Name="replaceString", EmitDefaultValue=false)]
        public string ReplaceString { get; set; }

        /// <summary>
        /// A list of locations to beginning scanning for elements
        /// </summary>
        /// <value>A list of locations to beginning scanning for elements</value>
        [DataMember(Name="startPoints", EmitDefaultValue=false)]
        public List<StartPoint> StartPoints { get; set; }

        /// <summary>
        /// A list of locations to stop scanning for elements
        /// </summary>
        /// <value>A list of locations to stop scanning for elements</value>
        [DataMember(Name="stopPoints", EmitDefaultValue=false)]
        public List<StopPoint> StopPoints { get; set; }

        /// <summary>
        /// Maximum time to wait for command to execute
        /// </summary>
        /// <value>Maximum time to wait for command to execute</value>
        [DataMember(Name="timeoutMillis", EmitDefaultValue=false)]
        public long? TimeoutMillis { get; set; }

        /// <summary>
        /// An ID for the rule that is tracked across exports and imports (modifiable).
        /// </summary>
        /// <value>An ID for the rule that is tracked across exports and imports (modifiable).</value>
        [DataMember(Name="trackingId", EmitDefaultValue=false)]
        public string TrackingId { get; set; }

        /// <summary>
        /// The type of the rule
        /// </summary>
        /// <value>The type of the rule</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Rule {\n");
            sb.Append("  Command: ").Append(Command).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ElementName: ").Append(ElementName).Append("\n");
            sb.Append("  ExcludePattern: ").Append(ExcludePattern).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImportedTime: ").Append(ImportedTime).Append("\n");
            sb.Append("  ModifiedTime: ").Append(ModifiedTime).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ReplaceString: ").Append(ReplaceString).Append("\n");
            sb.Append("  StartPoints: ").Append(StartPoints).Append("\n");
            sb.Append("  StopPoints: ").Append(StopPoints).Append("\n");
            sb.Append("  TimeoutMillis: ").Append(TimeoutMillis).Append("\n");
            sb.Append("  TrackingId: ").Append(TrackingId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Rule);
        }

        /// <summary>
        /// Returns true if Rule instances are equal
        /// </summary>
        /// <param name="input">Instance of Rule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Rule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Command == input.Command ||
                    (this.Command != null &&
                    this.Command.Equals(input.Command))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ElementName == input.ElementName ||
                    (this.ElementName != null &&
                    this.ElementName.Equals(input.ElementName))
                ) && 
                (
                    this.ExcludePattern == input.ExcludePattern ||
                    (this.ExcludePattern != null &&
                    this.ExcludePattern.Equals(input.ExcludePattern))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ImportedTime == input.ImportedTime ||
                    (this.ImportedTime != null &&
                    this.ImportedTime.Equals(input.ImportedTime))
                ) && 
                (
                    this.ModifiedTime == input.ModifiedTime ||
                    (this.ModifiedTime != null &&
                    this.ModifiedTime.Equals(input.ModifiedTime))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ReplaceString == input.ReplaceString ||
                    (this.ReplaceString != null &&
                    this.ReplaceString.Equals(input.ReplaceString))
                ) && 
                (
                    this.StartPoints == input.StartPoints ||
                    this.StartPoints != null &&
                    this.StartPoints.SequenceEqual(input.StartPoints)
                ) && 
                (
                    this.StopPoints == input.StopPoints ||
                    this.StopPoints != null &&
                    this.StopPoints.SequenceEqual(input.StopPoints)
                ) && 
                (
                    this.TimeoutMillis == input.TimeoutMillis ||
                    (this.TimeoutMillis != null &&
                    this.TimeoutMillis.Equals(input.TimeoutMillis))
                ) && 
                (
                    this.TrackingId == input.TrackingId ||
                    (this.TrackingId != null &&
                    this.TrackingId.Equals(input.TrackingId))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Command != null)
                    hashCode = hashCode * 59 + this.Command.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ElementName != null)
                    hashCode = hashCode * 59 + this.ElementName.GetHashCode();
                if (this.ExcludePattern != null)
                    hashCode = hashCode * 59 + this.ExcludePattern.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ImportedTime != null)
                    hashCode = hashCode * 59 + this.ImportedTime.GetHashCode();
                if (this.ModifiedTime != null)
                    hashCode = hashCode * 59 + this.ModifiedTime.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ReplaceString != null)
                    hashCode = hashCode * 59 + this.ReplaceString.GetHashCode();
                if (this.StartPoints != null)
                    hashCode = hashCode * 59 + this.StartPoints.GetHashCode();
                if (this.StopPoints != null)
                    hashCode = hashCode * 59 + this.StopPoints.GetHashCode();
                if (this.TimeoutMillis != null)
                    hashCode = hashCode * 59 + this.TimeoutMillis.GetHashCode();
                if (this.TrackingId != null)
                    hashCode = hashCode * 59 + this.TrackingId.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

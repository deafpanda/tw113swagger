/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.12.1.bmaster.r20170922182356-4e84151.b1741
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A map of key value pairs, where the custom property name is the key, and the value is returned as a string.
    /// </summary>
    [DataContract]
    public partial class CustomProperties :  IEquatable<CustomProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomProperties" /> class.
        /// </summary>
        /// <param name="customPropertyName">A custom property entry, where the field name is the property name as defined by the property type, and the value is the string representation of the assigned or inherited value.</param>
        public CustomProperties(string customPropertyName = default(string))
        {
            this.CustomPropertyName = customPropertyName;
        }
        
        /// <summary>
        /// A custom property entry, where the field name is the property name as defined by the property type, and the value is the string representation of the assigned or inherited value
        /// </summary>
        /// <value>A custom property entry, where the field name is the property name as defined by the property type, and the value is the string representation of the assigned or inherited value</value>
        [DataMember(Name="customPropertyName", EmitDefaultValue=false)]
        public string CustomPropertyName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomProperties {\n");
            sb.Append("  CustomPropertyName: ").Append(CustomPropertyName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomProperties);
        }

        /// <summary>
        /// Returns true if CustomProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CustomPropertyName == input.CustomPropertyName ||
                    (this.CustomPropertyName != null &&
                    this.CustomPropertyName.Equals(input.CustomPropertyName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomPropertyName != null)
                    hashCode = hashCode * 59 + this.CustomPropertyName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.13.0.bmaster.r20180119190259-8b60eaa.b1753
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A collection of nodes and the specific tests that are to be considered exempt from failure for a policy until a designated expiration point.
    /// </summary>
    [DataContract]
    public partial class Waiver :  IEquatable<Waiver>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Waiver" /> class.
        /// </summary>
        /// <param name="closed">Indicates all operations required prior to expiration have been executed. (default to false).</param>
        /// <param name="description">Descriptive data characterizing the waiver..</param>
        /// <param name="expiration">When the waiver expires or is no longer valid..</param>
        /// <param name="grantedBy">Identifies who granted the waiver..</param>
        /// <param name="id">Id of the waiver..</param>
        /// <param name="name">Name of the waiver..</param>
        /// <param name="policyId">Id of the policy this waiver is restricted to..</param>
        /// <param name="policyName">Name of the policy this waiver is restricted to..</param>
        /// <param name="responsible">Identifies who is responsible for fixing the failed tests..</param>
        /// <param name="startTime">When the waiver begins to be valid..</param>
        /// <param name="waivedTests">Set of policy tests and node pairs that have been waived..</param>
        public Waiver(bool? closed = false, string description = default(string), string expiration = default(string), string grantedBy = default(string), string id = default(string), string name = default(string), string policyId = default(string), string policyName = default(string), string responsible = default(string), string startTime = default(string), List<PolicyTestNodeWaiver> waivedTests = default(List<PolicyTestNodeWaiver>))
        {
            // use default value if no "closed" provided
            if (closed == null)
            {
                this.Closed = false;
            }
            else
            {
                this.Closed = closed;
            }
            this.Description = description;
            this.Expiration = expiration;
            this.GrantedBy = grantedBy;
            this.Id = id;
            this.Name = name;
            this.PolicyId = policyId;
            this.PolicyName = policyName;
            this.Responsible = responsible;
            this.StartTime = startTime;
            this.WaivedTests = waivedTests;
        }
        
        /// <summary>
        /// Indicates all operations required prior to expiration have been executed.
        /// </summary>
        /// <value>Indicates all operations required prior to expiration have been executed.</value>
        [DataMember(Name="closed", EmitDefaultValue=false)]
        public bool? Closed { get; set; }

        /// <summary>
        /// Descriptive data characterizing the waiver.
        /// </summary>
        /// <value>Descriptive data characterizing the waiver.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// When the waiver expires or is no longer valid.
        /// </summary>
        /// <value>When the waiver expires or is no longer valid.</value>
        [DataMember(Name="expiration", EmitDefaultValue=false)]
        public string Expiration { get; set; }

        /// <summary>
        /// Identifies who granted the waiver.
        /// </summary>
        /// <value>Identifies who granted the waiver.</value>
        [DataMember(Name="grantedBy", EmitDefaultValue=false)]
        public string GrantedBy { get; set; }

        /// <summary>
        /// Id of the waiver.
        /// </summary>
        /// <value>Id of the waiver.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Name of the waiver.
        /// </summary>
        /// <value>Name of the waiver.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Id of the policy this waiver is restricted to.
        /// </summary>
        /// <value>Id of the policy this waiver is restricted to.</value>
        [DataMember(Name="policyId", EmitDefaultValue=false)]
        public string PolicyId { get; set; }

        /// <summary>
        /// Name of the policy this waiver is restricted to.
        /// </summary>
        /// <value>Name of the policy this waiver is restricted to.</value>
        [DataMember(Name="policyName", EmitDefaultValue=false)]
        public string PolicyName { get; set; }

        /// <summary>
        /// Identifies who is responsible for fixing the failed tests.
        /// </summary>
        /// <value>Identifies who is responsible for fixing the failed tests.</value>
        [DataMember(Name="responsible", EmitDefaultValue=false)]
        public string Responsible { get; set; }

        /// <summary>
        /// When the waiver begins to be valid.
        /// </summary>
        /// <value>When the waiver begins to be valid.</value>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public string StartTime { get; set; }

        /// <summary>
        /// Set of policy tests and node pairs that have been waived.
        /// </summary>
        /// <value>Set of policy tests and node pairs that have been waived.</value>
        [DataMember(Name="waivedTests", EmitDefaultValue=false)]
        public List<PolicyTestNodeWaiver> WaivedTests { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Waiver {\n");
            sb.Append("  Closed: ").Append(Closed).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("  GrantedBy: ").Append(GrantedBy).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PolicyId: ").Append(PolicyId).Append("\n");
            sb.Append("  PolicyName: ").Append(PolicyName).Append("\n");
            sb.Append("  Responsible: ").Append(Responsible).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  WaivedTests: ").Append(WaivedTests).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Waiver);
        }

        /// <summary>
        /// Returns true if Waiver instances are equal
        /// </summary>
        /// <param name="input">Instance of Waiver to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Waiver input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Closed == input.Closed ||
                    (this.Closed != null &&
                    this.Closed.Equals(input.Closed))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Expiration == input.Expiration ||
                    (this.Expiration != null &&
                    this.Expiration.Equals(input.Expiration))
                ) && 
                (
                    this.GrantedBy == input.GrantedBy ||
                    (this.GrantedBy != null &&
                    this.GrantedBy.Equals(input.GrantedBy))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PolicyId == input.PolicyId ||
                    (this.PolicyId != null &&
                    this.PolicyId.Equals(input.PolicyId))
                ) && 
                (
                    this.PolicyName == input.PolicyName ||
                    (this.PolicyName != null &&
                    this.PolicyName.Equals(input.PolicyName))
                ) && 
                (
                    this.Responsible == input.Responsible ||
                    (this.Responsible != null &&
                    this.Responsible.Equals(input.Responsible))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.WaivedTests == input.WaivedTests ||
                    this.WaivedTests != null &&
                    this.WaivedTests.SequenceEqual(input.WaivedTests)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Closed != null)
                    hashCode = hashCode * 59 + this.Closed.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Expiration != null)
                    hashCode = hashCode * 59 + this.Expiration.GetHashCode();
                if (this.GrantedBy != null)
                    hashCode = hashCode * 59 + this.GrantedBy.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PolicyId != null)
                    hashCode = hashCode * 59 + this.PolicyId.GetHashCode();
                if (this.PolicyName != null)
                    hashCode = hashCode * 59 + this.PolicyName.GetHashCode();
                if (this.Responsible != null)
                    hashCode = hashCode * 59 + this.Responsible.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.WaivedTests != null)
                    hashCode = hashCode * 59 + this.WaivedTests.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

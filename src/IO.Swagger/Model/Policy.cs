/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.13.0.bmaster.r20180119190259-8b60eaa.b1753
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A collection of policy tests that validate changes to monitored hosts for compliance
    /// </summary>
    [DataContract]
    public partial class Policy :  IEquatable<Policy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Policy" /> class.
        /// </summary>
        /// <param name="description">A description of the policy.</param>
        /// <param name="id">Readable-key identity of this policy.</param>
        /// <param name="importedTime">Timestamp indicating when the policy definition was imported from xml.</param>
        /// <param name="modifiedTime">Timestamp indicating when the policy definition was last modified.</param>
        /// <param name="name">The name of the policy.</param>
        /// <param name="nodeScope">List of nodes or node groups in scope for this policy.</param>
        /// <param name="purgeDataOlderThanDays">Number of days worth of data to keep when purgeOldData is true.</param>
        /// <param name="purgeOldData">If true, TE will clean out results and waivers older than a threshold (default to false).</param>
        /// <param name="trackingId">An ID for the policy that is tracked across exports and imports.</param>
        public Policy(string description = default(string), string id = default(string), string importedTime = default(string), string modifiedTime = default(string), string name = default(string), List<string> nodeScope = default(List<string>), int? purgeDataOlderThanDays = default(int?), bool? purgeOldData = false, string trackingId = default(string))
        {
            this.Description = description;
            this.Id = id;
            this.ImportedTime = importedTime;
            this.ModifiedTime = modifiedTime;
            this.Name = name;
            this.NodeScope = nodeScope;
            this.PurgeDataOlderThanDays = purgeDataOlderThanDays;
            // use default value if no "purgeOldData" provided
            if (purgeOldData == null)
            {
                this.PurgeOldData = false;
            }
            else
            {
                this.PurgeOldData = purgeOldData;
            }
            this.TrackingId = trackingId;
        }
        
        /// <summary>
        /// A description of the policy
        /// </summary>
        /// <value>A description of the policy</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Readable-key identity of this policy
        /// </summary>
        /// <value>Readable-key identity of this policy</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Timestamp indicating when the policy definition was imported from xml
        /// </summary>
        /// <value>Timestamp indicating when the policy definition was imported from xml</value>
        [DataMember(Name="importedTime", EmitDefaultValue=false)]
        public string ImportedTime { get; set; }

        /// <summary>
        /// Timestamp indicating when the policy definition was last modified
        /// </summary>
        /// <value>Timestamp indicating when the policy definition was last modified</value>
        [DataMember(Name="modifiedTime", EmitDefaultValue=false)]
        public string ModifiedTime { get; set; }

        /// <summary>
        /// The name of the policy
        /// </summary>
        /// <value>The name of the policy</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// List of nodes or node groups in scope for this policy
        /// </summary>
        /// <value>List of nodes or node groups in scope for this policy</value>
        [DataMember(Name="nodeScope", EmitDefaultValue=false)]
        public List<string> NodeScope { get; set; }

        /// <summary>
        /// Number of days worth of data to keep when purgeOldData is true
        /// </summary>
        /// <value>Number of days worth of data to keep when purgeOldData is true</value>
        [DataMember(Name="purgeDataOlderThanDays", EmitDefaultValue=false)]
        public int? PurgeDataOlderThanDays { get; set; }

        /// <summary>
        /// If true, TE will clean out results and waivers older than a threshold
        /// </summary>
        /// <value>If true, TE will clean out results and waivers older than a threshold</value>
        [DataMember(Name="purgeOldData", EmitDefaultValue=false)]
        public bool? PurgeOldData { get; set; }

        /// <summary>
        /// An ID for the policy that is tracked across exports and imports
        /// </summary>
        /// <value>An ID for the policy that is tracked across exports and imports</value>
        [DataMember(Name="trackingId", EmitDefaultValue=false)]
        public string TrackingId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Policy {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImportedTime: ").Append(ImportedTime).Append("\n");
            sb.Append("  ModifiedTime: ").Append(ModifiedTime).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NodeScope: ").Append(NodeScope).Append("\n");
            sb.Append("  PurgeDataOlderThanDays: ").Append(PurgeDataOlderThanDays).Append("\n");
            sb.Append("  PurgeOldData: ").Append(PurgeOldData).Append("\n");
            sb.Append("  TrackingId: ").Append(TrackingId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Policy);
        }

        /// <summary>
        /// Returns true if Policy instances are equal
        /// </summary>
        /// <param name="input">Instance of Policy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Policy input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ImportedTime == input.ImportedTime ||
                    (this.ImportedTime != null &&
                    this.ImportedTime.Equals(input.ImportedTime))
                ) && 
                (
                    this.ModifiedTime == input.ModifiedTime ||
                    (this.ModifiedTime != null &&
                    this.ModifiedTime.Equals(input.ModifiedTime))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NodeScope == input.NodeScope ||
                    this.NodeScope != null &&
                    this.NodeScope.SequenceEqual(input.NodeScope)
                ) && 
                (
                    this.PurgeDataOlderThanDays == input.PurgeDataOlderThanDays ||
                    (this.PurgeDataOlderThanDays != null &&
                    this.PurgeDataOlderThanDays.Equals(input.PurgeDataOlderThanDays))
                ) && 
                (
                    this.PurgeOldData == input.PurgeOldData ||
                    (this.PurgeOldData != null &&
                    this.PurgeOldData.Equals(input.PurgeOldData))
                ) && 
                (
                    this.TrackingId == input.TrackingId ||
                    (this.TrackingId != null &&
                    this.TrackingId.Equals(input.TrackingId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ImportedTime != null)
                    hashCode = hashCode * 59 + this.ImportedTime.GetHashCode();
                if (this.ModifiedTime != null)
                    hashCode = hashCode * 59 + this.ModifiedTime.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.NodeScope != null)
                    hashCode = hashCode * 59 + this.NodeScope.GetHashCode();
                if (this.PurgeDataOlderThanDays != null)
                    hashCode = hashCode * 59 + this.PurgeDataOlderThanDays.GetHashCode();
                if (this.PurgeOldData != null)
                    hashCode = hashCode * 59 + this.PurgeOldData.GetHashCode();
                if (this.TrackingId != null)
                    hashCode = hashCode * 59 + this.TrackingId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

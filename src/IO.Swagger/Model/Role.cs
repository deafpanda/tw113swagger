/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.13.0.bmaster.r20180119190259-8b60eaa.b1753
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Roles are part of the Tripwire Enterprise authorization system. Roles may have many Permissions associated with them. Users may have roles associated to them, one directly as their primary role, and others in object access control lists, such as on nodes. A user inherits the permissions associated with their roles.
    /// </summary>
    [DataContract]
    public partial class Role :  IEquatable<Role>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Role" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Role() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Role" /> class.
        /// </summary>
        /// <param name="administrator">Indicates if the role implies full Administrator permissions. (restrictions: read-only) (default to false).</param>
        /// <param name="builtin">Indicates if the role is defined internal by Tripwire Enterprise. Builtin roles cannot be changed. (restrictions: read-only) (default to false).</param>
        /// <param name="description">Long description of the purpose of the role (modifiable). (required).</param>
        /// <param name="id">Readable-Key identity for the role (restrictions: read-only) (required).</param>
        /// <param name="name">Name of the role (modifiable). (required).</param>
        public Role(bool? administrator = false, bool? builtin = false, string description = default(string), string id = default(string), string name = default(string))
        {
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for Role and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Role and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Role and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // use default value if no "administrator" provided
            if (administrator == null)
            {
                this.Administrator = false;
            }
            else
            {
                this.Administrator = administrator;
            }
            // use default value if no "builtin" provided
            if (builtin == null)
            {
                this.Builtin = false;
            }
            else
            {
                this.Builtin = builtin;
            }
        }
        
        /// <summary>
        /// Indicates if the role implies full Administrator permissions. (restrictions: read-only)
        /// </summary>
        /// <value>Indicates if the role implies full Administrator permissions. (restrictions: read-only)</value>
        [DataMember(Name="administrator", EmitDefaultValue=false)]
        public bool? Administrator { get; set; }

        /// <summary>
        /// Indicates if the role is defined internal by Tripwire Enterprise. Builtin roles cannot be changed. (restrictions: read-only)
        /// </summary>
        /// <value>Indicates if the role is defined internal by Tripwire Enterprise. Builtin roles cannot be changed. (restrictions: read-only)</value>
        [DataMember(Name="builtin", EmitDefaultValue=false)]
        public bool? Builtin { get; set; }

        /// <summary>
        /// Long description of the purpose of the role (modifiable).
        /// </summary>
        /// <value>Long description of the purpose of the role (modifiable).</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Readable-Key identity for the role (restrictions: read-only)
        /// </summary>
        /// <value>Readable-Key identity for the role (restrictions: read-only)</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Name of the role (modifiable).
        /// </summary>
        /// <value>Name of the role (modifiable).</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Role {\n");
            sb.Append("  Administrator: ").Append(Administrator).Append("\n");
            sb.Append("  Builtin: ").Append(Builtin).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Role);
        }

        /// <summary>
        /// Returns true if Role instances are equal
        /// </summary>
        /// <param name="input">Instance of Role to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Role input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Administrator == input.Administrator ||
                    (this.Administrator != null &&
                    this.Administrator.Equals(input.Administrator))
                ) && 
                (
                    this.Builtin == input.Builtin ||
                    (this.Builtin != null &&
                    this.Builtin.Equals(input.Builtin))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Administrator != null)
                    hashCode = hashCode * 59 + this.Administrator.GetHashCode();
                if (this.Builtin != null)
                    hashCode = hashCode * 59 + this.Builtin.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

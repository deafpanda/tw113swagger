/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.13.0.bmaster.r20180119190259-8b60eaa.b1753
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A Tripwire node, which represents a mechanism for scanning an asset, such as an agent, or credentialed ssh connection
    /// </summary>
    [DataContract]
    public partial class Node :  IEquatable<Node>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Node" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Node() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Node" /> class.
        /// </summary>
        /// <param name="auditEnabled">True if agent is setup to collect operating system audit events (modifiable) (default to false).</param>
        /// <param name="consolePassword">Password for SSH console user.</param>
        /// <param name="consolePort">SSH console port for command output hypervisor rules.</param>
        /// <param name="consolePrivateKeyFile">Local path to private key file for SSH key based authentication.</param>
        /// <param name="consoleSuPassword">Password for SSH console super user escalation.</param>
        /// <param name="consoleUsername">Login user for SSH console.</param>
        /// <param name="_delegate">Id of delegate agent based node.</param>
        /// <param name="description">Customizable user meta-data for the node (modifiable)..</param>
        /// <param name="dsUseSsl">If true the directory server connection will use an SSL protocol (default to false).</param>
        /// <param name="esxiPassword">Password for hypervisors managed by this vCenter.</param>
        /// <param name="esxiUsername">Login user for hypervisors managed by this vCenter.</param>
        /// <param name="eventGeneratorEnabled">True if Tripwire&#39;s hook into operating system audit events is used, instead of operating system native event sources (modifiable). (default to false).</param>
        /// <param name="ipAddresses">IP addresses for the asset monitored by this node (modifiable)..</param>
        /// <param name="isDisabled">True if the node has been disabled, and will be skipped when running rules (modifiable). (default to false).</param>
        /// <param name="isSSLSupported">True if this TE node type can support ssl connections. (Since 1.13) (default to false).</param>
        /// <param name="macAddresses">MAC addresses for the asset monitored by this node (modifiable)..</param>
        /// <param name="name">Name of the node, usually the asset&#39;s hostname or ip-address (modifiable)..</param>
        /// <param name="oracleIsService">Indicates if the database name is actually the name of the Oracle service (default to false).</param>
        /// <param name="oracleLoginAs">Oracle login model, DEFAULT or SYSDBA.</param>
        /// <param name="oracleSecurityType">Oracle communication model, NONE, ANONYMOUS_ENCRYPT or SSL.</param>
        /// <param name="parameterSet">Monitoring configuration parameters for the node (required).</param>
        /// <param name="password">Password for directory, database, or vCenter services.</param>
        /// <param name="port">Port of directory or database service.</param>
        /// <param name="proxyHost">Hostname or ip address of the optional proxy server used for Tripwire Enterprise to connect out to the agent for this node (modifiable)..</param>
        /// <param name="proxyPort">Listening port of the proxy server (modifiable)..</param>
        /// <param name="realTimeEnabled">True if rules may be triggered by Tripwire&#39;s hook for audit events (modifiable). (default to false).</param>
        /// <param name="rmiHost">The name or ip address that Tripwire Enterprise can use to address a remote agent (modifiable).</param>
        /// <param name="rmiPort">The listening port of the remote agent (modifiable).</param>
        /// <param name="sqlServerSslOptions">SSL configuration options specific to MS SQL Server.</param>
        /// <param name="sqlServerUseNtlmv2">Use NTLMv2 authentication (default to false).</param>
        /// <param name="sybaseUseSsl">Enable SSL communication with Sybase server (default to false).</param>
        /// <param name="user">Login user for directory, database or vCenter services.</param>
        /// <param name="usingSSL">If true, then the node will communicate to the database with an SSL enabled connection (modifiable). (Since 1.13) (default to false).</param>
        /// <param name="getvCenterPort">Communication port for connecting to vCenter.</param>
        /// <param name="getvCenterSyncSchedule">Control when Tripwire synchronizes data with the vCenter.</param>
        /// <param name="getvCenterUseSsl">Use SSL when connecting to vCenter (default to false).</param>
        public Node(bool? auditEnabled = false, string consolePassword = default(string), int? consolePort = default(int?), string consolePrivateKeyFile = default(string), string consoleSuPassword = default(string), string consoleUsername = default(string), string _delegate = default(string), string description = default(string), bool? dsUseSsl = false, string esxiPassword = default(string), string esxiUsername = default(string), bool? eventGeneratorEnabled = false, List<string> ipAddresses = default(List<string>), bool? isDisabled = false, bool? isSSLSupported = false, List<string> macAddresses = default(List<string>), string name = default(string), bool? oracleIsService = false, string oracleLoginAs = default(string), string oracleSecurityType = default(string), ParameterSet parameterSet = default(ParameterSet), string password = default(string), int? port = default(int?), string proxyHost = default(string), int? proxyPort = default(int?), bool? realTimeEnabled = false, string rmiHost = default(string), int? rmiPort = default(int?), string sqlServerSslOptions = default(string), bool? sqlServerUseNtlmv2 = false, bool? sybaseUseSsl = false, string user = default(string), bool? usingSSL = false, int? getvCenterPort = default(int?), TaskSchedule getvCenterSyncSchedule = default(TaskSchedule), bool? getvCenterUseSsl = false)
        {
            // to ensure "parameterSet" is required (not null)
            if (parameterSet == null)
            {
                throw new InvalidDataException("parameterSet is a required property for Node and cannot be null");
            }
            else
            {
                this.ParameterSet = parameterSet;
            }
            // use default value if no "auditEnabled" provided
            if (auditEnabled == null)
            {
                this.AuditEnabled = false;
            }
            else
            {
                this.AuditEnabled = auditEnabled;
            }
            this.ConsolePassword = consolePassword;
            this.ConsolePort = consolePort;
            this.ConsolePrivateKeyFile = consolePrivateKeyFile;
            this.ConsoleSuPassword = consoleSuPassword;
            this.ConsoleUsername = consoleUsername;
            this.Delegate = _delegate;
            this.Description = description;
            // use default value if no "dsUseSsl" provided
            if (dsUseSsl == null)
            {
                this.DsUseSsl = false;
            }
            else
            {
                this.DsUseSsl = dsUseSsl;
            }
            this.EsxiPassword = esxiPassword;
            this.EsxiUsername = esxiUsername;
            // use default value if no "eventGeneratorEnabled" provided
            if (eventGeneratorEnabled == null)
            {
                this.EventGeneratorEnabled = false;
            }
            else
            {
                this.EventGeneratorEnabled = eventGeneratorEnabled;
            }
            this.IpAddresses = ipAddresses;
            // use default value if no "isDisabled" provided
            if (isDisabled == null)
            {
                this.IsDisabled = false;
            }
            else
            {
                this.IsDisabled = isDisabled;
            }
            // use default value if no "isSSLSupported" provided
            if (isSSLSupported == null)
            {
                this.IsSSLSupported = false;
            }
            else
            {
                this.IsSSLSupported = isSSLSupported;
            }
            this.MacAddresses = macAddresses;
            this.Name = name;
            // use default value if no "oracleIsService" provided
            if (oracleIsService == null)
            {
                this.OracleIsService = false;
            }
            else
            {
                this.OracleIsService = oracleIsService;
            }
            this.OracleLoginAs = oracleLoginAs;
            this.OracleSecurityType = oracleSecurityType;
            this.Password = password;
            this.Port = port;
            this.ProxyHost = proxyHost;
            this.ProxyPort = proxyPort;
            // use default value if no "realTimeEnabled" provided
            if (realTimeEnabled == null)
            {
                this.RealTimeEnabled = false;
            }
            else
            {
                this.RealTimeEnabled = realTimeEnabled;
            }
            this.RmiHost = rmiHost;
            this.RmiPort = rmiPort;
            this.SqlServerSslOptions = sqlServerSslOptions;
            // use default value if no "sqlServerUseNtlmv2" provided
            if (sqlServerUseNtlmv2 == null)
            {
                this.SqlServerUseNtlmv2 = false;
            }
            else
            {
                this.SqlServerUseNtlmv2 = sqlServerUseNtlmv2;
            }
            // use default value if no "sybaseUseSsl" provided
            if (sybaseUseSsl == null)
            {
                this.SybaseUseSsl = false;
            }
            else
            {
                this.SybaseUseSsl = sybaseUseSsl;
            }
            this.User = user;
            // use default value if no "usingSSL" provided
            if (usingSSL == null)
            {
                this.UsingSSL = false;
            }
            else
            {
                this.UsingSSL = usingSSL;
            }
            this.GetvCenterPort = getvCenterPort;
            this.GetvCenterSyncSchedule = getvCenterSyncSchedule;
            // use default value if no "getvCenterUseSsl" provided
            if (getvCenterUseSsl == null)
            {
                this.GetvCenterUseSsl = false;
            }
            else
            {
                this.GetvCenterUseSsl = getvCenterUseSsl;
            }
        }
        
        /// <summary>
        /// Version of the Tripwire Enterprise agent
        /// </summary>
        /// <value>Version of the Tripwire Enterprise agent</value>
        [DataMember(Name="agentVersion", EmitDefaultValue=false)]
        public string AgentVersion { get; private set; }

        /// <summary>
        /// True if agent is setup to collect operating system audit events (modifiable)
        /// </summary>
        /// <value>True if agent is setup to collect operating system audit events (modifiable)</value>
        [DataMember(Name="auditEnabled", EmitDefaultValue=false)]
        public bool? AuditEnabled { get; set; }

        /// <summary>
        /// Monitoring features provided by the Axon agent for this node
        /// </summary>
        /// <value>Monitoring features provided by the Axon agent for this node</value>
        [DataMember(Name="commonAgentCapabilities", EmitDefaultValue=false)]
        public List<string> CommonAgentCapabilities { get; private set; }

        /// <summary>
        /// Raw operating system name as reported by the Axon agent
        /// </summary>
        /// <value>Raw operating system name as reported by the Axon agent</value>
        [DataMember(Name="commonAgentOsName", EmitDefaultValue=false)]
        public string CommonAgentOsName { get; private set; }

        /// <summary>
        /// Raw operating system version as reported by the Axon agent
        /// </summary>
        /// <value>Raw operating system version as reported by the Axon agent</value>
        [DataMember(Name="commonAgentOsVersion", EmitDefaultValue=false)]
        public string CommonAgentOsVersion { get; private set; }

        /// <summary>
        /// A UUID assigned by the Axon agent on initial installation
        /// </summary>
        /// <value>A UUID assigned by the Axon agent on initial installation</value>
        [DataMember(Name="commonAgentUuid", EmitDefaultValue=false)]
        public string CommonAgentUuid { get; private set; }

        /// <summary>
        /// Version of the Axon agent
        /// </summary>
        /// <value>Version of the Axon agent</value>
        [DataMember(Name="commonAgentVersion", EmitDefaultValue=false)]
        public string CommonAgentVersion { get; private set; }

        /// <summary>
        /// Password for SSH console user
        /// </summary>
        /// <value>Password for SSH console user</value>
        [DataMember(Name="consolePassword", EmitDefaultValue=false)]
        public string ConsolePassword { get; set; }

        /// <summary>
        /// SSH console port for command output hypervisor rules
        /// </summary>
        /// <value>SSH console port for command output hypervisor rules</value>
        [DataMember(Name="consolePort", EmitDefaultValue=false)]
        public int? ConsolePort { get; set; }

        /// <summary>
        /// Local path to private key file for SSH key based authentication
        /// </summary>
        /// <value>Local path to private key file for SSH key based authentication</value>
        [DataMember(Name="consolePrivateKeyFile", EmitDefaultValue=false)]
        public string ConsolePrivateKeyFile { get; set; }

        /// <summary>
        /// Password for SSH console super user escalation
        /// </summary>
        /// <value>Password for SSH console super user escalation</value>
        [DataMember(Name="consoleSuPassword", EmitDefaultValue=false)]
        public string ConsoleSuPassword { get; set; }

        /// <summary>
        /// Login user for SSH console
        /// </summary>
        /// <value>Login user for SSH console</value>
        [DataMember(Name="consoleUsername", EmitDefaultValue=false)]
        public string ConsoleUsername { get; set; }

        /// <summary>
        /// Id of delegate agent based node
        /// </summary>
        /// <value>Id of delegate agent based node</value>
        [DataMember(Name="delegate", EmitDefaultValue=false)]
        public string Delegate { get; set; }

        /// <summary>
        /// Customizable user meta-data for the node (modifiable).
        /// </summary>
        /// <value>Customizable user meta-data for the node (modifiable).</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// If true the directory server connection will use an SSL protocol
        /// </summary>
        /// <value>If true the directory server connection will use an SSL protocol</value>
        [DataMember(Name="dsUseSsl", EmitDefaultValue=false)]
        public bool? DsUseSsl { get; set; }

        /// <summary>
        /// The number of elements associated to this node
        /// </summary>
        /// <value>The number of elements associated to this node</value>
        [DataMember(Name="elementCount", EmitDefaultValue=false)]
        public int? ElementCount { get; private set; }

        /// <summary>
        /// Password for hypervisors managed by this vCenter
        /// </summary>
        /// <value>Password for hypervisors managed by this vCenter</value>
        [DataMember(Name="esxiPassword", EmitDefaultValue=false)]
        public string EsxiPassword { get; set; }

        /// <summary>
        /// Login user for hypervisors managed by this vCenter
        /// </summary>
        /// <value>Login user for hypervisors managed by this vCenter</value>
        [DataMember(Name="esxiUsername", EmitDefaultValue=false)]
        public string EsxiUsername { get; set; }

        /// <summary>
        /// True if Tripwire&#39;s hook into operating system audit events is used, instead of operating system native event sources (modifiable).
        /// </summary>
        /// <value>True if Tripwire&#39;s hook into operating system audit events is used, instead of operating system native event sources (modifiable).</value>
        [DataMember(Name="eventGeneratorEnabled", EmitDefaultValue=false)]
        public bool? EventGeneratorEnabled { get; set; }

        /// <summary>
        /// True if Tripwire&#39;s hook into operating system audit events is installed
        /// </summary>
        /// <value>True if Tripwire&#39;s hook into operating system audit events is installed</value>
        [DataMember(Name="eventGeneratorInstalled", EmitDefaultValue=false)]
        public bool? EventGeneratorInstalled { get; private set; }

        /// <summary>
        /// True if the node has encountered an error
        /// </summary>
        /// <value>True if the node has encountered an error</value>
        [DataMember(Name="hasFailures", EmitDefaultValue=false)]
        public bool? HasFailures { get; private set; }

        /// <summary>
        /// Readable-key identity of the node
        /// </summary>
        /// <value>Readable-key identity of the node</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// Timestamp indicating when the node definition was imported from xml
        /// </summary>
        /// <value>Timestamp indicating when the node definition was imported from xml</value>
        [DataMember(Name="importedTime", EmitDefaultValue=false)]
        public string ImportedTime { get; private set; }

        /// <summary>
        /// IP addresses for the asset monitored by this node (modifiable).
        /// </summary>
        /// <value>IP addresses for the asset monitored by this node (modifiable).</value>
        [DataMember(Name="ipAddresses", EmitDefaultValue=false)]
        public List<string> IpAddresses { get; set; }

        /// <summary>
        /// True if the node has been disabled, and will be skipped when running rules (modifiable).
        /// </summary>
        /// <value>True if the node has been disabled, and will be skipped when running rules (modifiable).</value>
        [DataMember(Name="isDisabled", EmitDefaultValue=false)]
        public bool? IsDisabled { get; set; }

        /// <summary>
        /// True if the agent on the asset for this node is acting as a SOCKS proxy
        /// </summary>
        /// <value>True if the agent on the asset for this node is acting as a SOCKS proxy</value>
        [DataMember(Name="isSocksProxy", EmitDefaultValue=false)]
        public bool? IsSocksProxy { get; private set; }

        /// <summary>
        /// True if this TE node type can support ssl connections. (Since 1.13)
        /// </summary>
        /// <value>True if this TE node type can support ssl connections. (Since 1.13)</value>
        [DataMember(Name="isSSLSupported", EmitDefaultValue=false)]
        public bool? IsSSLSupported { get; set; }

        /// <summary>
        /// Timestamp indicating the last time rules ran for the node
        /// </summary>
        /// <value>Timestamp indicating the last time rules ran for the node</value>
        [DataMember(Name="lastCheck", EmitDefaultValue=false)]
        public string LastCheck { get; private set; }

        /// <summary>
        /// Timestamp indicating when the agent for this node last connected to Tripwire Enterprise
        /// </summary>
        /// <value>Timestamp indicating when the agent for this node last connected to Tripwire Enterprise</value>
        [DataMember(Name="lastRegistration", EmitDefaultValue=false)]
        public string LastRegistration { get; private set; }

        /// <summary>
        /// The set of license types that have been enabled for this node
        /// </summary>
        /// <value>The set of license types that have been enabled for this node</value>
        [DataMember(Name="licensedFeatures", EmitDefaultValue=false)]
        public List<string> LicensedFeatures { get; private set; }

        /// <summary>
        /// MAC addresses for the asset monitored by this node (modifiable).
        /// </summary>
        /// <value>MAC addresses for the asset monitored by this node (modifiable).</value>
        [DataMember(Name="macAddresses", EmitDefaultValue=false)]
        public List<string> MacAddresses { get; set; }

        /// <summary>
        /// Hardware or operating system vendor
        /// </summary>
        /// <value>Hardware or operating system vendor</value>
        [DataMember(Name="make", EmitDefaultValue=false)]
        public string Make { get; private set; }

        /// <summary>
        /// The highest severity level of all element versions for this node
        /// </summary>
        /// <value>The highest severity level of all element versions for this node</value>
        [DataMember(Name="maxSeverity", EmitDefaultValue=false)]
        public int? MaxSeverity { get; private set; }

        /// <summary>
        /// Hardware or operating system name / product name
        /// </summary>
        /// <value>Hardware or operating system name / product name</value>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public string Model { get; private set; }

        /// <summary>
        /// Timestamp indicating when the node definition was last modified
        /// </summary>
        /// <value>Timestamp indicating when the node definition was last modified</value>
        [DataMember(Name="modifiedTime", EmitDefaultValue=false)]
        public string ModifiedTime { get; private set; }

        /// <summary>
        /// Name of the node, usually the asset&#39;s hostname or ip-address (modifiable).
        /// </summary>
        /// <value>Name of the node, usually the asset&#39;s hostname or ip-address (modifiable).</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Indicates if the database name is actually the name of the Oracle service
        /// </summary>
        /// <value>Indicates if the database name is actually the name of the Oracle service</value>
        [DataMember(Name="oracleIsService", EmitDefaultValue=false)]
        public bool? OracleIsService { get; set; }

        /// <summary>
        /// Oracle login model, DEFAULT or SYSDBA
        /// </summary>
        /// <value>Oracle login model, DEFAULT or SYSDBA</value>
        [DataMember(Name="oracleLoginAs", EmitDefaultValue=false)]
        public string OracleLoginAs { get; set; }

        /// <summary>
        /// Oracle communication model, NONE, ANONYMOUS_ENCRYPT or SSL
        /// </summary>
        /// <value>Oracle communication model, NONE, ANONYMOUS_ENCRYPT or SSL</value>
        [DataMember(Name="oracleSecurityType", EmitDefaultValue=false)]
        public string OracleSecurityType { get; set; }

        /// <summary>
        /// Monitoring configuration parameters for the node
        /// </summary>
        /// <value>Monitoring configuration parameters for the node</value>
        [DataMember(Name="parameterSet", EmitDefaultValue=false)]
        public ParameterSet ParameterSet { get; set; }

        /// <summary>
        /// Password for directory, database, or vCenter services
        /// </summary>
        /// <value>Password for directory, database, or vCenter services</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Port of directory or database service
        /// </summary>
        /// <value>Port of directory or database service</value>
        [DataMember(Name="port", EmitDefaultValue=false)]
        public int? Port { get; set; }

        /// <summary>
        /// Hostname or ip address of the optional proxy server used for Tripwire Enterprise to connect out to the agent for this node (modifiable).
        /// </summary>
        /// <value>Hostname or ip address of the optional proxy server used for Tripwire Enterprise to connect out to the agent for this node (modifiable).</value>
        [DataMember(Name="proxyHost", EmitDefaultValue=false)]
        public string ProxyHost { get; set; }

        /// <summary>
        /// Listening port of the proxy server (modifiable).
        /// </summary>
        /// <value>Listening port of the proxy server (modifiable).</value>
        [DataMember(Name="proxyPort", EmitDefaultValue=false)]
        public int? ProxyPort { get; set; }

        /// <summary>
        /// True if rules may be triggered by Tripwire&#39;s hook for audit events (modifiable).
        /// </summary>
        /// <value>True if rules may be triggered by Tripwire&#39;s hook for audit events (modifiable).</value>
        [DataMember(Name="realTimeEnabled", EmitDefaultValue=false)]
        public bool? RealTimeEnabled { get; set; }

        /// <summary>
        /// The name or ip address that Tripwire Enterprise can use to address a remote agent (modifiable)
        /// </summary>
        /// <value>The name or ip address that Tripwire Enterprise can use to address a remote agent (modifiable)</value>
        [DataMember(Name="rmiHost", EmitDefaultValue=false)]
        public string RmiHost { get; set; }

        /// <summary>
        /// The listening port of the remote agent (modifiable)
        /// </summary>
        /// <value>The listening port of the remote agent (modifiable)</value>
        [DataMember(Name="rmiPort", EmitDefaultValue=false)]
        public int? RmiPort { get; set; }

        /// <summary>
        /// SSL configuration options specific to MS SQL Server
        /// </summary>
        /// <value>SSL configuration options specific to MS SQL Server</value>
        [DataMember(Name="sqlServerSslOptions", EmitDefaultValue=false)]
        public string SqlServerSslOptions { get; set; }

        /// <summary>
        /// Use NTLMv2 authentication
        /// </summary>
        /// <value>Use NTLMv2 authentication</value>
        [DataMember(Name="sqlServerUseNtlmv2", EmitDefaultValue=false)]
        public bool? SqlServerUseNtlmv2 { get; set; }

        /// <summary>
        /// Enable SSL communication with Sybase server
        /// </summary>
        /// <value>Enable SSL communication with Sybase server</value>
        [DataMember(Name="sybaseUseSsl", EmitDefaultValue=false)]
        public bool? SybaseUseSsl { get; set; }

        /// <summary>
        /// All of the user and system tags that have been applied to the node
        /// </summary>
        /// <value>All of the user and system tags that have been applied to the node</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<Tag> Tags { get; private set; }

        /// <summary>
        /// An ID for the node that is tracked across exports and imports
        /// </summary>
        /// <value>An ID for the node that is tracked across exports and imports</value>
        [DataMember(Name="trackingId", EmitDefaultValue=false)]
        public string TrackingId { get; private set; }

        /// <summary>
        /// Name of the monitoring mechanism the node describes
        /// </summary>
        /// <value>Name of the monitoring mechanism the node describes</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; private set; }

        /// <summary>
        /// Login user for directory, database or vCenter services
        /// </summary>
        /// <value>Login user for directory, database or vCenter services</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public string User { get; set; }

        /// <summary>
        /// If true, then the node will communicate to the database with an SSL enabled connection (modifiable). (Since 1.13)
        /// </summary>
        /// <value>If true, then the node will communicate to the database with an SSL enabled connection (modifiable). (Since 1.13)</value>
        [DataMember(Name="usingSSL", EmitDefaultValue=false)]
        public bool? UsingSSL { get; set; }

        /// <summary>
        /// Communication port for connecting to vCenter
        /// </summary>
        /// <value>Communication port for connecting to vCenter</value>
        [DataMember(Name="getvCenterPort", EmitDefaultValue=false)]
        public int? GetvCenterPort { get; set; }

        /// <summary>
        /// Control when Tripwire synchronizes data with the vCenter
        /// </summary>
        /// <value>Control when Tripwire synchronizes data with the vCenter</value>
        [DataMember(Name="getvCenterSyncSchedule", EmitDefaultValue=false)]
        public TaskSchedule GetvCenterSyncSchedule { get; set; }

        /// <summary>
        /// Use SSL when connecting to vCenter
        /// </summary>
        /// <value>Use SSL when connecting to vCenter</value>
        [DataMember(Name="getvCenterUseSsl", EmitDefaultValue=false)]
        public bool? GetvCenterUseSsl { get; set; }

        /// <summary>
        /// Operating system version
        /// </summary>
        /// <value>Operating system version</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Node {\n");
            sb.Append("  AgentVersion: ").Append(AgentVersion).Append("\n");
            sb.Append("  AuditEnabled: ").Append(AuditEnabled).Append("\n");
            sb.Append("  CommonAgentCapabilities: ").Append(CommonAgentCapabilities).Append("\n");
            sb.Append("  CommonAgentOsName: ").Append(CommonAgentOsName).Append("\n");
            sb.Append("  CommonAgentOsVersion: ").Append(CommonAgentOsVersion).Append("\n");
            sb.Append("  CommonAgentUuid: ").Append(CommonAgentUuid).Append("\n");
            sb.Append("  CommonAgentVersion: ").Append(CommonAgentVersion).Append("\n");
            sb.Append("  ConsolePassword: ").Append(ConsolePassword).Append("\n");
            sb.Append("  ConsolePort: ").Append(ConsolePort).Append("\n");
            sb.Append("  ConsolePrivateKeyFile: ").Append(ConsolePrivateKeyFile).Append("\n");
            sb.Append("  ConsoleSuPassword: ").Append(ConsoleSuPassword).Append("\n");
            sb.Append("  ConsoleUsername: ").Append(ConsoleUsername).Append("\n");
            sb.Append("  Delegate: ").Append(Delegate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DsUseSsl: ").Append(DsUseSsl).Append("\n");
            sb.Append("  ElementCount: ").Append(ElementCount).Append("\n");
            sb.Append("  EsxiPassword: ").Append(EsxiPassword).Append("\n");
            sb.Append("  EsxiUsername: ").Append(EsxiUsername).Append("\n");
            sb.Append("  EventGeneratorEnabled: ").Append(EventGeneratorEnabled).Append("\n");
            sb.Append("  EventGeneratorInstalled: ").Append(EventGeneratorInstalled).Append("\n");
            sb.Append("  HasFailures: ").Append(HasFailures).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImportedTime: ").Append(ImportedTime).Append("\n");
            sb.Append("  IpAddresses: ").Append(IpAddresses).Append("\n");
            sb.Append("  IsDisabled: ").Append(IsDisabled).Append("\n");
            sb.Append("  IsSocksProxy: ").Append(IsSocksProxy).Append("\n");
            sb.Append("  IsSSLSupported: ").Append(IsSSLSupported).Append("\n");
            sb.Append("  LastCheck: ").Append(LastCheck).Append("\n");
            sb.Append("  LastRegistration: ").Append(LastRegistration).Append("\n");
            sb.Append("  LicensedFeatures: ").Append(LicensedFeatures).Append("\n");
            sb.Append("  MacAddresses: ").Append(MacAddresses).Append("\n");
            sb.Append("  Make: ").Append(Make).Append("\n");
            sb.Append("  MaxSeverity: ").Append(MaxSeverity).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  ModifiedTime: ").Append(ModifiedTime).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OracleIsService: ").Append(OracleIsService).Append("\n");
            sb.Append("  OracleLoginAs: ").Append(OracleLoginAs).Append("\n");
            sb.Append("  OracleSecurityType: ").Append(OracleSecurityType).Append("\n");
            sb.Append("  ParameterSet: ").Append(ParameterSet).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  ProxyHost: ").Append(ProxyHost).Append("\n");
            sb.Append("  ProxyPort: ").Append(ProxyPort).Append("\n");
            sb.Append("  RealTimeEnabled: ").Append(RealTimeEnabled).Append("\n");
            sb.Append("  RmiHost: ").Append(RmiHost).Append("\n");
            sb.Append("  RmiPort: ").Append(RmiPort).Append("\n");
            sb.Append("  SqlServerSslOptions: ").Append(SqlServerSslOptions).Append("\n");
            sb.Append("  SqlServerUseNtlmv2: ").Append(SqlServerUseNtlmv2).Append("\n");
            sb.Append("  SybaseUseSsl: ").Append(SybaseUseSsl).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TrackingId: ").Append(TrackingId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  UsingSSL: ").Append(UsingSSL).Append("\n");
            sb.Append("  GetvCenterPort: ").Append(GetvCenterPort).Append("\n");
            sb.Append("  GetvCenterSyncSchedule: ").Append(GetvCenterSyncSchedule).Append("\n");
            sb.Append("  GetvCenterUseSsl: ").Append(GetvCenterUseSsl).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Node);
        }

        /// <summary>
        /// Returns true if Node instances are equal
        /// </summary>
        /// <param name="input">Instance of Node to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Node input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AgentVersion == input.AgentVersion ||
                    (this.AgentVersion != null &&
                    this.AgentVersion.Equals(input.AgentVersion))
                ) && 
                (
                    this.AuditEnabled == input.AuditEnabled ||
                    (this.AuditEnabled != null &&
                    this.AuditEnabled.Equals(input.AuditEnabled))
                ) && 
                (
                    this.CommonAgentCapabilities == input.CommonAgentCapabilities ||
                    this.CommonAgentCapabilities != null &&
                    this.CommonAgentCapabilities.SequenceEqual(input.CommonAgentCapabilities)
                ) && 
                (
                    this.CommonAgentOsName == input.CommonAgentOsName ||
                    (this.CommonAgentOsName != null &&
                    this.CommonAgentOsName.Equals(input.CommonAgentOsName))
                ) && 
                (
                    this.CommonAgentOsVersion == input.CommonAgentOsVersion ||
                    (this.CommonAgentOsVersion != null &&
                    this.CommonAgentOsVersion.Equals(input.CommonAgentOsVersion))
                ) && 
                (
                    this.CommonAgentUuid == input.CommonAgentUuid ||
                    (this.CommonAgentUuid != null &&
                    this.CommonAgentUuid.Equals(input.CommonAgentUuid))
                ) && 
                (
                    this.CommonAgentVersion == input.CommonAgentVersion ||
                    (this.CommonAgentVersion != null &&
                    this.CommonAgentVersion.Equals(input.CommonAgentVersion))
                ) && 
                (
                    this.ConsolePassword == input.ConsolePassword ||
                    (this.ConsolePassword != null &&
                    this.ConsolePassword.Equals(input.ConsolePassword))
                ) && 
                (
                    this.ConsolePort == input.ConsolePort ||
                    (this.ConsolePort != null &&
                    this.ConsolePort.Equals(input.ConsolePort))
                ) && 
                (
                    this.ConsolePrivateKeyFile == input.ConsolePrivateKeyFile ||
                    (this.ConsolePrivateKeyFile != null &&
                    this.ConsolePrivateKeyFile.Equals(input.ConsolePrivateKeyFile))
                ) && 
                (
                    this.ConsoleSuPassword == input.ConsoleSuPassword ||
                    (this.ConsoleSuPassword != null &&
                    this.ConsoleSuPassword.Equals(input.ConsoleSuPassword))
                ) && 
                (
                    this.ConsoleUsername == input.ConsoleUsername ||
                    (this.ConsoleUsername != null &&
                    this.ConsoleUsername.Equals(input.ConsoleUsername))
                ) && 
                (
                    this.Delegate == input.Delegate ||
                    (this.Delegate != null &&
                    this.Delegate.Equals(input.Delegate))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DsUseSsl == input.DsUseSsl ||
                    (this.DsUseSsl != null &&
                    this.DsUseSsl.Equals(input.DsUseSsl))
                ) && 
                (
                    this.ElementCount == input.ElementCount ||
                    (this.ElementCount != null &&
                    this.ElementCount.Equals(input.ElementCount))
                ) && 
                (
                    this.EsxiPassword == input.EsxiPassword ||
                    (this.EsxiPassword != null &&
                    this.EsxiPassword.Equals(input.EsxiPassword))
                ) && 
                (
                    this.EsxiUsername == input.EsxiUsername ||
                    (this.EsxiUsername != null &&
                    this.EsxiUsername.Equals(input.EsxiUsername))
                ) && 
                (
                    this.EventGeneratorEnabled == input.EventGeneratorEnabled ||
                    (this.EventGeneratorEnabled != null &&
                    this.EventGeneratorEnabled.Equals(input.EventGeneratorEnabled))
                ) && 
                (
                    this.EventGeneratorInstalled == input.EventGeneratorInstalled ||
                    (this.EventGeneratorInstalled != null &&
                    this.EventGeneratorInstalled.Equals(input.EventGeneratorInstalled))
                ) && 
                (
                    this.HasFailures == input.HasFailures ||
                    (this.HasFailures != null &&
                    this.HasFailures.Equals(input.HasFailures))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ImportedTime == input.ImportedTime ||
                    (this.ImportedTime != null &&
                    this.ImportedTime.Equals(input.ImportedTime))
                ) && 
                (
                    this.IpAddresses == input.IpAddresses ||
                    this.IpAddresses != null &&
                    this.IpAddresses.SequenceEqual(input.IpAddresses)
                ) && 
                (
                    this.IsDisabled == input.IsDisabled ||
                    (this.IsDisabled != null &&
                    this.IsDisabled.Equals(input.IsDisabled))
                ) && 
                (
                    this.IsSocksProxy == input.IsSocksProxy ||
                    (this.IsSocksProxy != null &&
                    this.IsSocksProxy.Equals(input.IsSocksProxy))
                ) && 
                (
                    this.IsSSLSupported == input.IsSSLSupported ||
                    (this.IsSSLSupported != null &&
                    this.IsSSLSupported.Equals(input.IsSSLSupported))
                ) && 
                (
                    this.LastCheck == input.LastCheck ||
                    (this.LastCheck != null &&
                    this.LastCheck.Equals(input.LastCheck))
                ) && 
                (
                    this.LastRegistration == input.LastRegistration ||
                    (this.LastRegistration != null &&
                    this.LastRegistration.Equals(input.LastRegistration))
                ) && 
                (
                    this.LicensedFeatures == input.LicensedFeatures ||
                    this.LicensedFeatures != null &&
                    this.LicensedFeatures.SequenceEqual(input.LicensedFeatures)
                ) && 
                (
                    this.MacAddresses == input.MacAddresses ||
                    this.MacAddresses != null &&
                    this.MacAddresses.SequenceEqual(input.MacAddresses)
                ) && 
                (
                    this.Make == input.Make ||
                    (this.Make != null &&
                    this.Make.Equals(input.Make))
                ) && 
                (
                    this.MaxSeverity == input.MaxSeverity ||
                    (this.MaxSeverity != null &&
                    this.MaxSeverity.Equals(input.MaxSeverity))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this.ModifiedTime == input.ModifiedTime ||
                    (this.ModifiedTime != null &&
                    this.ModifiedTime.Equals(input.ModifiedTime))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OracleIsService == input.OracleIsService ||
                    (this.OracleIsService != null &&
                    this.OracleIsService.Equals(input.OracleIsService))
                ) && 
                (
                    this.OracleLoginAs == input.OracleLoginAs ||
                    (this.OracleLoginAs != null &&
                    this.OracleLoginAs.Equals(input.OracleLoginAs))
                ) && 
                (
                    this.OracleSecurityType == input.OracleSecurityType ||
                    (this.OracleSecurityType != null &&
                    this.OracleSecurityType.Equals(input.OracleSecurityType))
                ) && 
                (
                    this.ParameterSet == input.ParameterSet ||
                    (this.ParameterSet != null &&
                    this.ParameterSet.Equals(input.ParameterSet))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Port == input.Port ||
                    (this.Port != null &&
                    this.Port.Equals(input.Port))
                ) && 
                (
                    this.ProxyHost == input.ProxyHost ||
                    (this.ProxyHost != null &&
                    this.ProxyHost.Equals(input.ProxyHost))
                ) && 
                (
                    this.ProxyPort == input.ProxyPort ||
                    (this.ProxyPort != null &&
                    this.ProxyPort.Equals(input.ProxyPort))
                ) && 
                (
                    this.RealTimeEnabled == input.RealTimeEnabled ||
                    (this.RealTimeEnabled != null &&
                    this.RealTimeEnabled.Equals(input.RealTimeEnabled))
                ) && 
                (
                    this.RmiHost == input.RmiHost ||
                    (this.RmiHost != null &&
                    this.RmiHost.Equals(input.RmiHost))
                ) && 
                (
                    this.RmiPort == input.RmiPort ||
                    (this.RmiPort != null &&
                    this.RmiPort.Equals(input.RmiPort))
                ) && 
                (
                    this.SqlServerSslOptions == input.SqlServerSslOptions ||
                    (this.SqlServerSslOptions != null &&
                    this.SqlServerSslOptions.Equals(input.SqlServerSslOptions))
                ) && 
                (
                    this.SqlServerUseNtlmv2 == input.SqlServerUseNtlmv2 ||
                    (this.SqlServerUseNtlmv2 != null &&
                    this.SqlServerUseNtlmv2.Equals(input.SqlServerUseNtlmv2))
                ) && 
                (
                    this.SybaseUseSsl == input.SybaseUseSsl ||
                    (this.SybaseUseSsl != null &&
                    this.SybaseUseSsl.Equals(input.SybaseUseSsl))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.TrackingId == input.TrackingId ||
                    (this.TrackingId != null &&
                    this.TrackingId.Equals(input.TrackingId))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.UsingSSL == input.UsingSSL ||
                    (this.UsingSSL != null &&
                    this.UsingSSL.Equals(input.UsingSSL))
                ) && 
                (
                    this.GetvCenterPort == input.GetvCenterPort ||
                    (this.GetvCenterPort != null &&
                    this.GetvCenterPort.Equals(input.GetvCenterPort))
                ) && 
                (
                    this.GetvCenterSyncSchedule == input.GetvCenterSyncSchedule ||
                    (this.GetvCenterSyncSchedule != null &&
                    this.GetvCenterSyncSchedule.Equals(input.GetvCenterSyncSchedule))
                ) && 
                (
                    this.GetvCenterUseSsl == input.GetvCenterUseSsl ||
                    (this.GetvCenterUseSsl != null &&
                    this.GetvCenterUseSsl.Equals(input.GetvCenterUseSsl))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AgentVersion != null)
                    hashCode = hashCode * 59 + this.AgentVersion.GetHashCode();
                if (this.AuditEnabled != null)
                    hashCode = hashCode * 59 + this.AuditEnabled.GetHashCode();
                if (this.CommonAgentCapabilities != null)
                    hashCode = hashCode * 59 + this.CommonAgentCapabilities.GetHashCode();
                if (this.CommonAgentOsName != null)
                    hashCode = hashCode * 59 + this.CommonAgentOsName.GetHashCode();
                if (this.CommonAgentOsVersion != null)
                    hashCode = hashCode * 59 + this.CommonAgentOsVersion.GetHashCode();
                if (this.CommonAgentUuid != null)
                    hashCode = hashCode * 59 + this.CommonAgentUuid.GetHashCode();
                if (this.CommonAgentVersion != null)
                    hashCode = hashCode * 59 + this.CommonAgentVersion.GetHashCode();
                if (this.ConsolePassword != null)
                    hashCode = hashCode * 59 + this.ConsolePassword.GetHashCode();
                if (this.ConsolePort != null)
                    hashCode = hashCode * 59 + this.ConsolePort.GetHashCode();
                if (this.ConsolePrivateKeyFile != null)
                    hashCode = hashCode * 59 + this.ConsolePrivateKeyFile.GetHashCode();
                if (this.ConsoleSuPassword != null)
                    hashCode = hashCode * 59 + this.ConsoleSuPassword.GetHashCode();
                if (this.ConsoleUsername != null)
                    hashCode = hashCode * 59 + this.ConsoleUsername.GetHashCode();
                if (this.Delegate != null)
                    hashCode = hashCode * 59 + this.Delegate.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DsUseSsl != null)
                    hashCode = hashCode * 59 + this.DsUseSsl.GetHashCode();
                if (this.ElementCount != null)
                    hashCode = hashCode * 59 + this.ElementCount.GetHashCode();
                if (this.EsxiPassword != null)
                    hashCode = hashCode * 59 + this.EsxiPassword.GetHashCode();
                if (this.EsxiUsername != null)
                    hashCode = hashCode * 59 + this.EsxiUsername.GetHashCode();
                if (this.EventGeneratorEnabled != null)
                    hashCode = hashCode * 59 + this.EventGeneratorEnabled.GetHashCode();
                if (this.EventGeneratorInstalled != null)
                    hashCode = hashCode * 59 + this.EventGeneratorInstalled.GetHashCode();
                if (this.HasFailures != null)
                    hashCode = hashCode * 59 + this.HasFailures.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ImportedTime != null)
                    hashCode = hashCode * 59 + this.ImportedTime.GetHashCode();
                if (this.IpAddresses != null)
                    hashCode = hashCode * 59 + this.IpAddresses.GetHashCode();
                if (this.IsDisabled != null)
                    hashCode = hashCode * 59 + this.IsDisabled.GetHashCode();
                if (this.IsSocksProxy != null)
                    hashCode = hashCode * 59 + this.IsSocksProxy.GetHashCode();
                if (this.IsSSLSupported != null)
                    hashCode = hashCode * 59 + this.IsSSLSupported.GetHashCode();
                if (this.LastCheck != null)
                    hashCode = hashCode * 59 + this.LastCheck.GetHashCode();
                if (this.LastRegistration != null)
                    hashCode = hashCode * 59 + this.LastRegistration.GetHashCode();
                if (this.LicensedFeatures != null)
                    hashCode = hashCode * 59 + this.LicensedFeatures.GetHashCode();
                if (this.MacAddresses != null)
                    hashCode = hashCode * 59 + this.MacAddresses.GetHashCode();
                if (this.Make != null)
                    hashCode = hashCode * 59 + this.Make.GetHashCode();
                if (this.MaxSeverity != null)
                    hashCode = hashCode * 59 + this.MaxSeverity.GetHashCode();
                if (this.Model != null)
                    hashCode = hashCode * 59 + this.Model.GetHashCode();
                if (this.ModifiedTime != null)
                    hashCode = hashCode * 59 + this.ModifiedTime.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.OracleIsService != null)
                    hashCode = hashCode * 59 + this.OracleIsService.GetHashCode();
                if (this.OracleLoginAs != null)
                    hashCode = hashCode * 59 + this.OracleLoginAs.GetHashCode();
                if (this.OracleSecurityType != null)
                    hashCode = hashCode * 59 + this.OracleSecurityType.GetHashCode();
                if (this.ParameterSet != null)
                    hashCode = hashCode * 59 + this.ParameterSet.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Port != null)
                    hashCode = hashCode * 59 + this.Port.GetHashCode();
                if (this.ProxyHost != null)
                    hashCode = hashCode * 59 + this.ProxyHost.GetHashCode();
                if (this.ProxyPort != null)
                    hashCode = hashCode * 59 + this.ProxyPort.GetHashCode();
                if (this.RealTimeEnabled != null)
                    hashCode = hashCode * 59 + this.RealTimeEnabled.GetHashCode();
                if (this.RmiHost != null)
                    hashCode = hashCode * 59 + this.RmiHost.GetHashCode();
                if (this.RmiPort != null)
                    hashCode = hashCode * 59 + this.RmiPort.GetHashCode();
                if (this.SqlServerSslOptions != null)
                    hashCode = hashCode * 59 + this.SqlServerSslOptions.GetHashCode();
                if (this.SqlServerUseNtlmv2 != null)
                    hashCode = hashCode * 59 + this.SqlServerUseNtlmv2.GetHashCode();
                if (this.SybaseUseSsl != null)
                    hashCode = hashCode * 59 + this.SybaseUseSsl.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.TrackingId != null)
                    hashCode = hashCode * 59 + this.TrackingId.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.UsingSSL != null)
                    hashCode = hashCode * 59 + this.UsingSSL.GetHashCode();
                if (this.GetvCenterPort != null)
                    hashCode = hashCode * 59 + this.GetvCenterPort.GetHashCode();
                if (this.GetvCenterSyncSchedule != null)
                    hashCode = hashCode * 59 + this.GetvCenterSyncSchedule.GetHashCode();
                if (this.GetvCenterUseSsl != null)
                    hashCode = hashCode * 59 + this.GetvCenterUseSsl.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.13.0.bmaster.r20180119190259-8b60eaa.b1753
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The data required for the promote request
    /// </summary>
    [DataContract]
    public partial class PromoteRequestData :  IEquatable<PromoteRequestData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PromoteRequestData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PromoteRequestData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PromoteRequestData" /> class.
        /// </summary>
        /// <param name="approvalId">Approval ID (required).</param>
        /// <param name="comment">Approval comment (required).</param>
        /// <param name="customPropertyTypeId">Use the value of this custom property as the approvalId. May be a node, element, or element version custom property type. (required).</param>
        /// <param name="versionIds">Element versions to promote (required).</param>
        public PromoteRequestData(string approvalId = default(string), string comment = default(string), string customPropertyTypeId = default(string), List<string> versionIds = default(List<string>))
        {
            // to ensure "approvalId" is required (not null)
            if (approvalId == null)
            {
                throw new InvalidDataException("approvalId is a required property for PromoteRequestData and cannot be null");
            }
            else
            {
                this.ApprovalId = approvalId;
            }
            // to ensure "comment" is required (not null)
            if (comment == null)
            {
                throw new InvalidDataException("comment is a required property for PromoteRequestData and cannot be null");
            }
            else
            {
                this.Comment = comment;
            }
            // to ensure "customPropertyTypeId" is required (not null)
            if (customPropertyTypeId == null)
            {
                throw new InvalidDataException("customPropertyTypeId is a required property for PromoteRequestData and cannot be null");
            }
            else
            {
                this.CustomPropertyTypeId = customPropertyTypeId;
            }
            // to ensure "versionIds" is required (not null)
            if (versionIds == null)
            {
                throw new InvalidDataException("versionIds is a required property for PromoteRequestData and cannot be null");
            }
            else
            {
                this.VersionIds = versionIds;
            }
        }
        
        /// <summary>
        /// Approval ID
        /// </summary>
        /// <value>Approval ID</value>
        [DataMember(Name="approvalId", EmitDefaultValue=false)]
        public string ApprovalId { get; set; }

        /// <summary>
        /// Approval comment
        /// </summary>
        /// <value>Approval comment</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Use the value of this custom property as the approvalId. May be a node, element, or element version custom property type.
        /// </summary>
        /// <value>Use the value of this custom property as the approvalId. May be a node, element, or element version custom property type.</value>
        [DataMember(Name="customPropertyTypeId", EmitDefaultValue=false)]
        public string CustomPropertyTypeId { get; set; }

        /// <summary>
        /// Element versions to promote
        /// </summary>
        /// <value>Element versions to promote</value>
        [DataMember(Name="versionIds", EmitDefaultValue=false)]
        public List<string> VersionIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PromoteRequestData {\n");
            sb.Append("  ApprovalId: ").Append(ApprovalId).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  CustomPropertyTypeId: ").Append(CustomPropertyTypeId).Append("\n");
            sb.Append("  VersionIds: ").Append(VersionIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PromoteRequestData);
        }

        /// <summary>
        /// Returns true if PromoteRequestData instances are equal
        /// </summary>
        /// <param name="input">Instance of PromoteRequestData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PromoteRequestData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApprovalId == input.ApprovalId ||
                    (this.ApprovalId != null &&
                    this.ApprovalId.Equals(input.ApprovalId))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.CustomPropertyTypeId == input.CustomPropertyTypeId ||
                    (this.CustomPropertyTypeId != null &&
                    this.CustomPropertyTypeId.Equals(input.CustomPropertyTypeId))
                ) && 
                (
                    this.VersionIds == input.VersionIds ||
                    this.VersionIds != null &&
                    this.VersionIds.SequenceEqual(input.VersionIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApprovalId != null)
                    hashCode = hashCode * 59 + this.ApprovalId.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.CustomPropertyTypeId != null)
                    hashCode = hashCode * 59 + this.CustomPropertyTypeId.GetHashCode();
                if (this.VersionIds != null)
                    hashCode = hashCode * 59 + this.VersionIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

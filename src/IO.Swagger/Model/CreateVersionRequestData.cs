/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.12.1.bmaster.r20170922182356-4e84151.b1741
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The data required for the create element version request
    /// </summary>
    [DataContract]
    public partial class CreateVersionRequestData :  IEquatable<CreateVersionRequestData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateVersionRequestData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateVersionRequestData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateVersionRequestData" /> class.
        /// </summary>
        /// <param name="nodeId">The ID of the node the element versions should be associated with (required).</param>
        /// <param name="ruleId">The ID of the rule the element versions should be associated with. The rule must be of type &#39;External Rule&#39; (required).</param>
        /// <param name="versions">A list of version descriptions (required).</param>
        public CreateVersionRequestData(string nodeId = default(string), string ruleId = default(string), List<VersionDescription> versions = default(List<VersionDescription>))
        {
            // to ensure "nodeId" is required (not null)
            if (nodeId == null)
            {
                throw new InvalidDataException("nodeId is a required property for CreateVersionRequestData and cannot be null");
            }
            else
            {
                this.NodeId = nodeId;
            }
            // to ensure "ruleId" is required (not null)
            if (ruleId == null)
            {
                throw new InvalidDataException("ruleId is a required property for CreateVersionRequestData and cannot be null");
            }
            else
            {
                this.RuleId = ruleId;
            }
            // to ensure "versions" is required (not null)
            if (versions == null)
            {
                throw new InvalidDataException("versions is a required property for CreateVersionRequestData and cannot be null");
            }
            else
            {
                this.Versions = versions;
            }
        }
        
        /// <summary>
        /// The ID of the node the element versions should be associated with
        /// </summary>
        /// <value>The ID of the node the element versions should be associated with</value>
        [DataMember(Name="nodeId", EmitDefaultValue=false)]
        public string NodeId { get; set; }

        /// <summary>
        /// The ID of the rule the element versions should be associated with. The rule must be of type &#39;External Rule&#39;
        /// </summary>
        /// <value>The ID of the rule the element versions should be associated with. The rule must be of type &#39;External Rule&#39;</value>
        [DataMember(Name="ruleId", EmitDefaultValue=false)]
        public string RuleId { get; set; }

        /// <summary>
        /// A list of version descriptions
        /// </summary>
        /// <value>A list of version descriptions</value>
        [DataMember(Name="versions", EmitDefaultValue=false)]
        public List<VersionDescription> Versions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateVersionRequestData {\n");
            sb.Append("  NodeId: ").Append(NodeId).Append("\n");
            sb.Append("  RuleId: ").Append(RuleId).Append("\n");
            sb.Append("  Versions: ").Append(Versions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateVersionRequestData);
        }

        /// <summary>
        /// Returns true if CreateVersionRequestData instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateVersionRequestData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateVersionRequestData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NodeId == input.NodeId ||
                    (this.NodeId != null &&
                    this.NodeId.Equals(input.NodeId))
                ) && 
                (
                    this.RuleId == input.RuleId ||
                    (this.RuleId != null &&
                    this.RuleId.Equals(input.RuleId))
                ) && 
                (
                    this.Versions == input.Versions ||
                    this.Versions != null &&
                    this.Versions.SequenceEqual(input.Versions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NodeId != null)
                    hashCode = hashCode * 59 + this.NodeId.GetHashCode();
                if (this.RuleId != null)
                    hashCode = hashCode * 59 + this.RuleId.GetHashCode();
                if (this.Versions != null)
                    hashCode = hashCode * 59 + this.Versions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

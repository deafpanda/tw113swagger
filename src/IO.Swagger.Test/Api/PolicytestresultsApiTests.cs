/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.12.1.bmaster.r20170922182356-4e84151.b1741
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing PolicytestresultsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PolicytestresultsApiTests
    {
        private PolicytestresultsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PolicytestresultsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PolicytestresultsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PolicytestresultsApi
            //Assert.IsInstanceOfType(typeof(PolicytestresultsApi), instance, "instance is a PolicytestresultsApi");
        }

        
        /// <summary>
        /// Test CreateRemediation
        /// </summary>
        [Test]
        public void CreateRemediationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RemediationRequestCommand body = null;
            //var response = instance.CreateRemediation(body);
            //Assert.IsInstanceOf<RemediationRequestCommand> (response, "response is RemediationRequestCommand");
        }
        
        /// <summary>
        /// Test GetLatestPolicyTestResults
        /// </summary>
        [Test]
        public void GetLatestPolicyTestResultsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pageLimit = null;
            //string pageStart = null;
            //List<string> id = null;
            //List<string> policyTestId = null;
            //List<string> policyTestName = null;
            //List<string> elementId = null;
            //List<string> elementName = null;
            //List<string> elementVersionId = null;
            //List<string> nodeId = null;
            //List<string> nodeLabel = null;
            //List<string> state = null;
            //List<string> creationTime = null;
            //string creationTimeRange = null;
            //var response = instance.GetLatestPolicyTestResults(pageLimit, pageStart, id, policyTestId, policyTestName, elementId, elementName, elementVersionId, nodeId, nodeLabel, state, creationTime, creationTimeRange);
            //Assert.IsInstanceOf<List<PolicyTestResult>> (response, "response is List<PolicyTestResult>");
        }
        
        /// <summary>
        /// Test GetPolicyTestResultById
        /// </summary>
        [Test]
        public void GetPolicyTestResultByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string rkPolicyTestResultId = null;
            //var response = instance.GetPolicyTestResultById(rkPolicyTestResultId);
            //Assert.IsInstanceOf<PolicyTestResult> (response, "response is PolicyTestResult");
        }
        
        /// <summary>
        /// Test GetPolicyTestResults
        /// </summary>
        [Test]
        public void GetPolicyTestResultsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pageLimit = null;
            //string pageStart = null;
            //List<string> id = null;
            //List<string> policyTestId = null;
            //List<string> policyTestName = null;
            //List<string> elementId = null;
            //List<string> elementName = null;
            //List<string> elementVersionId = null;
            //List<string> nodeId = null;
            //List<string> nodeLabel = null;
            //List<string> state = null;
            //List<string> creationTime = null;
            //string creationTimeRange = null;
            //string at = null;
            //var response = instance.GetPolicyTestResults(pageLimit, pageStart, id, policyTestId, policyTestName, elementId, elementName, elementVersionId, nodeId, nodeLabel, state, creationTime, creationTimeRange, at);
            //Assert.IsInstanceOf<List<PolicyTestResult>> (response, "response is List<PolicyTestResult>");
        }
        
        /// <summary>
        /// Test GetRemediationById
        /// </summary>
        [Test]
        public void GetRemediationByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string requestId = null;
            //var response = instance.GetRemediationById(requestId);
            //Assert.IsInstanceOf<RemediationRequestCommand> (response, "response is RemediationRequestCommand");
        }
        
        /// <summary>
        /// Test GetUnknownTestResults
        /// </summary>
        [Test]
        public void GetUnknownTestResultsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string at = null;
            //var response = instance.GetUnknownTestResults(at);
            //Assert.IsInstanceOf<List<UnknownPolicyTestResult>> (response, "response is List<UnknownPolicyTestResult>");
        }
        
        /// <summary>
        /// Test PolicyTestResultsExtract
        /// </summary>
        [Test]
        public void PolicyTestResultsExtractTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pageLimit = null;
            //string previousId = null;
            //string creationTimeRange = null;
            //var response = instance.PolicyTestResultsExtract(pageLimit, previousId, creationTimeRange);
            //Assert.IsInstanceOf<List<PolicyTestResult>> (response, "response is List<PolicyTestResult>");
        }
        
    }

}

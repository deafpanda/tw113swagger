/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.12.1.bmaster.r20170922182356-4e84151.b1741
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing TasksApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TasksApiTests
    {
        private TasksApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TasksApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TasksApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TasksApi
            //Assert.IsInstanceOfType(typeof(TasksApi), instance, "instance is a TasksApi");
        }

        
        /// <summary>
        /// Test CreateExecuteTaskRequest
        /// </summary>
        [Test]
        public void CreateExecuteTaskRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ExecuteTaskRequestCommand body = null;
            //var response = instance.CreateExecuteTaskRequest(body);
            //Assert.IsInstanceOf<ExecuteTaskRequestCommand> (response, "response is ExecuteTaskRequestCommand");
        }
        
        /// <summary>
        /// Test CreateTask
        /// </summary>
        [Test]
        public void CreateTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Task body = null;
            //var response = instance.CreateTask(body);
            //Assert.IsInstanceOf<Task> (response, "response is Task");
        }
        
        /// <summary>
        /// Test DeleteTask
        /// </summary>
        [Test]
        public void DeleteTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string rkTaskId = null;
            //instance.DeleteTask(rkTaskId);
            
        }
        
        /// <summary>
        /// Test GetExecutionTaskRequestById
        /// </summary>
        [Test]
        public void GetExecutionTaskRequestByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string requestId = null;
            //var response = instance.GetExecutionTaskRequestById(requestId);
            //Assert.IsInstanceOf<ExecuteTaskRequestCommand> (response, "response is ExecuteTaskRequestCommand");
        }
        
        /// <summary>
        /// Test GetTargetableNodes
        /// </summary>
        [Test]
        public void GetTargetableNodesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string rkTaskId = null;
            //var response = instance.GetTargetableNodes(rkTaskId);
            //Assert.IsInstanceOf<List<Node>> (response, "response is List<Node>");
        }
        
        /// <summary>
        /// Test GetTaskById
        /// </summary>
        [Test]
        public void GetTaskByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string rkTaskId = null;
            //var response = instance.GetTaskById(rkTaskId);
            //Assert.IsInstanceOf<Task> (response, "response is Task");
        }
        
        /// <summary>
        /// Test GetTasks
        /// </summary>
        [Test]
        public void GetTasksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pageLimit = null;
            //string pageStart = null;
            //List<string> id = null;
            //List<string> name = null;
            //List<string> type = null;
            //List<string> description = null;
            //List<string> subDescription = null;
            //List<string> status = null;
            //bool? enabled = null;
            //List<string> lastStart = null;
            //List<string> lastDuration = null;
            //List<string> nextStart = null;
            //List<string> userId = null;
            //List<string> archiveLogsOlderThan = null;
            //List<string> archiveLogsExceeding = null;
            //List<string> timeout = null;
            //List<string> compactVersionsOlderThan = null;
            //List<string> compactVersionsExceeding = null;
            //bool? archiveAuditEvents = null;
            //bool? newBaselinesOnly = null;
            //List<string> nodeId = null;
            //List<string> ruleId = null;
            //List<string> actionIds = null;
            //List<string> reportId = null;
            //List<string> reportUserIds = null;
            //List<string> additionalEmailAddresses = null;
            //List<string> emailServer = null;
            //List<string> reportFormat = null;
            //bool? archiveReports = null;
            //bool? ignoreEmptyReports = null;
            //var response = instance.GetTasks(pageLimit, pageStart, id, name, type, description, subDescription, status, enabled, lastStart, lastDuration, nextStart, userId, archiveLogsOlderThan, archiveLogsExceeding, timeout, compactVersionsOlderThan, compactVersionsExceeding, archiveAuditEvents, newBaselinesOnly, nodeId, ruleId, actionIds, reportId, reportUserIds, additionalEmailAddresses, emailServer, reportFormat, archiveReports, ignoreEmptyReports);
            //Assert.IsInstanceOf<Task> (response, "response is Task");
        }
        
        /// <summary>
        /// Test UpdateTask
        /// </summary>
        [Test]
        public void UpdateTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string rkTaskId = null;
            //Task task = null;
            //var response = instance.UpdateTask(rkTaskId, task);
            //Assert.IsInstanceOf<Task> (response, "response is Task");
        }
        
    }

}

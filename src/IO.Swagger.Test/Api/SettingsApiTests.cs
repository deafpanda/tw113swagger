/* 
 * Tripwire Enterprise TE REST API User Guide & Reference
 *
 * The TE REST API allows automation of many aspects of Tripwire Enterprise
 *
 * OpenAPI spec version: 1.12.1.bmaster.r20170922182356-4e84151.b1741
 * Contact: support@tripwire.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing SettingsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SettingsApiTests
    {
        private SettingsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SettingsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SettingsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SettingsApi
            //Assert.IsInstanceOfType(typeof(SettingsApi), instance, "instance is a SettingsApi");
        }

        
        /// <summary>
        /// Test CreateCustomNodeTypes
        /// </summary>
        [Test]
        public void CreateCustomNodeTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CustomNodeType body = null;
            //var response = instance.CreateCustomNodeTypes(body);
            //Assert.IsInstanceOf<CustomNodeType> (response, "response is CustomNodeType");
        }
        
        /// <summary>
        /// Test CreateGlobalVariables
        /// </summary>
        [Test]
        public void CreateGlobalVariablesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GlobalVariable body = null;
            //var response = instance.CreateGlobalVariables(body);
            //Assert.IsInstanceOf<GlobalVariable> (response, "response is GlobalVariable");
        }
        
        /// <summary>
        /// Test DeleteCustomNodeType
        /// </summary>
        [Test]
        public void DeleteCustomNodeTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string rkCustomNodeTypeId = null;
            //instance.DeleteCustomNodeType(rkCustomNodeTypeId);
            
        }
        
        /// <summary>
        /// Test DeleteGlobalVariable
        /// </summary>
        [Test]
        public void DeleteGlobalVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.DeleteGlobalVariable(name);
            
        }
        
        /// <summary>
        /// Test GetCustomNodeTypes
        /// </summary>
        [Test]
        public void GetCustomNodeTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> id = null;
            //List<string> name = null;
            //List<string> description = null;
            //List<string> subDescription = null;
            //var response = instance.GetCustomNodeTypes(id, name, description, subDescription);
            //Assert.IsInstanceOf<CustomNodeType> (response, "response is CustomNodeType");
        }
        
        /// <summary>
        /// Test GetFileSystem
        /// </summary>
        [Test]
        public void GetFileSystemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetFileSystem();
            //Assert.IsInstanceOf<FileSystemSettings> (response, "response is FileSystemSettings");
        }
        
        /// <summary>
        /// Test GetGlobalVariables
        /// </summary>
        [Test]
        public void GetGlobalVariablesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> name = null;
            //List<string> description = null;
            //List<string> subDescription = null;
            //string type = null;
            //var response = instance.GetGlobalVariables(name, description, subDescription, type);
            //Assert.IsInstanceOf<GlobalVariable> (response, "response is GlobalVariable");
        }
        
        /// <summary>
        /// Test GetLicenses
        /// </summary>
        [Test]
        public void GetLicensesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetLicenses();
            //Assert.IsInstanceOf<List<License>> (response, "response is List<License>");
        }
        
        /// <summary>
        /// Test GetSeverityRange
        /// </summary>
        [Test]
        public void GetSeverityRangeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetSeverityRange();
            //Assert.IsInstanceOf<List<SeverityRange>> (response, "response is List<SeverityRange>");
        }
        
        /// <summary>
        /// Test GetSystemProperties
        /// </summary>
        [Test]
        public void GetSystemPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetSystemProperties();
            //Assert.IsInstanceOf<Dictionary<string, Object>> (response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test UpdateGlobalVariables
        /// </summary>
        [Test]
        public void UpdateGlobalVariablesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //GlobalVariable body = null;
            //var response = instance.UpdateGlobalVariables(name, body);
            //Assert.IsInstanceOf<GlobalVariable> (response, "response is GlobalVariable");
        }
        
    }

}
